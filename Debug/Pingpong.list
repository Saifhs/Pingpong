
Pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005954  08005954  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800595c  0800595c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  08005970  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005970  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012363  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e2  00000000  00000000  00032397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00035890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016188  00000000  00000000  000367b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012722  00000000  00000000  0004c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbd7  00000000  00000000  0005f062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eac39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b70  00000000  00000000  000eac8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005890 	.word	0x08005890

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005890 	.word	0x08005890

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fe66 	bl	8000fac <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fe61 	bl	8000fac <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fadd>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	46c6      	mov	lr, r8
 8000458:	0243      	lsls	r3, r0, #9
 800045a:	0a5b      	lsrs	r3, r3, #9
 800045c:	024e      	lsls	r6, r1, #9
 800045e:	0045      	lsls	r5, r0, #1
 8000460:	004f      	lsls	r7, r1, #1
 8000462:	00da      	lsls	r2, r3, #3
 8000464:	0fc4      	lsrs	r4, r0, #31
 8000466:	469c      	mov	ip, r3
 8000468:	0a70      	lsrs	r0, r6, #9
 800046a:	4690      	mov	r8, r2
 800046c:	b500      	push	{lr}
 800046e:	0e2d      	lsrs	r5, r5, #24
 8000470:	0e3f      	lsrs	r7, r7, #24
 8000472:	0fc9      	lsrs	r1, r1, #31
 8000474:	09b6      	lsrs	r6, r6, #6
 8000476:	428c      	cmp	r4, r1
 8000478:	d04b      	beq.n	8000512 <__aeabi_fadd+0xbe>
 800047a:	1bea      	subs	r2, r5, r7
 800047c:	2a00      	cmp	r2, #0
 800047e:	dd36      	ble.n	80004ee <__aeabi_fadd+0x9a>
 8000480:	2f00      	cmp	r7, #0
 8000482:	d061      	beq.n	8000548 <__aeabi_fadd+0xf4>
 8000484:	2dff      	cmp	r5, #255	; 0xff
 8000486:	d100      	bne.n	800048a <__aeabi_fadd+0x36>
 8000488:	e0ad      	b.n	80005e6 <__aeabi_fadd+0x192>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	04db      	lsls	r3, r3, #19
 800048e:	431e      	orrs	r6, r3
 8000490:	2a1b      	cmp	r2, #27
 8000492:	dc00      	bgt.n	8000496 <__aeabi_fadd+0x42>
 8000494:	e0d3      	b.n	800063e <__aeabi_fadd+0x1ea>
 8000496:	2001      	movs	r0, #1
 8000498:	4643      	mov	r3, r8
 800049a:	1a18      	subs	r0, r3, r0
 800049c:	0143      	lsls	r3, r0, #5
 800049e:	d400      	bmi.n	80004a2 <__aeabi_fadd+0x4e>
 80004a0:	e08c      	b.n	80005bc <__aeabi_fadd+0x168>
 80004a2:	0180      	lsls	r0, r0, #6
 80004a4:	0987      	lsrs	r7, r0, #6
 80004a6:	0038      	movs	r0, r7
 80004a8:	f000 fd62 	bl	8000f70 <__clzsi2>
 80004ac:	3805      	subs	r0, #5
 80004ae:	4087      	lsls	r7, r0
 80004b0:	4285      	cmp	r5, r0
 80004b2:	dc00      	bgt.n	80004b6 <__aeabi_fadd+0x62>
 80004b4:	e0b6      	b.n	8000624 <__aeabi_fadd+0x1d0>
 80004b6:	1a2d      	subs	r5, r5, r0
 80004b8:	48b3      	ldr	r0, [pc, #716]	; (8000788 <__aeabi_fadd+0x334>)
 80004ba:	4038      	ands	r0, r7
 80004bc:	0743      	lsls	r3, r0, #29
 80004be:	d004      	beq.n	80004ca <__aeabi_fadd+0x76>
 80004c0:	230f      	movs	r3, #15
 80004c2:	4003      	ands	r3, r0
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d000      	beq.n	80004ca <__aeabi_fadd+0x76>
 80004c8:	3004      	adds	r0, #4
 80004ca:	0143      	lsls	r3, r0, #5
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_fadd+0x7c>
 80004ce:	e078      	b.n	80005c2 <__aeabi_fadd+0x16e>
 80004d0:	1c6a      	adds	r2, r5, #1
 80004d2:	2dfe      	cmp	r5, #254	; 0xfe
 80004d4:	d065      	beq.n	80005a2 <__aeabi_fadd+0x14e>
 80004d6:	0180      	lsls	r0, r0, #6
 80004d8:	0a43      	lsrs	r3, r0, #9
 80004da:	469c      	mov	ip, r3
 80004dc:	b2d2      	uxtb	r2, r2
 80004de:	4663      	mov	r3, ip
 80004e0:	05d0      	lsls	r0, r2, #23
 80004e2:	4318      	orrs	r0, r3
 80004e4:	07e4      	lsls	r4, r4, #31
 80004e6:	4320      	orrs	r0, r4
 80004e8:	bc80      	pop	{r7}
 80004ea:	46b8      	mov	r8, r7
 80004ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	d035      	beq.n	800055e <__aeabi_fadd+0x10a>
 80004f2:	1b7a      	subs	r2, r7, r5
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d000      	beq.n	80004fa <__aeabi_fadd+0xa6>
 80004f8:	e0af      	b.n	800065a <__aeabi_fadd+0x206>
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_fadd+0xae>
 8000500:	e0a7      	b.n	8000652 <__aeabi_fadd+0x1fe>
 8000502:	1e53      	subs	r3, r2, #1
 8000504:	2a01      	cmp	r2, #1
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0xb6>
 8000508:	e12f      	b.n	800076a <__aeabi_fadd+0x316>
 800050a:	2aff      	cmp	r2, #255	; 0xff
 800050c:	d069      	beq.n	80005e2 <__aeabi_fadd+0x18e>
 800050e:	001a      	movs	r2, r3
 8000510:	e0aa      	b.n	8000668 <__aeabi_fadd+0x214>
 8000512:	1be9      	subs	r1, r5, r7
 8000514:	2900      	cmp	r1, #0
 8000516:	dd70      	ble.n	80005fa <__aeabi_fadd+0x1a6>
 8000518:	2f00      	cmp	r7, #0
 800051a:	d037      	beq.n	800058c <__aeabi_fadd+0x138>
 800051c:	2dff      	cmp	r5, #255	; 0xff
 800051e:	d062      	beq.n	80005e6 <__aeabi_fadd+0x192>
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	04db      	lsls	r3, r3, #19
 8000524:	431e      	orrs	r6, r3
 8000526:	291b      	cmp	r1, #27
 8000528:	dc00      	bgt.n	800052c <__aeabi_fadd+0xd8>
 800052a:	e0b0      	b.n	800068e <__aeabi_fadd+0x23a>
 800052c:	2001      	movs	r0, #1
 800052e:	4440      	add	r0, r8
 8000530:	0143      	lsls	r3, r0, #5
 8000532:	d543      	bpl.n	80005bc <__aeabi_fadd+0x168>
 8000534:	3501      	adds	r5, #1
 8000536:	2dff      	cmp	r5, #255	; 0xff
 8000538:	d033      	beq.n	80005a2 <__aeabi_fadd+0x14e>
 800053a:	2301      	movs	r3, #1
 800053c:	4a93      	ldr	r2, [pc, #588]	; (800078c <__aeabi_fadd+0x338>)
 800053e:	4003      	ands	r3, r0
 8000540:	0840      	lsrs	r0, r0, #1
 8000542:	4010      	ands	r0, r2
 8000544:	4318      	orrs	r0, r3
 8000546:	e7b9      	b.n	80004bc <__aeabi_fadd+0x68>
 8000548:	2e00      	cmp	r6, #0
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0xfa>
 800054c:	e083      	b.n	8000656 <__aeabi_fadd+0x202>
 800054e:	1e51      	subs	r1, r2, #1
 8000550:	2a01      	cmp	r2, #1
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0x102>
 8000554:	e0d8      	b.n	8000708 <__aeabi_fadd+0x2b4>
 8000556:	2aff      	cmp	r2, #255	; 0xff
 8000558:	d045      	beq.n	80005e6 <__aeabi_fadd+0x192>
 800055a:	000a      	movs	r2, r1
 800055c:	e798      	b.n	8000490 <__aeabi_fadd+0x3c>
 800055e:	27fe      	movs	r7, #254	; 0xfe
 8000560:	1c6a      	adds	r2, r5, #1
 8000562:	4217      	tst	r7, r2
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x114>
 8000566:	e086      	b.n	8000676 <__aeabi_fadd+0x222>
 8000568:	2d00      	cmp	r5, #0
 800056a:	d000      	beq.n	800056e <__aeabi_fadd+0x11a>
 800056c:	e0b7      	b.n	80006de <__aeabi_fadd+0x28a>
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x122>
 8000574:	e0f3      	b.n	800075e <__aeabi_fadd+0x30a>
 8000576:	2200      	movs	r2, #0
 8000578:	2e00      	cmp	r6, #0
 800057a:	d0b0      	beq.n	80004de <__aeabi_fadd+0x8a>
 800057c:	1b98      	subs	r0, r3, r6
 800057e:	0143      	lsls	r3, r0, #5
 8000580:	d400      	bmi.n	8000584 <__aeabi_fadd+0x130>
 8000582:	e0fa      	b.n	800077a <__aeabi_fadd+0x326>
 8000584:	4643      	mov	r3, r8
 8000586:	000c      	movs	r4, r1
 8000588:	1af0      	subs	r0, r6, r3
 800058a:	e797      	b.n	80004bc <__aeabi_fadd+0x68>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x13e>
 8000590:	e0c8      	b.n	8000724 <__aeabi_fadd+0x2d0>
 8000592:	1e4a      	subs	r2, r1, #1
 8000594:	2901      	cmp	r1, #1
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x146>
 8000598:	e0ae      	b.n	80006f8 <__aeabi_fadd+0x2a4>
 800059a:	29ff      	cmp	r1, #255	; 0xff
 800059c:	d023      	beq.n	80005e6 <__aeabi_fadd+0x192>
 800059e:	0011      	movs	r1, r2
 80005a0:	e7c1      	b.n	8000526 <__aeabi_fadd+0xd2>
 80005a2:	2300      	movs	r3, #0
 80005a4:	22ff      	movs	r2, #255	; 0xff
 80005a6:	469c      	mov	ip, r3
 80005a8:	e799      	b.n	80004de <__aeabi_fadd+0x8a>
 80005aa:	21fe      	movs	r1, #254	; 0xfe
 80005ac:	1c6a      	adds	r2, r5, #1
 80005ae:	4211      	tst	r1, r2
 80005b0:	d077      	beq.n	80006a2 <__aeabi_fadd+0x24e>
 80005b2:	2aff      	cmp	r2, #255	; 0xff
 80005b4:	d0f5      	beq.n	80005a2 <__aeabi_fadd+0x14e>
 80005b6:	0015      	movs	r5, r2
 80005b8:	4446      	add	r6, r8
 80005ba:	0870      	lsrs	r0, r6, #1
 80005bc:	0743      	lsls	r3, r0, #29
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x16e>
 80005c0:	e77e      	b.n	80004c0 <__aeabi_fadd+0x6c>
 80005c2:	08c3      	lsrs	r3, r0, #3
 80005c4:	2dff      	cmp	r5, #255	; 0xff
 80005c6:	d00e      	beq.n	80005e6 <__aeabi_fadd+0x192>
 80005c8:	025b      	lsls	r3, r3, #9
 80005ca:	0a5b      	lsrs	r3, r3, #9
 80005cc:	469c      	mov	ip, r3
 80005ce:	b2ea      	uxtb	r2, r5
 80005d0:	e785      	b.n	80004de <__aeabi_fadd+0x8a>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d007      	beq.n	80005e6 <__aeabi_fadd+0x192>
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	03d2      	lsls	r2, r2, #15
 80005da:	4213      	tst	r3, r2
 80005dc:	d003      	beq.n	80005e6 <__aeabi_fadd+0x192>
 80005de:	4210      	tst	r0, r2
 80005e0:	d101      	bne.n	80005e6 <__aeabi_fadd+0x192>
 80005e2:	000c      	movs	r4, r1
 80005e4:	0003      	movs	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0db      	beq.n	80005a2 <__aeabi_fadd+0x14e>
 80005ea:	2080      	movs	r0, #128	; 0x80
 80005ec:	03c0      	lsls	r0, r0, #15
 80005ee:	4318      	orrs	r0, r3
 80005f0:	0240      	lsls	r0, r0, #9
 80005f2:	0a43      	lsrs	r3, r0, #9
 80005f4:	469c      	mov	ip, r3
 80005f6:	22ff      	movs	r2, #255	; 0xff
 80005f8:	e771      	b.n	80004de <__aeabi_fadd+0x8a>
 80005fa:	2900      	cmp	r1, #0
 80005fc:	d0d5      	beq.n	80005aa <__aeabi_fadd+0x156>
 80005fe:	1b7a      	subs	r2, r7, r5
 8000600:	2d00      	cmp	r5, #0
 8000602:	d160      	bne.n	80006c6 <__aeabi_fadd+0x272>
 8000604:	4643      	mov	r3, r8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d024      	beq.n	8000654 <__aeabi_fadd+0x200>
 800060a:	1e53      	subs	r3, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d073      	beq.n	80006f8 <__aeabi_fadd+0x2a4>
 8000610:	2aff      	cmp	r2, #255	; 0xff
 8000612:	d0e7      	beq.n	80005e4 <__aeabi_fadd+0x190>
 8000614:	001a      	movs	r2, r3
 8000616:	2a1b      	cmp	r2, #27
 8000618:	dc00      	bgt.n	800061c <__aeabi_fadd+0x1c8>
 800061a:	e085      	b.n	8000728 <__aeabi_fadd+0x2d4>
 800061c:	2001      	movs	r0, #1
 800061e:	003d      	movs	r5, r7
 8000620:	1980      	adds	r0, r0, r6
 8000622:	e785      	b.n	8000530 <__aeabi_fadd+0xdc>
 8000624:	2320      	movs	r3, #32
 8000626:	003a      	movs	r2, r7
 8000628:	1b45      	subs	r5, r0, r5
 800062a:	0038      	movs	r0, r7
 800062c:	3501      	adds	r5, #1
 800062e:	40ea      	lsrs	r2, r5
 8000630:	1b5d      	subs	r5, r3, r5
 8000632:	40a8      	lsls	r0, r5
 8000634:	1e43      	subs	r3, r0, #1
 8000636:	4198      	sbcs	r0, r3
 8000638:	2500      	movs	r5, #0
 800063a:	4310      	orrs	r0, r2
 800063c:	e73e      	b.n	80004bc <__aeabi_fadd+0x68>
 800063e:	2320      	movs	r3, #32
 8000640:	0030      	movs	r0, r6
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	0031      	movs	r1, r6
 8000646:	4098      	lsls	r0, r3
 8000648:	40d1      	lsrs	r1, r2
 800064a:	1e43      	subs	r3, r0, #1
 800064c:	4198      	sbcs	r0, r3
 800064e:	4308      	orrs	r0, r1
 8000650:	e722      	b.n	8000498 <__aeabi_fadd+0x44>
 8000652:	000c      	movs	r4, r1
 8000654:	0003      	movs	r3, r0
 8000656:	0015      	movs	r5, r2
 8000658:	e7b4      	b.n	80005c4 <__aeabi_fadd+0x170>
 800065a:	2fff      	cmp	r7, #255	; 0xff
 800065c:	d0c1      	beq.n	80005e2 <__aeabi_fadd+0x18e>
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	4640      	mov	r0, r8
 8000662:	04db      	lsls	r3, r3, #19
 8000664:	4318      	orrs	r0, r3
 8000666:	4680      	mov	r8, r0
 8000668:	2a1b      	cmp	r2, #27
 800066a:	dd51      	ble.n	8000710 <__aeabi_fadd+0x2bc>
 800066c:	2001      	movs	r0, #1
 800066e:	000c      	movs	r4, r1
 8000670:	003d      	movs	r5, r7
 8000672:	1a30      	subs	r0, r6, r0
 8000674:	e712      	b.n	800049c <__aeabi_fadd+0x48>
 8000676:	4643      	mov	r3, r8
 8000678:	1b9f      	subs	r7, r3, r6
 800067a:	017b      	lsls	r3, r7, #5
 800067c:	d42b      	bmi.n	80006d6 <__aeabi_fadd+0x282>
 800067e:	2f00      	cmp	r7, #0
 8000680:	d000      	beq.n	8000684 <__aeabi_fadd+0x230>
 8000682:	e710      	b.n	80004a6 <__aeabi_fadd+0x52>
 8000684:	2300      	movs	r3, #0
 8000686:	2400      	movs	r4, #0
 8000688:	2200      	movs	r2, #0
 800068a:	469c      	mov	ip, r3
 800068c:	e727      	b.n	80004de <__aeabi_fadd+0x8a>
 800068e:	2320      	movs	r3, #32
 8000690:	0032      	movs	r2, r6
 8000692:	0030      	movs	r0, r6
 8000694:	40ca      	lsrs	r2, r1
 8000696:	1a59      	subs	r1, r3, r1
 8000698:	4088      	lsls	r0, r1
 800069a:	1e43      	subs	r3, r0, #1
 800069c:	4198      	sbcs	r0, r3
 800069e:	4310      	orrs	r0, r2
 80006a0:	e745      	b.n	800052e <__aeabi_fadd+0xda>
 80006a2:	2d00      	cmp	r5, #0
 80006a4:	d14a      	bne.n	800073c <__aeabi_fadd+0x2e8>
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d063      	beq.n	8000774 <__aeabi_fadd+0x320>
 80006ac:	2200      	movs	r2, #0
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x260>
 80006b2:	e714      	b.n	80004de <__aeabi_fadd+0x8a>
 80006b4:	0030      	movs	r0, r6
 80006b6:	4440      	add	r0, r8
 80006b8:	0143      	lsls	r3, r0, #5
 80006ba:	d400      	bmi.n	80006be <__aeabi_fadd+0x26a>
 80006bc:	e77e      	b.n	80005bc <__aeabi_fadd+0x168>
 80006be:	4b32      	ldr	r3, [pc, #200]	; (8000788 <__aeabi_fadd+0x334>)
 80006c0:	3501      	adds	r5, #1
 80006c2:	4018      	ands	r0, r3
 80006c4:	e77a      	b.n	80005bc <__aeabi_fadd+0x168>
 80006c6:	2fff      	cmp	r7, #255	; 0xff
 80006c8:	d08c      	beq.n	80005e4 <__aeabi_fadd+0x190>
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	4641      	mov	r1, r8
 80006ce:	04db      	lsls	r3, r3, #19
 80006d0:	4319      	orrs	r1, r3
 80006d2:	4688      	mov	r8, r1
 80006d4:	e79f      	b.n	8000616 <__aeabi_fadd+0x1c2>
 80006d6:	4643      	mov	r3, r8
 80006d8:	000c      	movs	r4, r1
 80006da:	1af7      	subs	r7, r6, r3
 80006dc:	e6e3      	b.n	80004a6 <__aeabi_fadd+0x52>
 80006de:	4642      	mov	r2, r8
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_fadd+0x292>
 80006e4:	e775      	b.n	80005d2 <__aeabi_fadd+0x17e>
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d000      	beq.n	80006ec <__aeabi_fadd+0x298>
 80006ea:	e77a      	b.n	80005e2 <__aeabi_fadd+0x18e>
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	03db      	lsls	r3, r3, #15
 80006f0:	2400      	movs	r4, #0
 80006f2:	469c      	mov	ip, r3
 80006f4:	22ff      	movs	r2, #255	; 0xff
 80006f6:	e6f2      	b.n	80004de <__aeabi_fadd+0x8a>
 80006f8:	0030      	movs	r0, r6
 80006fa:	4440      	add	r0, r8
 80006fc:	2501      	movs	r5, #1
 80006fe:	0143      	lsls	r3, r0, #5
 8000700:	d400      	bmi.n	8000704 <__aeabi_fadd+0x2b0>
 8000702:	e75b      	b.n	80005bc <__aeabi_fadd+0x168>
 8000704:	2502      	movs	r5, #2
 8000706:	e718      	b.n	800053a <__aeabi_fadd+0xe6>
 8000708:	4643      	mov	r3, r8
 800070a:	2501      	movs	r5, #1
 800070c:	1b98      	subs	r0, r3, r6
 800070e:	e6c5      	b.n	800049c <__aeabi_fadd+0x48>
 8000710:	2320      	movs	r3, #32
 8000712:	4644      	mov	r4, r8
 8000714:	4640      	mov	r0, r8
 8000716:	40d4      	lsrs	r4, r2
 8000718:	1a9a      	subs	r2, r3, r2
 800071a:	4090      	lsls	r0, r2
 800071c:	1e43      	subs	r3, r0, #1
 800071e:	4198      	sbcs	r0, r3
 8000720:	4320      	orrs	r0, r4
 8000722:	e7a4      	b.n	800066e <__aeabi_fadd+0x21a>
 8000724:	000d      	movs	r5, r1
 8000726:	e74d      	b.n	80005c4 <__aeabi_fadd+0x170>
 8000728:	2320      	movs	r3, #32
 800072a:	4641      	mov	r1, r8
 800072c:	4640      	mov	r0, r8
 800072e:	40d1      	lsrs	r1, r2
 8000730:	1a9a      	subs	r2, r3, r2
 8000732:	4090      	lsls	r0, r2
 8000734:	1e43      	subs	r3, r0, #1
 8000736:	4198      	sbcs	r0, r3
 8000738:	4308      	orrs	r0, r1
 800073a:	e770      	b.n	800061e <__aeabi_fadd+0x1ca>
 800073c:	4642      	mov	r2, r8
 800073e:	2a00      	cmp	r2, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fadd+0x2f0>
 8000742:	e74f      	b.n	80005e4 <__aeabi_fadd+0x190>
 8000744:	2e00      	cmp	r6, #0
 8000746:	d100      	bne.n	800074a <__aeabi_fadd+0x2f6>
 8000748:	e74d      	b.n	80005e6 <__aeabi_fadd+0x192>
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	03d2      	lsls	r2, r2, #15
 800074e:	4213      	tst	r3, r2
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x300>
 8000752:	e748      	b.n	80005e6 <__aeabi_fadd+0x192>
 8000754:	4210      	tst	r0, r2
 8000756:	d000      	beq.n	800075a <__aeabi_fadd+0x306>
 8000758:	e745      	b.n	80005e6 <__aeabi_fadd+0x192>
 800075a:	0003      	movs	r3, r0
 800075c:	e743      	b.n	80005e6 <__aeabi_fadd+0x192>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d090      	beq.n	8000684 <__aeabi_fadd+0x230>
 8000762:	000c      	movs	r4, r1
 8000764:	4684      	mov	ip, r0
 8000766:	2200      	movs	r2, #0
 8000768:	e6b9      	b.n	80004de <__aeabi_fadd+0x8a>
 800076a:	4643      	mov	r3, r8
 800076c:	000c      	movs	r4, r1
 800076e:	1af0      	subs	r0, r6, r3
 8000770:	3501      	adds	r5, #1
 8000772:	e693      	b.n	800049c <__aeabi_fadd+0x48>
 8000774:	4684      	mov	ip, r0
 8000776:	2200      	movs	r2, #0
 8000778:	e6b1      	b.n	80004de <__aeabi_fadd+0x8a>
 800077a:	2800      	cmp	r0, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_fadd+0x32c>
 800077e:	e71d      	b.n	80005bc <__aeabi_fadd+0x168>
 8000780:	2300      	movs	r3, #0
 8000782:	2400      	movs	r4, #0
 8000784:	469c      	mov	ip, r3
 8000786:	e6aa      	b.n	80004de <__aeabi_fadd+0x8a>
 8000788:	fbffffff 	.word	0xfbffffff
 800078c:	7dffffff 	.word	0x7dffffff

08000790 <__aeabi_ui2f>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	1e05      	subs	r5, r0, #0
 8000794:	d00e      	beq.n	80007b4 <__aeabi_ui2f+0x24>
 8000796:	f000 fbeb 	bl	8000f70 <__clzsi2>
 800079a:	239e      	movs	r3, #158	; 0x9e
 800079c:	0004      	movs	r4, r0
 800079e:	1a1b      	subs	r3, r3, r0
 80007a0:	2b96      	cmp	r3, #150	; 0x96
 80007a2:	dc0c      	bgt.n	80007be <__aeabi_ui2f+0x2e>
 80007a4:	2808      	cmp	r0, #8
 80007a6:	dd01      	ble.n	80007ac <__aeabi_ui2f+0x1c>
 80007a8:	3c08      	subs	r4, #8
 80007aa:	40a5      	lsls	r5, r4
 80007ac:	026d      	lsls	r5, r5, #9
 80007ae:	0a6d      	lsrs	r5, r5, #9
 80007b0:	b2d8      	uxtb	r0, r3
 80007b2:	e001      	b.n	80007b8 <__aeabi_ui2f+0x28>
 80007b4:	2000      	movs	r0, #0
 80007b6:	2500      	movs	r5, #0
 80007b8:	05c0      	lsls	r0, r0, #23
 80007ba:	4328      	orrs	r0, r5
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	2b99      	cmp	r3, #153	; 0x99
 80007c0:	dd09      	ble.n	80007d6 <__aeabi_ui2f+0x46>
 80007c2:	0002      	movs	r2, r0
 80007c4:	0029      	movs	r1, r5
 80007c6:	321b      	adds	r2, #27
 80007c8:	4091      	lsls	r1, r2
 80007ca:	1e4a      	subs	r2, r1, #1
 80007cc:	4191      	sbcs	r1, r2
 80007ce:	2205      	movs	r2, #5
 80007d0:	1a12      	subs	r2, r2, r0
 80007d2:	40d5      	lsrs	r5, r2
 80007d4:	430d      	orrs	r5, r1
 80007d6:	2c05      	cmp	r4, #5
 80007d8:	dc12      	bgt.n	8000800 <__aeabi_ui2f+0x70>
 80007da:	0029      	movs	r1, r5
 80007dc:	4e0c      	ldr	r6, [pc, #48]	; (8000810 <__aeabi_ui2f+0x80>)
 80007de:	4031      	ands	r1, r6
 80007e0:	076a      	lsls	r2, r5, #29
 80007e2:	d009      	beq.n	80007f8 <__aeabi_ui2f+0x68>
 80007e4:	200f      	movs	r0, #15
 80007e6:	4028      	ands	r0, r5
 80007e8:	2804      	cmp	r0, #4
 80007ea:	d005      	beq.n	80007f8 <__aeabi_ui2f+0x68>
 80007ec:	3104      	adds	r1, #4
 80007ee:	014a      	lsls	r2, r1, #5
 80007f0:	d502      	bpl.n	80007f8 <__aeabi_ui2f+0x68>
 80007f2:	239f      	movs	r3, #159	; 0x9f
 80007f4:	4031      	ands	r1, r6
 80007f6:	1b1b      	subs	r3, r3, r4
 80007f8:	0189      	lsls	r1, r1, #6
 80007fa:	0a4d      	lsrs	r5, r1, #9
 80007fc:	b2d8      	uxtb	r0, r3
 80007fe:	e7db      	b.n	80007b8 <__aeabi_ui2f+0x28>
 8000800:	1f62      	subs	r2, r4, #5
 8000802:	4095      	lsls	r5, r2
 8000804:	0029      	movs	r1, r5
 8000806:	4e02      	ldr	r6, [pc, #8]	; (8000810 <__aeabi_ui2f+0x80>)
 8000808:	4031      	ands	r1, r6
 800080a:	076a      	lsls	r2, r5, #29
 800080c:	d0f4      	beq.n	80007f8 <__aeabi_ui2f+0x68>
 800080e:	e7e9      	b.n	80007e4 <__aeabi_ui2f+0x54>
 8000810:	fbffffff 	.word	0xfbffffff

08000814 <__aeabi_ddiv>:
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	4657      	mov	r7, sl
 8000818:	464e      	mov	r6, r9
 800081a:	4645      	mov	r5, r8
 800081c:	46de      	mov	lr, fp
 800081e:	b5e0      	push	{r5, r6, r7, lr}
 8000820:	4681      	mov	r9, r0
 8000822:	0005      	movs	r5, r0
 8000824:	030c      	lsls	r4, r1, #12
 8000826:	0048      	lsls	r0, r1, #1
 8000828:	4692      	mov	sl, r2
 800082a:	001f      	movs	r7, r3
 800082c:	b085      	sub	sp, #20
 800082e:	0b24      	lsrs	r4, r4, #12
 8000830:	0d40      	lsrs	r0, r0, #21
 8000832:	0fce      	lsrs	r6, r1, #31
 8000834:	2800      	cmp	r0, #0
 8000836:	d100      	bne.n	800083a <__aeabi_ddiv+0x26>
 8000838:	e156      	b.n	8000ae8 <__aeabi_ddiv+0x2d4>
 800083a:	4bd4      	ldr	r3, [pc, #848]	; (8000b8c <__aeabi_ddiv+0x378>)
 800083c:	4298      	cmp	r0, r3
 800083e:	d100      	bne.n	8000842 <__aeabi_ddiv+0x2e>
 8000840:	e172      	b.n	8000b28 <__aeabi_ddiv+0x314>
 8000842:	0f6b      	lsrs	r3, r5, #29
 8000844:	00e4      	lsls	r4, r4, #3
 8000846:	431c      	orrs	r4, r3
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	041b      	lsls	r3, r3, #16
 800084c:	4323      	orrs	r3, r4
 800084e:	4698      	mov	r8, r3
 8000850:	4bcf      	ldr	r3, [pc, #828]	; (8000b90 <__aeabi_ddiv+0x37c>)
 8000852:	00ed      	lsls	r5, r5, #3
 8000854:	469b      	mov	fp, r3
 8000856:	2300      	movs	r3, #0
 8000858:	4699      	mov	r9, r3
 800085a:	4483      	add	fp, r0
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	033c      	lsls	r4, r7, #12
 8000860:	007b      	lsls	r3, r7, #1
 8000862:	4650      	mov	r0, sl
 8000864:	0b24      	lsrs	r4, r4, #12
 8000866:	0d5b      	lsrs	r3, r3, #21
 8000868:	0fff      	lsrs	r7, r7, #31
 800086a:	2b00      	cmp	r3, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_ddiv+0x5c>
 800086e:	e11f      	b.n	8000ab0 <__aeabi_ddiv+0x29c>
 8000870:	4ac6      	ldr	r2, [pc, #792]	; (8000b8c <__aeabi_ddiv+0x378>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_ddiv+0x64>
 8000876:	e162      	b.n	8000b3e <__aeabi_ddiv+0x32a>
 8000878:	49c5      	ldr	r1, [pc, #788]	; (8000b90 <__aeabi_ddiv+0x37c>)
 800087a:	0f42      	lsrs	r2, r0, #29
 800087c:	468c      	mov	ip, r1
 800087e:	00e4      	lsls	r4, r4, #3
 8000880:	4659      	mov	r1, fp
 8000882:	4314      	orrs	r4, r2
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	4463      	add	r3, ip
 8000888:	0412      	lsls	r2, r2, #16
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	4314      	orrs	r4, r2
 800088e:	469b      	mov	fp, r3
 8000890:	00c2      	lsls	r2, r0, #3
 8000892:	2000      	movs	r0, #0
 8000894:	0033      	movs	r3, r6
 8000896:	407b      	eors	r3, r7
 8000898:	469a      	mov	sl, r3
 800089a:	464b      	mov	r3, r9
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d827      	bhi.n	80008f0 <__aeabi_ddiv+0xdc>
 80008a0:	49bc      	ldr	r1, [pc, #752]	; (8000b94 <__aeabi_ddiv+0x380>)
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	58cb      	ldr	r3, [r1, r3]
 80008a6:	469f      	mov	pc, r3
 80008a8:	46b2      	mov	sl, r6
 80008aa:	9b00      	ldr	r3, [sp, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d016      	beq.n	80008de <__aeabi_ddiv+0xca>
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d100      	bne.n	80008b6 <__aeabi_ddiv+0xa2>
 80008b4:	e28e      	b.n	8000dd4 <__aeabi_ddiv+0x5c0>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d000      	beq.n	80008bc <__aeabi_ddiv+0xa8>
 80008ba:	e0d9      	b.n	8000a70 <__aeabi_ddiv+0x25c>
 80008bc:	2300      	movs	r3, #0
 80008be:	2400      	movs	r4, #0
 80008c0:	2500      	movs	r5, #0
 80008c2:	4652      	mov	r2, sl
 80008c4:	051b      	lsls	r3, r3, #20
 80008c6:	4323      	orrs	r3, r4
 80008c8:	07d2      	lsls	r2, r2, #31
 80008ca:	4313      	orrs	r3, r2
 80008cc:	0028      	movs	r0, r5
 80008ce:	0019      	movs	r1, r3
 80008d0:	b005      	add	sp, #20
 80008d2:	bcf0      	pop	{r4, r5, r6, r7}
 80008d4:	46bb      	mov	fp, r7
 80008d6:	46b2      	mov	sl, r6
 80008d8:	46a9      	mov	r9, r5
 80008da:	46a0      	mov	r8, r4
 80008dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008de:	2400      	movs	r4, #0
 80008e0:	2500      	movs	r5, #0
 80008e2:	4baa      	ldr	r3, [pc, #680]	; (8000b8c <__aeabi_ddiv+0x378>)
 80008e4:	e7ed      	b.n	80008c2 <__aeabi_ddiv+0xae>
 80008e6:	46ba      	mov	sl, r7
 80008e8:	46a0      	mov	r8, r4
 80008ea:	0015      	movs	r5, r2
 80008ec:	9000      	str	r0, [sp, #0]
 80008ee:	e7dc      	b.n	80008aa <__aeabi_ddiv+0x96>
 80008f0:	4544      	cmp	r4, r8
 80008f2:	d200      	bcs.n	80008f6 <__aeabi_ddiv+0xe2>
 80008f4:	e1c7      	b.n	8000c86 <__aeabi_ddiv+0x472>
 80008f6:	d100      	bne.n	80008fa <__aeabi_ddiv+0xe6>
 80008f8:	e1c2      	b.n	8000c80 <__aeabi_ddiv+0x46c>
 80008fa:	2301      	movs	r3, #1
 80008fc:	425b      	negs	r3, r3
 80008fe:	469c      	mov	ip, r3
 8000900:	002e      	movs	r6, r5
 8000902:	4640      	mov	r0, r8
 8000904:	2500      	movs	r5, #0
 8000906:	44e3      	add	fp, ip
 8000908:	0223      	lsls	r3, r4, #8
 800090a:	0e14      	lsrs	r4, r2, #24
 800090c:	431c      	orrs	r4, r3
 800090e:	0c1b      	lsrs	r3, r3, #16
 8000910:	4699      	mov	r9, r3
 8000912:	0423      	lsls	r3, r4, #16
 8000914:	0c1f      	lsrs	r7, r3, #16
 8000916:	0212      	lsls	r2, r2, #8
 8000918:	4649      	mov	r1, r9
 800091a:	9200      	str	r2, [sp, #0]
 800091c:	9701      	str	r7, [sp, #4]
 800091e:	f7ff fc79 	bl	8000214 <__aeabi_uidivmod>
 8000922:	0002      	movs	r2, r0
 8000924:	437a      	muls	r2, r7
 8000926:	040b      	lsls	r3, r1, #16
 8000928:	0c31      	lsrs	r1, r6, #16
 800092a:	4680      	mov	r8, r0
 800092c:	4319      	orrs	r1, r3
 800092e:	428a      	cmp	r2, r1
 8000930:	d907      	bls.n	8000942 <__aeabi_ddiv+0x12e>
 8000932:	2301      	movs	r3, #1
 8000934:	425b      	negs	r3, r3
 8000936:	469c      	mov	ip, r3
 8000938:	1909      	adds	r1, r1, r4
 800093a:	44e0      	add	r8, ip
 800093c:	428c      	cmp	r4, r1
 800093e:	d800      	bhi.n	8000942 <__aeabi_ddiv+0x12e>
 8000940:	e207      	b.n	8000d52 <__aeabi_ddiv+0x53e>
 8000942:	1a88      	subs	r0, r1, r2
 8000944:	4649      	mov	r1, r9
 8000946:	f7ff fc65 	bl	8000214 <__aeabi_uidivmod>
 800094a:	0409      	lsls	r1, r1, #16
 800094c:	468c      	mov	ip, r1
 800094e:	0431      	lsls	r1, r6, #16
 8000950:	4666      	mov	r6, ip
 8000952:	9a01      	ldr	r2, [sp, #4]
 8000954:	0c09      	lsrs	r1, r1, #16
 8000956:	4342      	muls	r2, r0
 8000958:	0003      	movs	r3, r0
 800095a:	4331      	orrs	r1, r6
 800095c:	428a      	cmp	r2, r1
 800095e:	d904      	bls.n	800096a <__aeabi_ddiv+0x156>
 8000960:	1909      	adds	r1, r1, r4
 8000962:	3b01      	subs	r3, #1
 8000964:	428c      	cmp	r4, r1
 8000966:	d800      	bhi.n	800096a <__aeabi_ddiv+0x156>
 8000968:	e1ed      	b.n	8000d46 <__aeabi_ddiv+0x532>
 800096a:	1a88      	subs	r0, r1, r2
 800096c:	4642      	mov	r2, r8
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	431a      	orrs	r2, r3
 8000972:	4690      	mov	r8, r2
 8000974:	4641      	mov	r1, r8
 8000976:	9b00      	ldr	r3, [sp, #0]
 8000978:	040e      	lsls	r6, r1, #16
 800097a:	0c1b      	lsrs	r3, r3, #16
 800097c:	001f      	movs	r7, r3
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	9b00      	ldr	r3, [sp, #0]
 8000982:	0c36      	lsrs	r6, r6, #16
 8000984:	041b      	lsls	r3, r3, #16
 8000986:	0c19      	lsrs	r1, r3, #16
 8000988:	000b      	movs	r3, r1
 800098a:	4373      	muls	r3, r6
 800098c:	0c12      	lsrs	r2, r2, #16
 800098e:	437e      	muls	r6, r7
 8000990:	9103      	str	r1, [sp, #12]
 8000992:	4351      	muls	r1, r2
 8000994:	437a      	muls	r2, r7
 8000996:	0c1f      	lsrs	r7, r3, #16
 8000998:	46bc      	mov	ip, r7
 800099a:	1876      	adds	r6, r6, r1
 800099c:	4466      	add	r6, ip
 800099e:	42b1      	cmp	r1, r6
 80009a0:	d903      	bls.n	80009aa <__aeabi_ddiv+0x196>
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	0249      	lsls	r1, r1, #9
 80009a6:	468c      	mov	ip, r1
 80009a8:	4462      	add	r2, ip
 80009aa:	0c31      	lsrs	r1, r6, #16
 80009ac:	188a      	adds	r2, r1, r2
 80009ae:	0431      	lsls	r1, r6, #16
 80009b0:	041e      	lsls	r6, r3, #16
 80009b2:	0c36      	lsrs	r6, r6, #16
 80009b4:	198e      	adds	r6, r1, r6
 80009b6:	4290      	cmp	r0, r2
 80009b8:	d302      	bcc.n	80009c0 <__aeabi_ddiv+0x1ac>
 80009ba:	d112      	bne.n	80009e2 <__aeabi_ddiv+0x1ce>
 80009bc:	42b5      	cmp	r5, r6
 80009be:	d210      	bcs.n	80009e2 <__aeabi_ddiv+0x1ce>
 80009c0:	4643      	mov	r3, r8
 80009c2:	1e59      	subs	r1, r3, #1
 80009c4:	9b00      	ldr	r3, [sp, #0]
 80009c6:	469c      	mov	ip, r3
 80009c8:	4465      	add	r5, ip
 80009ca:	001f      	movs	r7, r3
 80009cc:	429d      	cmp	r5, r3
 80009ce:	419b      	sbcs	r3, r3
 80009d0:	425b      	negs	r3, r3
 80009d2:	191b      	adds	r3, r3, r4
 80009d4:	18c0      	adds	r0, r0, r3
 80009d6:	4284      	cmp	r4, r0
 80009d8:	d200      	bcs.n	80009dc <__aeabi_ddiv+0x1c8>
 80009da:	e1a0      	b.n	8000d1e <__aeabi_ddiv+0x50a>
 80009dc:	d100      	bne.n	80009e0 <__aeabi_ddiv+0x1cc>
 80009de:	e19b      	b.n	8000d18 <__aeabi_ddiv+0x504>
 80009e0:	4688      	mov	r8, r1
 80009e2:	1bae      	subs	r6, r5, r6
 80009e4:	42b5      	cmp	r5, r6
 80009e6:	41ad      	sbcs	r5, r5
 80009e8:	1a80      	subs	r0, r0, r2
 80009ea:	426d      	negs	r5, r5
 80009ec:	1b40      	subs	r0, r0, r5
 80009ee:	4284      	cmp	r4, r0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_ddiv+0x1e0>
 80009f2:	e1d5      	b.n	8000da0 <__aeabi_ddiv+0x58c>
 80009f4:	4649      	mov	r1, r9
 80009f6:	f7ff fc0d 	bl	8000214 <__aeabi_uidivmod>
 80009fa:	9a01      	ldr	r2, [sp, #4]
 80009fc:	040b      	lsls	r3, r1, #16
 80009fe:	4342      	muls	r2, r0
 8000a00:	0c31      	lsrs	r1, r6, #16
 8000a02:	0005      	movs	r5, r0
 8000a04:	4319      	orrs	r1, r3
 8000a06:	428a      	cmp	r2, r1
 8000a08:	d900      	bls.n	8000a0c <__aeabi_ddiv+0x1f8>
 8000a0a:	e16c      	b.n	8000ce6 <__aeabi_ddiv+0x4d2>
 8000a0c:	1a88      	subs	r0, r1, r2
 8000a0e:	4649      	mov	r1, r9
 8000a10:	f7ff fc00 	bl	8000214 <__aeabi_uidivmod>
 8000a14:	9a01      	ldr	r2, [sp, #4]
 8000a16:	0436      	lsls	r6, r6, #16
 8000a18:	4342      	muls	r2, r0
 8000a1a:	0409      	lsls	r1, r1, #16
 8000a1c:	0c36      	lsrs	r6, r6, #16
 8000a1e:	0003      	movs	r3, r0
 8000a20:	430e      	orrs	r6, r1
 8000a22:	42b2      	cmp	r2, r6
 8000a24:	d900      	bls.n	8000a28 <__aeabi_ddiv+0x214>
 8000a26:	e153      	b.n	8000cd0 <__aeabi_ddiv+0x4bc>
 8000a28:	9803      	ldr	r0, [sp, #12]
 8000a2a:	1ab6      	subs	r6, r6, r2
 8000a2c:	0002      	movs	r2, r0
 8000a2e:	042d      	lsls	r5, r5, #16
 8000a30:	431d      	orrs	r5, r3
 8000a32:	9f02      	ldr	r7, [sp, #8]
 8000a34:	042b      	lsls	r3, r5, #16
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	435a      	muls	r2, r3
 8000a3a:	437b      	muls	r3, r7
 8000a3c:	469c      	mov	ip, r3
 8000a3e:	0c29      	lsrs	r1, r5, #16
 8000a40:	4348      	muls	r0, r1
 8000a42:	0c13      	lsrs	r3, r2, #16
 8000a44:	4484      	add	ip, r0
 8000a46:	4463      	add	r3, ip
 8000a48:	4379      	muls	r1, r7
 8000a4a:	4298      	cmp	r0, r3
 8000a4c:	d903      	bls.n	8000a56 <__aeabi_ddiv+0x242>
 8000a4e:	2080      	movs	r0, #128	; 0x80
 8000a50:	0240      	lsls	r0, r0, #9
 8000a52:	4684      	mov	ip, r0
 8000a54:	4461      	add	r1, ip
 8000a56:	0c18      	lsrs	r0, r3, #16
 8000a58:	0412      	lsls	r2, r2, #16
 8000a5a:	041b      	lsls	r3, r3, #16
 8000a5c:	0c12      	lsrs	r2, r2, #16
 8000a5e:	1841      	adds	r1, r0, r1
 8000a60:	189b      	adds	r3, r3, r2
 8000a62:	428e      	cmp	r6, r1
 8000a64:	d200      	bcs.n	8000a68 <__aeabi_ddiv+0x254>
 8000a66:	e0ff      	b.n	8000c68 <__aeabi_ddiv+0x454>
 8000a68:	d100      	bne.n	8000a6c <__aeabi_ddiv+0x258>
 8000a6a:	e0fa      	b.n	8000c62 <__aeabi_ddiv+0x44e>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	431d      	orrs	r5, r3
 8000a70:	4a49      	ldr	r2, [pc, #292]	; (8000b98 <__aeabi_ddiv+0x384>)
 8000a72:	445a      	add	r2, fp
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	dc00      	bgt.n	8000a7a <__aeabi_ddiv+0x266>
 8000a78:	e0aa      	b.n	8000bd0 <__aeabi_ddiv+0x3bc>
 8000a7a:	076b      	lsls	r3, r5, #29
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_ddiv+0x26c>
 8000a7e:	e13d      	b.n	8000cfc <__aeabi_ddiv+0x4e8>
 8000a80:	08ed      	lsrs	r5, r5, #3
 8000a82:	4643      	mov	r3, r8
 8000a84:	01db      	lsls	r3, r3, #7
 8000a86:	d506      	bpl.n	8000a96 <__aeabi_ddiv+0x282>
 8000a88:	4642      	mov	r2, r8
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <__aeabi_ddiv+0x388>)
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	4690      	mov	r8, r2
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	00d2      	lsls	r2, r2, #3
 8000a94:	445a      	add	r2, fp
 8000a96:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <__aeabi_ddiv+0x38c>)
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dd00      	ble.n	8000a9e <__aeabi_ddiv+0x28a>
 8000a9c:	e71f      	b.n	80008de <__aeabi_ddiv+0xca>
 8000a9e:	4643      	mov	r3, r8
 8000aa0:	075b      	lsls	r3, r3, #29
 8000aa2:	431d      	orrs	r5, r3
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	0552      	lsls	r2, r2, #21
 8000aa8:	025c      	lsls	r4, r3, #9
 8000aaa:	0b24      	lsrs	r4, r4, #12
 8000aac:	0d53      	lsrs	r3, r2, #21
 8000aae:	e708      	b.n	80008c2 <__aeabi_ddiv+0xae>
 8000ab0:	4652      	mov	r2, sl
 8000ab2:	4322      	orrs	r2, r4
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_ddiv+0x2a4>
 8000ab6:	e07b      	b.n	8000bb0 <__aeabi_ddiv+0x39c>
 8000ab8:	2c00      	cmp	r4, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_ddiv+0x2aa>
 8000abc:	e0fa      	b.n	8000cb4 <__aeabi_ddiv+0x4a0>
 8000abe:	0020      	movs	r0, r4
 8000ac0:	f000 fa56 	bl	8000f70 <__clzsi2>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	3a0b      	subs	r2, #11
 8000ac8:	231d      	movs	r3, #29
 8000aca:	0001      	movs	r1, r0
 8000acc:	1a9b      	subs	r3, r3, r2
 8000ace:	4652      	mov	r2, sl
 8000ad0:	3908      	subs	r1, #8
 8000ad2:	40da      	lsrs	r2, r3
 8000ad4:	408c      	lsls	r4, r1
 8000ad6:	4314      	orrs	r4, r2
 8000ad8:	4652      	mov	r2, sl
 8000ada:	408a      	lsls	r2, r1
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <__aeabi_ddiv+0x390>)
 8000ade:	4458      	add	r0, fp
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	4483      	add	fp, r0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e6d5      	b.n	8000894 <__aeabi_ddiv+0x80>
 8000ae8:	464b      	mov	r3, r9
 8000aea:	4323      	orrs	r3, r4
 8000aec:	4698      	mov	r8, r3
 8000aee:	d044      	beq.n	8000b7a <__aeabi_ddiv+0x366>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_ddiv+0x2e2>
 8000af4:	e0ce      	b.n	8000c94 <__aeabi_ddiv+0x480>
 8000af6:	0020      	movs	r0, r4
 8000af8:	f000 fa3a 	bl	8000f70 <__clzsi2>
 8000afc:	0001      	movs	r1, r0
 8000afe:	0002      	movs	r2, r0
 8000b00:	390b      	subs	r1, #11
 8000b02:	231d      	movs	r3, #29
 8000b04:	1a5b      	subs	r3, r3, r1
 8000b06:	4649      	mov	r1, r9
 8000b08:	0010      	movs	r0, r2
 8000b0a:	40d9      	lsrs	r1, r3
 8000b0c:	3808      	subs	r0, #8
 8000b0e:	4084      	lsls	r4, r0
 8000b10:	000b      	movs	r3, r1
 8000b12:	464d      	mov	r5, r9
 8000b14:	4323      	orrs	r3, r4
 8000b16:	4698      	mov	r8, r3
 8000b18:	4085      	lsls	r5, r0
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <__aeabi_ddiv+0x394>)
 8000b1c:	1a83      	subs	r3, r0, r2
 8000b1e:	469b      	mov	fp, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	4699      	mov	r9, r3
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	e69a      	b.n	800085e <__aeabi_ddiv+0x4a>
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4323      	orrs	r3, r4
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	d11d      	bne.n	8000b6c <__aeabi_ddiv+0x358>
 8000b30:	2308      	movs	r3, #8
 8000b32:	4699      	mov	r9, r3
 8000b34:	3b06      	subs	r3, #6
 8000b36:	2500      	movs	r5, #0
 8000b38:	4683      	mov	fp, r0
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	e68f      	b.n	800085e <__aeabi_ddiv+0x4a>
 8000b3e:	4652      	mov	r2, sl
 8000b40:	4322      	orrs	r2, r4
 8000b42:	d109      	bne.n	8000b58 <__aeabi_ddiv+0x344>
 8000b44:	2302      	movs	r3, #2
 8000b46:	4649      	mov	r1, r9
 8000b48:	4319      	orrs	r1, r3
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <__aeabi_ddiv+0x398>)
 8000b4c:	4689      	mov	r9, r1
 8000b4e:	469c      	mov	ip, r3
 8000b50:	2400      	movs	r4, #0
 8000b52:	2002      	movs	r0, #2
 8000b54:	44e3      	add	fp, ip
 8000b56:	e69d      	b.n	8000894 <__aeabi_ddiv+0x80>
 8000b58:	2303      	movs	r3, #3
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <__aeabi_ddiv+0x398>)
 8000b60:	4691      	mov	r9, r2
 8000b62:	469c      	mov	ip, r3
 8000b64:	4652      	mov	r2, sl
 8000b66:	2003      	movs	r0, #3
 8000b68:	44e3      	add	fp, ip
 8000b6a:	e693      	b.n	8000894 <__aeabi_ddiv+0x80>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	4699      	mov	r9, r3
 8000b70:	3b09      	subs	r3, #9
 8000b72:	46a0      	mov	r8, r4
 8000b74:	4683      	mov	fp, r0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	e671      	b.n	800085e <__aeabi_ddiv+0x4a>
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	469b      	mov	fp, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	2500      	movs	r5, #0
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	e669      	b.n	800085e <__aeabi_ddiv+0x4a>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	000007ff 	.word	0x000007ff
 8000b90:	fffffc01 	.word	0xfffffc01
 8000b94:	080058a8 	.word	0x080058a8
 8000b98:	000003ff 	.word	0x000003ff
 8000b9c:	feffffff 	.word	0xfeffffff
 8000ba0:	000007fe 	.word	0x000007fe
 8000ba4:	000003f3 	.word	0x000003f3
 8000ba8:	fffffc0d 	.word	0xfffffc0d
 8000bac:	fffff801 	.word	0xfffff801
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4319      	orrs	r1, r3
 8000bb6:	4689      	mov	r9, r1
 8000bb8:	2400      	movs	r4, #0
 8000bba:	2001      	movs	r0, #1
 8000bbc:	e66a      	b.n	8000894 <__aeabi_ddiv+0x80>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2480      	movs	r4, #128	; 0x80
 8000bc2:	469a      	mov	sl, r3
 8000bc4:	2500      	movs	r5, #0
 8000bc6:	4b8a      	ldr	r3, [pc, #552]	; (8000df0 <__aeabi_ddiv+0x5dc>)
 8000bc8:	0324      	lsls	r4, r4, #12
 8000bca:	e67a      	b.n	80008c2 <__aeabi_ddiv+0xae>
 8000bcc:	2501      	movs	r5, #1
 8000bce:	426d      	negs	r5, r5
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	2b38      	cmp	r3, #56	; 0x38
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_ddiv+0x3c6>
 8000bd8:	e670      	b.n	80008bc <__aeabi_ddiv+0xa8>
 8000bda:	2b1f      	cmp	r3, #31
 8000bdc:	dc00      	bgt.n	8000be0 <__aeabi_ddiv+0x3cc>
 8000bde:	e0bf      	b.n	8000d60 <__aeabi_ddiv+0x54c>
 8000be0:	211f      	movs	r1, #31
 8000be2:	4249      	negs	r1, r1
 8000be4:	1a8a      	subs	r2, r1, r2
 8000be6:	4641      	mov	r1, r8
 8000be8:	40d1      	lsrs	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	2b20      	cmp	r3, #32
 8000bee:	d004      	beq.n	8000bfa <__aeabi_ddiv+0x3e6>
 8000bf0:	4641      	mov	r1, r8
 8000bf2:	4b80      	ldr	r3, [pc, #512]	; (8000df4 <__aeabi_ddiv+0x5e0>)
 8000bf4:	445b      	add	r3, fp
 8000bf6:	4099      	lsls	r1, r3
 8000bf8:	430d      	orrs	r5, r1
 8000bfa:	1e6b      	subs	r3, r5, #1
 8000bfc:	419d      	sbcs	r5, r3
 8000bfe:	2307      	movs	r3, #7
 8000c00:	432a      	orrs	r2, r5
 8000c02:	001d      	movs	r5, r3
 8000c04:	2400      	movs	r4, #0
 8000c06:	4015      	ands	r5, r2
 8000c08:	4213      	tst	r3, r2
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_ddiv+0x3fa>
 8000c0c:	e0d4      	b.n	8000db8 <__aeabi_ddiv+0x5a4>
 8000c0e:	210f      	movs	r1, #15
 8000c10:	2300      	movs	r3, #0
 8000c12:	4011      	ands	r1, r2
 8000c14:	2904      	cmp	r1, #4
 8000c16:	d100      	bne.n	8000c1a <__aeabi_ddiv+0x406>
 8000c18:	e0cb      	b.n	8000db2 <__aeabi_ddiv+0x59e>
 8000c1a:	1d11      	adds	r1, r2, #4
 8000c1c:	4291      	cmp	r1, r2
 8000c1e:	4192      	sbcs	r2, r2
 8000c20:	4252      	negs	r2, r2
 8000c22:	189b      	adds	r3, r3, r2
 8000c24:	000a      	movs	r2, r1
 8000c26:	0219      	lsls	r1, r3, #8
 8000c28:	d400      	bmi.n	8000c2c <__aeabi_ddiv+0x418>
 8000c2a:	e0c2      	b.n	8000db2 <__aeabi_ddiv+0x59e>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	2400      	movs	r4, #0
 8000c30:	2500      	movs	r5, #0
 8000c32:	e646      	b.n	80008c2 <__aeabi_ddiv+0xae>
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	4641      	mov	r1, r8
 8000c38:	031b      	lsls	r3, r3, #12
 8000c3a:	4219      	tst	r1, r3
 8000c3c:	d008      	beq.n	8000c50 <__aeabi_ddiv+0x43c>
 8000c3e:	421c      	tst	r4, r3
 8000c40:	d106      	bne.n	8000c50 <__aeabi_ddiv+0x43c>
 8000c42:	431c      	orrs	r4, r3
 8000c44:	0324      	lsls	r4, r4, #12
 8000c46:	46ba      	mov	sl, r7
 8000c48:	0015      	movs	r5, r2
 8000c4a:	4b69      	ldr	r3, [pc, #420]	; (8000df0 <__aeabi_ddiv+0x5dc>)
 8000c4c:	0b24      	lsrs	r4, r4, #12
 8000c4e:	e638      	b.n	80008c2 <__aeabi_ddiv+0xae>
 8000c50:	2480      	movs	r4, #128	; 0x80
 8000c52:	4643      	mov	r3, r8
 8000c54:	0324      	lsls	r4, r4, #12
 8000c56:	431c      	orrs	r4, r3
 8000c58:	0324      	lsls	r4, r4, #12
 8000c5a:	46b2      	mov	sl, r6
 8000c5c:	4b64      	ldr	r3, [pc, #400]	; (8000df0 <__aeabi_ddiv+0x5dc>)
 8000c5e:	0b24      	lsrs	r4, r4, #12
 8000c60:	e62f      	b.n	80008c2 <__aeabi_ddiv+0xae>
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_ddiv+0x454>
 8000c66:	e703      	b.n	8000a70 <__aeabi_ddiv+0x25c>
 8000c68:	19a6      	adds	r6, r4, r6
 8000c6a:	1e68      	subs	r0, r5, #1
 8000c6c:	42a6      	cmp	r6, r4
 8000c6e:	d200      	bcs.n	8000c72 <__aeabi_ddiv+0x45e>
 8000c70:	e08d      	b.n	8000d8e <__aeabi_ddiv+0x57a>
 8000c72:	428e      	cmp	r6, r1
 8000c74:	d200      	bcs.n	8000c78 <__aeabi_ddiv+0x464>
 8000c76:	e0a3      	b.n	8000dc0 <__aeabi_ddiv+0x5ac>
 8000c78:	d100      	bne.n	8000c7c <__aeabi_ddiv+0x468>
 8000c7a:	e0b3      	b.n	8000de4 <__aeabi_ddiv+0x5d0>
 8000c7c:	0005      	movs	r5, r0
 8000c7e:	e6f5      	b.n	8000a6c <__aeabi_ddiv+0x258>
 8000c80:	42aa      	cmp	r2, r5
 8000c82:	d900      	bls.n	8000c86 <__aeabi_ddiv+0x472>
 8000c84:	e639      	b.n	80008fa <__aeabi_ddiv+0xe6>
 8000c86:	4643      	mov	r3, r8
 8000c88:	07de      	lsls	r6, r3, #31
 8000c8a:	0858      	lsrs	r0, r3, #1
 8000c8c:	086b      	lsrs	r3, r5, #1
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	07ed      	lsls	r5, r5, #31
 8000c92:	e639      	b.n	8000908 <__aeabi_ddiv+0xf4>
 8000c94:	4648      	mov	r0, r9
 8000c96:	f000 f96b 	bl	8000f70 <__clzsi2>
 8000c9a:	0001      	movs	r1, r0
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	3115      	adds	r1, #21
 8000ca0:	3220      	adds	r2, #32
 8000ca2:	291c      	cmp	r1, #28
 8000ca4:	dc00      	bgt.n	8000ca8 <__aeabi_ddiv+0x494>
 8000ca6:	e72c      	b.n	8000b02 <__aeabi_ddiv+0x2ee>
 8000ca8:	464b      	mov	r3, r9
 8000caa:	3808      	subs	r0, #8
 8000cac:	4083      	lsls	r3, r0
 8000cae:	2500      	movs	r5, #0
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	e732      	b.n	8000b1a <__aeabi_ddiv+0x306>
 8000cb4:	f000 f95c 	bl	8000f70 <__clzsi2>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	001a      	movs	r2, r3
 8000cbc:	3215      	adds	r2, #21
 8000cbe:	3020      	adds	r0, #32
 8000cc0:	2a1c      	cmp	r2, #28
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_ddiv+0x4b2>
 8000cc4:	e700      	b.n	8000ac8 <__aeabi_ddiv+0x2b4>
 8000cc6:	4654      	mov	r4, sl
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	e705      	b.n	8000adc <__aeabi_ddiv+0x2c8>
 8000cd0:	1936      	adds	r6, r6, r4
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	42b4      	cmp	r4, r6
 8000cd6:	d900      	bls.n	8000cda <__aeabi_ddiv+0x4c6>
 8000cd8:	e6a6      	b.n	8000a28 <__aeabi_ddiv+0x214>
 8000cda:	42b2      	cmp	r2, r6
 8000cdc:	d800      	bhi.n	8000ce0 <__aeabi_ddiv+0x4cc>
 8000cde:	e6a3      	b.n	8000a28 <__aeabi_ddiv+0x214>
 8000ce0:	1e83      	subs	r3, r0, #2
 8000ce2:	1936      	adds	r6, r6, r4
 8000ce4:	e6a0      	b.n	8000a28 <__aeabi_ddiv+0x214>
 8000ce6:	1909      	adds	r1, r1, r4
 8000ce8:	3d01      	subs	r5, #1
 8000cea:	428c      	cmp	r4, r1
 8000cec:	d900      	bls.n	8000cf0 <__aeabi_ddiv+0x4dc>
 8000cee:	e68d      	b.n	8000a0c <__aeabi_ddiv+0x1f8>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	d800      	bhi.n	8000cf6 <__aeabi_ddiv+0x4e2>
 8000cf4:	e68a      	b.n	8000a0c <__aeabi_ddiv+0x1f8>
 8000cf6:	1e85      	subs	r5, r0, #2
 8000cf8:	1909      	adds	r1, r1, r4
 8000cfa:	e687      	b.n	8000a0c <__aeabi_ddiv+0x1f8>
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	402b      	ands	r3, r5
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d100      	bne.n	8000d06 <__aeabi_ddiv+0x4f2>
 8000d04:	e6bc      	b.n	8000a80 <__aeabi_ddiv+0x26c>
 8000d06:	2305      	movs	r3, #5
 8000d08:	425b      	negs	r3, r3
 8000d0a:	42ab      	cmp	r3, r5
 8000d0c:	419b      	sbcs	r3, r3
 8000d0e:	3504      	adds	r5, #4
 8000d10:	425b      	negs	r3, r3
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4498      	add	r8, r3
 8000d16:	e6b4      	b.n	8000a82 <__aeabi_ddiv+0x26e>
 8000d18:	42af      	cmp	r7, r5
 8000d1a:	d900      	bls.n	8000d1e <__aeabi_ddiv+0x50a>
 8000d1c:	e660      	b.n	80009e0 <__aeabi_ddiv+0x1cc>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	d804      	bhi.n	8000d2c <__aeabi_ddiv+0x518>
 8000d22:	d000      	beq.n	8000d26 <__aeabi_ddiv+0x512>
 8000d24:	e65c      	b.n	80009e0 <__aeabi_ddiv+0x1cc>
 8000d26:	42ae      	cmp	r6, r5
 8000d28:	d800      	bhi.n	8000d2c <__aeabi_ddiv+0x518>
 8000d2a:	e659      	b.n	80009e0 <__aeabi_ddiv+0x1cc>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	425b      	negs	r3, r3
 8000d30:	469c      	mov	ip, r3
 8000d32:	9b00      	ldr	r3, [sp, #0]
 8000d34:	44e0      	add	r8, ip
 8000d36:	469c      	mov	ip, r3
 8000d38:	4465      	add	r5, ip
 8000d3a:	429d      	cmp	r5, r3
 8000d3c:	419b      	sbcs	r3, r3
 8000d3e:	425b      	negs	r3, r3
 8000d40:	191b      	adds	r3, r3, r4
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	e64d      	b.n	80009e2 <__aeabi_ddiv+0x1ce>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	d800      	bhi.n	8000d4c <__aeabi_ddiv+0x538>
 8000d4a:	e60e      	b.n	800096a <__aeabi_ddiv+0x156>
 8000d4c:	1e83      	subs	r3, r0, #2
 8000d4e:	1909      	adds	r1, r1, r4
 8000d50:	e60b      	b.n	800096a <__aeabi_ddiv+0x156>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d800      	bhi.n	8000d58 <__aeabi_ddiv+0x544>
 8000d56:	e5f4      	b.n	8000942 <__aeabi_ddiv+0x12e>
 8000d58:	1e83      	subs	r3, r0, #2
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	1909      	adds	r1, r1, r4
 8000d5e:	e5f0      	b.n	8000942 <__aeabi_ddiv+0x12e>
 8000d60:	4925      	ldr	r1, [pc, #148]	; (8000df8 <__aeabi_ddiv+0x5e4>)
 8000d62:	0028      	movs	r0, r5
 8000d64:	4459      	add	r1, fp
 8000d66:	408d      	lsls	r5, r1
 8000d68:	4642      	mov	r2, r8
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	1e69      	subs	r1, r5, #1
 8000d6e:	418d      	sbcs	r5, r1
 8000d70:	4641      	mov	r1, r8
 8000d72:	40d8      	lsrs	r0, r3
 8000d74:	40d9      	lsrs	r1, r3
 8000d76:	4302      	orrs	r2, r0
 8000d78:	432a      	orrs	r2, r5
 8000d7a:	000b      	movs	r3, r1
 8000d7c:	0751      	lsls	r1, r2, #29
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x56e>
 8000d80:	e751      	b.n	8000c26 <__aeabi_ddiv+0x412>
 8000d82:	210f      	movs	r1, #15
 8000d84:	4011      	ands	r1, r2
 8000d86:	2904      	cmp	r1, #4
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x578>
 8000d8a:	e746      	b.n	8000c1a <__aeabi_ddiv+0x406>
 8000d8c:	e74b      	b.n	8000c26 <__aeabi_ddiv+0x412>
 8000d8e:	0005      	movs	r5, r0
 8000d90:	428e      	cmp	r6, r1
 8000d92:	d000      	beq.n	8000d96 <__aeabi_ddiv+0x582>
 8000d94:	e66a      	b.n	8000a6c <__aeabi_ddiv+0x258>
 8000d96:	9a00      	ldr	r2, [sp, #0]
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_ddiv+0x58a>
 8000d9c:	e666      	b.n	8000a6c <__aeabi_ddiv+0x258>
 8000d9e:	e667      	b.n	8000a70 <__aeabi_ddiv+0x25c>
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <__aeabi_ddiv+0x5e8>)
 8000da2:	445a      	add	r2, fp
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	dc00      	bgt.n	8000daa <__aeabi_ddiv+0x596>
 8000da8:	e710      	b.n	8000bcc <__aeabi_ddiv+0x3b8>
 8000daa:	2301      	movs	r3, #1
 8000dac:	2500      	movs	r5, #0
 8000dae:	4498      	add	r8, r3
 8000db0:	e667      	b.n	8000a82 <__aeabi_ddiv+0x26e>
 8000db2:	075d      	lsls	r5, r3, #29
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	0b1c      	lsrs	r4, r3, #12
 8000db8:	08d2      	lsrs	r2, r2, #3
 8000dba:	2300      	movs	r3, #0
 8000dbc:	4315      	orrs	r5, r2
 8000dbe:	e580      	b.n	80008c2 <__aeabi_ddiv+0xae>
 8000dc0:	9800      	ldr	r0, [sp, #0]
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	0042      	lsls	r2, r0, #1
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	41bf      	sbcs	r7, r7
 8000dca:	427f      	negs	r7, r7
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	1936      	adds	r6, r6, r4
 8000dd0:	9200      	str	r2, [sp, #0]
 8000dd2:	e7dd      	b.n	8000d90 <__aeabi_ddiv+0x57c>
 8000dd4:	2480      	movs	r4, #128	; 0x80
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	0324      	lsls	r4, r4, #12
 8000dda:	431c      	orrs	r4, r3
 8000ddc:	0324      	lsls	r4, r4, #12
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__aeabi_ddiv+0x5dc>)
 8000de0:	0b24      	lsrs	r4, r4, #12
 8000de2:	e56e      	b.n	80008c2 <__aeabi_ddiv+0xae>
 8000de4:	9a00      	ldr	r2, [sp, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3ea      	bcc.n	8000dc0 <__aeabi_ddiv+0x5ac>
 8000dea:	0005      	movs	r5, r0
 8000dec:	e7d3      	b.n	8000d96 <__aeabi_ddiv+0x582>
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	000007ff 	.word	0x000007ff
 8000df4:	0000043e 	.word	0x0000043e
 8000df8:	0000041e 	.word	0x0000041e
 8000dfc:	000003ff 	.word	0x000003ff

08000e00 <__aeabi_i2d>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d016      	beq.n	8000e34 <__aeabi_i2d+0x34>
 8000e06:	17c3      	asrs	r3, r0, #31
 8000e08:	18c5      	adds	r5, r0, r3
 8000e0a:	405d      	eors	r5, r3
 8000e0c:	0fc4      	lsrs	r4, r0, #31
 8000e0e:	0028      	movs	r0, r5
 8000e10:	f000 f8ae 	bl	8000f70 <__clzsi2>
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <__aeabi_i2d+0x5c>)
 8000e16:	1a12      	subs	r2, r2, r0
 8000e18:	280a      	cmp	r0, #10
 8000e1a:	dc16      	bgt.n	8000e4a <__aeabi_i2d+0x4a>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	002e      	movs	r6, r5
 8000e20:	3315      	adds	r3, #21
 8000e22:	409e      	lsls	r6, r3
 8000e24:	230b      	movs	r3, #11
 8000e26:	1a18      	subs	r0, r3, r0
 8000e28:	40c5      	lsrs	r5, r0
 8000e2a:	0552      	lsls	r2, r2, #21
 8000e2c:	032d      	lsls	r5, r5, #12
 8000e2e:	0b2d      	lsrs	r5, r5, #12
 8000e30:	0d53      	lsrs	r3, r2, #21
 8000e32:	e003      	b.n	8000e3c <__aeabi_i2d+0x3c>
 8000e34:	2400      	movs	r4, #0
 8000e36:	2300      	movs	r3, #0
 8000e38:	2500      	movs	r5, #0
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	051b      	lsls	r3, r3, #20
 8000e3e:	432b      	orrs	r3, r5
 8000e40:	07e4      	lsls	r4, r4, #31
 8000e42:	4323      	orrs	r3, r4
 8000e44:	0030      	movs	r0, r6
 8000e46:	0019      	movs	r1, r3
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
 8000e4a:	380b      	subs	r0, #11
 8000e4c:	4085      	lsls	r5, r0
 8000e4e:	0552      	lsls	r2, r2, #21
 8000e50:	032d      	lsls	r5, r5, #12
 8000e52:	2600      	movs	r6, #0
 8000e54:	0b2d      	lsrs	r5, r5, #12
 8000e56:	0d53      	lsrs	r3, r2, #21
 8000e58:	e7f0      	b.n	8000e3c <__aeabi_i2d+0x3c>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	0000041e 	.word	0x0000041e

08000e60 <__aeabi_d2f>:
 8000e60:	0002      	movs	r2, r0
 8000e62:	004b      	lsls	r3, r1, #1
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	0d5b      	lsrs	r3, r3, #21
 8000e68:	030c      	lsls	r4, r1, #12
 8000e6a:	4e3d      	ldr	r6, [pc, #244]	; (8000f60 <__aeabi_d2f+0x100>)
 8000e6c:	0a64      	lsrs	r4, r4, #9
 8000e6e:	0f40      	lsrs	r0, r0, #29
 8000e70:	1c5f      	adds	r7, r3, #1
 8000e72:	0fc9      	lsrs	r1, r1, #31
 8000e74:	4304      	orrs	r4, r0
 8000e76:	00d5      	lsls	r5, r2, #3
 8000e78:	4237      	tst	r7, r6
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_d2f+0x32>
 8000e7c:	4839      	ldr	r0, [pc, #228]	; (8000f64 <__aeabi_d2f+0x104>)
 8000e7e:	181e      	adds	r6, r3, r0
 8000e80:	2efe      	cmp	r6, #254	; 0xfe
 8000e82:	dd16      	ble.n	8000eb2 <__aeabi_d2f+0x52>
 8000e84:	20ff      	movs	r0, #255	; 0xff
 8000e86:	2400      	movs	r4, #0
 8000e88:	05c0      	lsls	r0, r0, #23
 8000e8a:	4320      	orrs	r0, r4
 8000e8c:	07c9      	lsls	r1, r1, #31
 8000e8e:	4308      	orrs	r0, r1
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d106      	bne.n	8000ea4 <__aeabi_d2f+0x44>
 8000e96:	432c      	orrs	r4, r5
 8000e98:	d026      	beq.n	8000ee8 <__aeabi_d2f+0x88>
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	0192      	lsls	r2, r2, #6
 8000e9e:	0a54      	lsrs	r4, r2, #9
 8000ea0:	b2d8      	uxtb	r0, r3
 8000ea2:	e7f1      	b.n	8000e88 <__aeabi_d2f+0x28>
 8000ea4:	4325      	orrs	r5, r4
 8000ea6:	d0ed      	beq.n	8000e84 <__aeabi_d2f+0x24>
 8000ea8:	2080      	movs	r0, #128	; 0x80
 8000eaa:	03c0      	lsls	r0, r0, #15
 8000eac:	4304      	orrs	r4, r0
 8000eae:	20ff      	movs	r0, #255	; 0xff
 8000eb0:	e7ea      	b.n	8000e88 <__aeabi_d2f+0x28>
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	dd1b      	ble.n	8000eee <__aeabi_d2f+0x8e>
 8000eb6:	0192      	lsls	r2, r2, #6
 8000eb8:	1e53      	subs	r3, r2, #1
 8000eba:	419a      	sbcs	r2, r3
 8000ebc:	00e4      	lsls	r4, r4, #3
 8000ebe:	0f6d      	lsrs	r5, r5, #29
 8000ec0:	4322      	orrs	r2, r4
 8000ec2:	432a      	orrs	r2, r5
 8000ec4:	0753      	lsls	r3, r2, #29
 8000ec6:	d048      	beq.n	8000f5a <__aeabi_d2f+0xfa>
 8000ec8:	230f      	movs	r3, #15
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_d2f+0x72>
 8000ed0:	3204      	adds	r2, #4
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	04db      	lsls	r3, r3, #19
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d03f      	beq.n	8000f5a <__aeabi_d2f+0xfa>
 8000eda:	1c70      	adds	r0, r6, #1
 8000edc:	2efe      	cmp	r6, #254	; 0xfe
 8000ede:	d0d1      	beq.n	8000e84 <__aeabi_d2f+0x24>
 8000ee0:	0192      	lsls	r2, r2, #6
 8000ee2:	0a54      	lsrs	r4, r2, #9
 8000ee4:	b2c0      	uxtb	r0, r0
 8000ee6:	e7cf      	b.n	8000e88 <__aeabi_d2f+0x28>
 8000ee8:	2000      	movs	r0, #0
 8000eea:	2400      	movs	r4, #0
 8000eec:	e7cc      	b.n	8000e88 <__aeabi_d2f+0x28>
 8000eee:	0032      	movs	r2, r6
 8000ef0:	3217      	adds	r2, #23
 8000ef2:	db22      	blt.n	8000f3a <__aeabi_d2f+0xda>
 8000ef4:	2080      	movs	r0, #128	; 0x80
 8000ef6:	0400      	lsls	r0, r0, #16
 8000ef8:	4320      	orrs	r0, r4
 8000efa:	241e      	movs	r4, #30
 8000efc:	1ba4      	subs	r4, r4, r6
 8000efe:	2c1f      	cmp	r4, #31
 8000f00:	dd1d      	ble.n	8000f3e <__aeabi_d2f+0xde>
 8000f02:	2202      	movs	r2, #2
 8000f04:	4252      	negs	r2, r2
 8000f06:	1b96      	subs	r6, r2, r6
 8000f08:	0002      	movs	r2, r0
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	0016      	movs	r6, r2
 8000f0e:	2c20      	cmp	r4, #32
 8000f10:	d004      	beq.n	8000f1c <__aeabi_d2f+0xbc>
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <__aeabi_d2f+0x108>)
 8000f14:	4694      	mov	ip, r2
 8000f16:	4463      	add	r3, ip
 8000f18:	4098      	lsls	r0, r3
 8000f1a:	4305      	orrs	r5, r0
 8000f1c:	002a      	movs	r2, r5
 8000f1e:	1e53      	subs	r3, r2, #1
 8000f20:	419a      	sbcs	r2, r3
 8000f22:	4332      	orrs	r2, r6
 8000f24:	2600      	movs	r6, #0
 8000f26:	0753      	lsls	r3, r2, #29
 8000f28:	d1ce      	bne.n	8000ec8 <__aeabi_d2f+0x68>
 8000f2a:	2480      	movs	r4, #128	; 0x80
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	04e4      	lsls	r4, r4, #19
 8000f30:	2001      	movs	r0, #1
 8000f32:	4023      	ands	r3, r4
 8000f34:	4222      	tst	r2, r4
 8000f36:	d1d3      	bne.n	8000ee0 <__aeabi_d2f+0x80>
 8000f38:	e7b0      	b.n	8000e9c <__aeabi_d2f+0x3c>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e7ad      	b.n	8000e9a <__aeabi_d2f+0x3a>
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <__aeabi_d2f+0x10c>)
 8000f40:	4694      	mov	ip, r2
 8000f42:	002a      	movs	r2, r5
 8000f44:	40e2      	lsrs	r2, r4
 8000f46:	0014      	movs	r4, r2
 8000f48:	002a      	movs	r2, r5
 8000f4a:	4463      	add	r3, ip
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	4098      	lsls	r0, r3
 8000f50:	1e55      	subs	r5, r2, #1
 8000f52:	41aa      	sbcs	r2, r5
 8000f54:	4302      	orrs	r2, r0
 8000f56:	4322      	orrs	r2, r4
 8000f58:	e7e4      	b.n	8000f24 <__aeabi_d2f+0xc4>
 8000f5a:	0033      	movs	r3, r6
 8000f5c:	e79e      	b.n	8000e9c <__aeabi_d2f+0x3c>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	000007fe 	.word	0x000007fe
 8000f64:	fffffc80 	.word	0xfffffc80
 8000f68:	fffffca2 	.word	0xfffffca2
 8000f6c:	fffffc82 	.word	0xfffffc82

08000f70 <__clzsi2>:
 8000f70:	211c      	movs	r1, #28
 8000f72:	2301      	movs	r3, #1
 8000f74:	041b      	lsls	r3, r3, #16
 8000f76:	4298      	cmp	r0, r3
 8000f78:	d301      	bcc.n	8000f7e <__clzsi2+0xe>
 8000f7a:	0c00      	lsrs	r0, r0, #16
 8000f7c:	3910      	subs	r1, #16
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	4298      	cmp	r0, r3
 8000f82:	d301      	bcc.n	8000f88 <__clzsi2+0x18>
 8000f84:	0a00      	lsrs	r0, r0, #8
 8000f86:	3908      	subs	r1, #8
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d301      	bcc.n	8000f92 <__clzsi2+0x22>
 8000f8e:	0900      	lsrs	r0, r0, #4
 8000f90:	3904      	subs	r1, #4
 8000f92:	a202      	add	r2, pc, #8	; (adr r2, 8000f9c <__clzsi2+0x2c>)
 8000f94:	5c10      	ldrb	r0, [r2, r0]
 8000f96:	1840      	adds	r0, r0, r1
 8000f98:	4770      	bx	lr
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	02020304 	.word	0x02020304
 8000fa0:	01010101 	.word	0x01010101
	...

08000fac <__clzdi2>:
 8000fac:	b510      	push	{r4, lr}
 8000fae:	2900      	cmp	r1, #0
 8000fb0:	d103      	bne.n	8000fba <__clzdi2+0xe>
 8000fb2:	f7ff ffdd 	bl	8000f70 <__clzsi2>
 8000fb6:	3020      	adds	r0, #32
 8000fb8:	e002      	b.n	8000fc0 <__clzdi2+0x14>
 8000fba:	0008      	movs	r0, r1
 8000fbc:	f7ff ffd8 	bl	8000f70 <__clzsi2>
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)

08000fc4 <microDelay>:
uint8_t TCD[DATA_SIZE];



void microDelay (uint16_t delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	0002      	movs	r2, r0
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <microDelay+0x30>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <microDelay+0x30>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3f8      	bcc.n	8000fda <microDelay+0x16>
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	200000a4 	.word	0x200000a4

08000ff8 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000ffe:	2417      	movs	r4, #23
 8001000:	193b      	adds	r3, r7, r4
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001006:	003b      	movs	r3, r7
 8001008:	0018      	movs	r0, r3
 800100a:	2314      	movs	r3, #20
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f004 fc36 	bl	8005880 <memset>
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001014:	003b      	movs	r3, r7
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	601a      	str	r2, [r3, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	003b      	movs	r3, r7
 800101e:	2201      	movs	r2, #1
 8001020:	605a      	str	r2, [r3, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	003b      	movs	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001028:	003b      	movs	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800102e:	003b      	movs	r3, r7
 8001030:	4a33      	ldr	r2, [pc, #204]	; (8001100 <DHT11_Start+0x108>)
 8001032:	0019      	movs	r1, r3
 8001034:	0010      	movs	r0, r2
 8001036:	f001 f839 	bl	80020ac <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4830      	ldr	r0, [pc, #192]	; (8001100 <DHT11_Start+0x108>)
 8001040:	2200      	movs	r2, #0
 8001042:	0019      	movs	r1, r3
 8001044:	f001 f9cd 	bl	80023e2 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001048:	2014      	movs	r0, #20
 800104a:	f000 fea5 	bl	8001d98 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	482b      	ldr	r0, [pc, #172]	; (8001100 <DHT11_Start+0x108>)
 8001054:	2201      	movs	r2, #1
 8001056:	0019      	movs	r1, r3
 8001058:	f001 f9c3 	bl	80023e2 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30ms
 800105c:	201e      	movs	r0, #30
 800105e:	f7ff ffb1 	bl	8000fc4 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001068:	003b      	movs	r3, r7
 800106a:	2201      	movs	r2, #1
 800106c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800106e:	003b      	movs	r3, r7
 8001070:	4a23      	ldr	r2, [pc, #140]	; (8001100 <DHT11_Start+0x108>)
 8001072:	0019      	movs	r1, r3
 8001074:	0010      	movs	r0, r2
 8001076:	f001 f819 	bl	80020ac <HAL_GPIO_Init>
  microDelay (40);
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f7ff ffa2 	bl	8000fc4 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <DHT11_Start+0x108>)
 8001086:	0019      	movs	r1, r3
 8001088:	0010      	movs	r0, r2
 800108a:	f001 f98d 	bl	80023a8 <HAL_GPIO_ReadPin>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d10e      	bne.n	80010b0 <DHT11_Start+0xb8>
  {
    microDelay (80);
 8001092:	2050      	movs	r0, #80	; 0x50
 8001094:	f7ff ff96 	bl	8000fc4 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4a18      	ldr	r2, [pc, #96]	; (8001100 <DHT11_Start+0x108>)
 800109e:	0019      	movs	r1, r3
 80010a0:	0010      	movs	r0, r2
 80010a2:	f001 f981 	bl	80023a8 <HAL_GPIO_ReadPin>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d002      	beq.n	80010b0 <DHT11_Start+0xb8>
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
  }
  pMillis = HAL_GetTick();
 80010b0:	f000 fe68 	bl	8001d84 <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <DHT11_Start+0x10c>)
 80010b8:	601a      	str	r2, [r3, #0]
  cMillis = HAL_GetTick();
 80010ba:	f000 fe63 	bl	8001d84 <HAL_GetTick>
 80010be:	0002      	movs	r2, r0
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <DHT11_Start+0x110>)
 80010c2:	601a      	str	r2, [r3, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010c4:	e004      	b.n	80010d0 <DHT11_Start+0xd8>
  {
    cMillis = HAL_GetTick();
 80010c6:	f000 fe5d 	bl	8001d84 <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <DHT11_Start+0x110>)
 80010ce:	601a      	str	r2, [r3, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <DHT11_Start+0x108>)
 80010d6:	0019      	movs	r1, r3
 80010d8:	0010      	movs	r0, r2
 80010da:	f001 f965 	bl	80023a8 <HAL_GPIO_ReadPin>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d006      	beq.n	80010f0 <DHT11_Start+0xf8>
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <DHT11_Start+0x10c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1c9a      	adds	r2, r3, #2
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <DHT11_Start+0x110>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8ea      	bhi.n	80010c6 <DHT11_Start+0xce>
  }
  return Response;
 80010f0:	2317      	movs	r3, #23
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	781b      	ldrb	r3, [r3, #0]
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b007      	add	sp, #28
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	50000400 	.word	0x50000400
 8001104:	20000170 	.word	0x20000170
 8001108:	20000174 	.word	0x20000174

0800110c <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e071      	b.n	80011fe <DHT11_Read+0xf2>
  {
    pMillis = HAL_GetTick();
 800111a:	f000 fe33 	bl	8001d84 <HAL_GetTick>
 800111e:	0002      	movs	r2, r0
 8001120:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <DHT11_Read+0x108>)
 8001122:	601a      	str	r2, [r3, #0]
    cMillis = HAL_GetTick();
 8001124:	f000 fe2e 	bl	8001d84 <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <DHT11_Read+0x10c>)
 800112c:	601a      	str	r2, [r3, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800112e:	e004      	b.n	800113a <DHT11_Read+0x2e>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001130:	f000 fe28 	bl	8001d84 <HAL_GetTick>
 8001134:	0002      	movs	r2, r0
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <DHT11_Read+0x10c>)
 8001138:	601a      	str	r2, [r3, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4a37      	ldr	r2, [pc, #220]	; (800121c <DHT11_Read+0x110>)
 8001140:	0019      	movs	r1, r3
 8001142:	0010      	movs	r0, r2
 8001144:	f001 f930 	bl	80023a8 <HAL_GPIO_ReadPin>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d106      	bne.n	800115a <DHT11_Read+0x4e>
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <DHT11_Read+0x108>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	1c9a      	adds	r2, r3, #2
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <DHT11_Read+0x10c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d8ea      	bhi.n	8001130 <DHT11_Read+0x24>
    }
    microDelay (40);   // wait for 40 us
 800115a:	2028      	movs	r0, #40	; 0x28
 800115c:	f7ff ff32 	bl	8000fc4 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4a2d      	ldr	r2, [pc, #180]	; (800121c <DHT11_Read+0x110>)
 8001166:	0019      	movs	r1, r3
 8001168:	0010      	movs	r0, r2
 800116a:	f001 f91d 	bl	80023a8 <HAL_GPIO_ReadPin>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d111      	bne.n	8001196 <DHT11_Read+0x8a>
      b&= ~(1<<(7-a));
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2207      	movs	r2, #7
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2201      	movs	r2, #1
 800117c:	409a      	lsls	r2, r3
 800117e:	0013      	movs	r3, r2
 8001180:	b25b      	sxtb	r3, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	1dba      	adds	r2, r7, #6
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	b252      	sxtb	r2, r2
 800118c:	4013      	ands	r3, r2
 800118e:	b25a      	sxtb	r2, r3
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e00e      	b.n	80011b4 <DHT11_Read+0xa8>
    else
      b|= (1<<(7-a));
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2207      	movs	r2, #7
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2201      	movs	r2, #1
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b25a      	sxtb	r2, r3
 80011b0:	1dbb      	adds	r3, r7, #6
 80011b2:	701a      	strb	r2, [r3, #0]
    pMillis = HAL_GetTick();
 80011b4:	f000 fde6 	bl	8001d84 <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <DHT11_Read+0x108>)
 80011bc:	601a      	str	r2, [r3, #0]
    cMillis = HAL_GetTick();
 80011be:	f000 fde1 	bl	8001d84 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <DHT11_Read+0x10c>)
 80011c6:	601a      	str	r2, [r3, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011c8:	e004      	b.n	80011d4 <DHT11_Read+0xc8>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80011ca:	f000 fddb 	bl	8001d84 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <DHT11_Read+0x10c>)
 80011d2:	601a      	str	r2, [r3, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4a10      	ldr	r2, [pc, #64]	; (800121c <DHT11_Read+0x110>)
 80011da:	0019      	movs	r1, r3
 80011dc:	0010      	movs	r0, r2
 80011de:	f001 f8e3 	bl	80023a8 <HAL_GPIO_ReadPin>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d006      	beq.n	80011f4 <DHT11_Read+0xe8>
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <DHT11_Read+0x108>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1c9a      	adds	r2, r3, #2
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <DHT11_Read+0x10c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8ea      	bhi.n	80011ca <DHT11_Read+0xbe>
  for (a=0;a<8;a++)
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	3201      	adds	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d989      	bls.n	800111a <DHT11_Read+0xe>
    }
  }
  return b;
 8001206:	1dbb      	adds	r3, r7, #6
 8001208:	781b      	ldrb	r3, [r3, #0]
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	20000170 	.word	0x20000170
 8001218:	20000174 	.word	0x20000174
 800121c:	50000400 	.word	0x50000400

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Initialiser les tableaux de données avec des valeurs par défaut
	    for (int i = 0; i < DATA_SIZE; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	e016      	b.n	800125a <main+0x3a>
	        RHI[i] = 0;
 800122c:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <main+0x1b8>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	        RHD[i] = 0;
 8001236:	4a69      	ldr	r2, [pc, #420]	; (80013dc <main+0x1bc>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
	        TCI[i] = 0;
 8001240:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <main+0x1c0>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	18d3      	adds	r3, r2, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
	        TCD[i] = 0;
 800124a:	4a66      	ldr	r2, [pc, #408]	; (80013e4 <main+0x1c4>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	18d3      	adds	r3, r2, r3
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < DATA_SIZE; i++) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b07      	cmp	r3, #7
 800125e:	dde5      	ble.n	800122c <main+0xc>
	    }

	    // Appeler la fonction de réception de l'UART pour remplir les tableaux avec les données reçues
	    uart_receive_data(RHI, DATA_SIZE);
 8001260:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <main+0x1b8>)
 8001262:	2108      	movs	r1, #8
 8001264:	0018      	movs	r0, r3
 8001266:	f000 fb83 	bl	8001970 <uart_receive_data>
	    uart_receive_data(RHD, DATA_SIZE);
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <main+0x1bc>)
 800126c:	2108      	movs	r1, #8
 800126e:	0018      	movs	r0, r3
 8001270:	f000 fb7e 	bl	8001970 <uart_receive_data>
	    uart_receive_data(TCI, DATA_SIZE);
 8001274:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <main+0x1c0>)
 8001276:	2108      	movs	r1, #8
 8001278:	0018      	movs	r0, r3
 800127a:	f000 fb79 	bl	8001970 <uart_receive_data>
	    uart_receive_data(TCD, DATA_SIZE);
 800127e:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <main+0x1c4>)
 8001280:	2108      	movs	r1, #8
 8001282:	0018      	movs	r0, r3
 8001284:	f000 fb74 	bl	8001970 <uart_receive_data>

	    // Effectuer d'autres opérations avec les tableaux de données reçus

	    // Appeler la fonction d'envoi de l'UART pour transmettre les tableaux de données
	    uart_transmit_data(RHI, DATA_SIZE);
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <main+0x1b8>)
 800128a:	2108      	movs	r1, #8
 800128c:	0018      	movs	r0, r3
 800128e:	f000 fb59 	bl	8001944 <uart_transmit_data>
	    uart_transmit_data(RHD, DATA_SIZE);
 8001292:	4b52      	ldr	r3, [pc, #328]	; (80013dc <main+0x1bc>)
 8001294:	2108      	movs	r1, #8
 8001296:	0018      	movs	r0, r3
 8001298:	f000 fb54 	bl	8001944 <uart_transmit_data>
	    uart_transmit_data(TCI, DATA_SIZE);
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <main+0x1c0>)
 800129e:	2108      	movs	r1, #8
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 fb4f 	bl	8001944 <uart_transmit_data>
	    uart_transmit_data(TCD, DATA_SIZE);
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <main+0x1c4>)
 80012a8:	2108      	movs	r1, #8
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fb4a 	bl	8001944 <uart_transmit_data>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f000 fd02 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f8a4 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fa78 	bl	80017ac <MX_GPIO_Init>
  MX_RTC_Init();
 80012bc:	f000 f91a 	bl	80014f4 <MX_RTC_Init>
  MX_SPI1_Init();
 80012c0:	f000 f9b8 	bl	8001634 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80012c4:	f000 fa42 	bl	800174c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80012c8:	f000 f9ec 	bl	80016a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80012cc:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <main+0x1c8>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f002 fd44 	bl	8003d5c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(DHT11_Start())
 80012d4:	f7ff fe90 	bl	8000ff8 <DHT11_Start>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d076      	beq.n	80013ca <main+0x1aa>
	      {
		  // Lire les données DHT11 dans le tableau temporaire
		//  DHT11_Read(dht_data);

		  // Copier les éléments du tableau temporaire dans les tableaux correspondants
		  for (int i = 0; i < DATA_SIZE; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	e01e      	b.n	8001320 <main+0x100>
		      RHI[i] = dht_data[0];
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <main+0x1cc>)
 80012e4:	7819      	ldrb	r1, [r3, #0]
 80012e6:	4a3c      	ldr	r2, [pc, #240]	; (80013d8 <main+0x1b8>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	18d3      	adds	r3, r2, r3
 80012ec:	1c0a      	adds	r2, r1, #0
 80012ee:	701a      	strb	r2, [r3, #0]
		      RHD[i] = dht_data[1];
 80012f0:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <main+0x1cc>)
 80012f2:	7859      	ldrb	r1, [r3, #1]
 80012f4:	4a39      	ldr	r2, [pc, #228]	; (80013dc <main+0x1bc>)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	1c0a      	adds	r2, r1, #0
 80012fc:	701a      	strb	r2, [r3, #0]
		      TCI[i] = dht_data[2];
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <main+0x1cc>)
 8001300:	7899      	ldrb	r1, [r3, #2]
 8001302:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <main+0x1c0>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	18d3      	adds	r3, r2, r3
 8001308:	1c0a      	adds	r2, r1, #0
 800130a:	701a      	strb	r2, [r3, #0]
		      TCD[i] = dht_data[3];
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <main+0x1cc>)
 800130e:	78d9      	ldrb	r1, [r3, #3]
 8001310:	4a34      	ldr	r2, [pc, #208]	; (80013e4 <main+0x1c4>)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	1c0a      	adds	r2, r1, #0
 8001318:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < DATA_SIZE; i++) {
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b07      	cmp	r3, #7
 8001324:	dddd      	ble.n	80012e2 <main+0xc2>
		  }
	        //RHI = DHT11_Read(); // Relative humidity integral
	       // RHD = DHT11_Read(); // Relative humidity decimal
	       // TCI = DHT11_Read(); // Celsius integral
	       // TCD = DHT11_Read(); // Celsius decimal
	        SUM = DHT11_Read(); // Check sum
 8001326:	f7ff fef1 	bl	800110c <DHT11_Read>
 800132a:	0003      	movs	r3, r0
 800132c:	001a      	movs	r2, r3
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <main+0x1d0>)
 8001330:	701a      	strb	r2, [r3, #0]
	        if (*RHI + *RHD + *TCI + *TCD == SUM)
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <main+0x1b8>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	001a      	movs	r2, r3
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <main+0x1bc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <main+0x1c0>)
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	189b      	adds	r3, r3, r2
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <main+0x1c4>)
 8001346:	7812      	ldrb	r2, [r2, #0]
 8001348:	189b      	adds	r3, r3, r2
 800134a:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <main+0x1d0>)
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	4293      	cmp	r3, r2
 8001350:	d13b      	bne.n	80013ca <main+0x1aa>
	        {
	          // Can use RHI and TCI for any purposes if whole number only needed
	        	tCelsius = (float)(*TCI) + (float)(*TCD/10.0);
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <main+0x1c0>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff fa1a 	bl	8000790 <__aeabi_ui2f>
 800135c:	1c04      	adds	r4, r0, #0
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <main+0x1c4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff fd4c 	bl	8000e00 <__aeabi_i2d>
 8001368:	2200      	movs	r2, #0
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <main+0x1d4>)
 800136c:	f7ff fa52 	bl	8000814 <__aeabi_ddiv>
 8001370:	0002      	movs	r2, r0
 8001372:	000b      	movs	r3, r1
 8001374:	0010      	movs	r0, r2
 8001376:	0019      	movs	r1, r3
 8001378:	f7ff fd72 	bl	8000e60 <__aeabi_d2f>
 800137c:	1c03      	adds	r3, r0, #0
 800137e:	1c19      	adds	r1, r3, #0
 8001380:	1c20      	adds	r0, r4, #0
 8001382:	f7ff f867 	bl	8000454 <__aeabi_fadd>
 8001386:	1c03      	adds	r3, r0, #0
 8001388:	1c1a      	adds	r2, r3, #0
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <main+0x1d8>)
 800138c:	601a      	str	r2, [r3, #0]
	        	RH = (float)(*RHI) + (float)(*RHD/10.0);
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <main+0x1b8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff f9fc 	bl	8000790 <__aeabi_ui2f>
 8001398:	1c04      	adds	r4, r0, #0
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <main+0x1bc>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	0018      	movs	r0, r3
 80013a0:	f7ff fd2e 	bl	8000e00 <__aeabi_i2d>
 80013a4:	2200      	movs	r2, #0
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <main+0x1d4>)
 80013a8:	f7ff fa34 	bl	8000814 <__aeabi_ddiv>
 80013ac:	0002      	movs	r2, r0
 80013ae:	000b      	movs	r3, r1
 80013b0:	0010      	movs	r0, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	f7ff fd54 	bl	8000e60 <__aeabi_d2f>
 80013b8:	1c03      	adds	r3, r0, #0
 80013ba:	1c19      	adds	r1, r3, #0
 80013bc:	1c20      	adds	r0, r4, #0
 80013be:	f7ff f849 	bl	8000454 <__aeabi_fadd>
 80013c2:	1c03      	adds	r3, r0, #0
 80013c4:	1c1a      	adds	r2, r3, #0
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <main+0x1dc>)
 80013c8:	601a      	str	r2, [r3, #0]
	         // printf(strCopy,"%d.%d F  \n ", TFI, TFD);

	          //printf(strCopy,"%d.%d %%  \n ", RHI, RHD);
	        }
	      }
	      HAL_Delay(2000);
 80013ca:	23fa      	movs	r3, #250	; 0xfa
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 fce2 	bl	8001d98 <HAL_Delay>
	  if(DHT11_Start())
 80013d4:	e77e      	b.n	80012d4 <main+0xb4>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	20000184 	.word	0x20000184
 80013dc:	2000018c 	.word	0x2000018c
 80013e0:	20000194 	.word	0x20000194
 80013e4:	2000019c 	.word	0x2000019c
 80013e8:	200000a4 	.word	0x200000a4
 80013ec:	20000180 	.word	0x20000180
 80013f0:	2000016c 	.word	0x2000016c
 80013f4:	40240000 	.word	0x40240000
 80013f8:	20000178 	.word	0x20000178
 80013fc:	2000017c 	.word	0x2000017c

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b09d      	sub	sp, #116	; 0x74
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	2438      	movs	r4, #56	; 0x38
 8001408:	193b      	adds	r3, r7, r4
 800140a:	0018      	movs	r0, r3
 800140c:	2338      	movs	r3, #56	; 0x38
 800140e:	001a      	movs	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	f004 fa35 	bl	8005880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001416:	2324      	movs	r3, #36	; 0x24
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	0018      	movs	r0, r3
 800141c:	2314      	movs	r3, #20
 800141e:	001a      	movs	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f004 fa2d 	bl	8005880 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001426:	003b      	movs	r3, r7
 8001428:	0018      	movs	r0, r3
 800142a:	2324      	movs	r3, #36	; 0x24
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f004 fa26 	bl	8005880 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <SystemClock_Config+0xec>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <SystemClock_Config+0xf0>)
 800143a:	401a      	ands	r2, r3
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <SystemClock_Config+0xec>)
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	0109      	lsls	r1, r1, #4
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001446:	0021      	movs	r1, r4
 8001448:	187b      	adds	r3, r7, r1
 800144a:	220a      	movs	r2, #10
 800144c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2201      	movs	r2, #1
 8001452:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2210      	movs	r2, #16
 8001458:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2201      	movs	r2, #1
 800145e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2202      	movs	r2, #2
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800146c:	187b      	adds	r3, r7, r1
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	0312      	lsls	r2, r2, #12
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	0412      	lsls	r2, r2, #16
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	187b      	adds	r3, r7, r1
 800147e:	0018      	movs	r0, r3
 8001480:	f000 fff2 	bl	8002468 <HAL_RCC_OscConfig>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001488:	f000 fa88 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	2124      	movs	r1, #36	; 0x24
 800148e:	187b      	adds	r3, r7, r1
 8001490:	220f      	movs	r2, #15
 8001492:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2203      	movs	r2, #3
 8001498:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2101      	movs	r1, #1
 80014b0:	0018      	movs	r0, r3
 80014b2:	f001 fbad 	bl	8002c10 <HAL_RCC_ClockConfig>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80014ba:	f000 fa6f 	bl	800199c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80014be:	003b      	movs	r3, r7
 80014c0:	2222      	movs	r2, #34	; 0x22
 80014c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c4:	003b      	movs	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ca:	003b      	movs	r3, r7
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	0292      	lsls	r2, r2, #10
 80014d0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	003b      	movs	r3, r7
 80014d4:	0018      	movs	r0, r3
 80014d6:	f001 fdbf 	bl	8003058 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80014de:	f000 fa5d 	bl	800199c <Error_Handler>
  }
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b01d      	add	sp, #116	; 0x74
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40007000 	.word	0x40007000
 80014f0:	ffffe7ff 	.word	0xffffe7ff

080014f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b090      	sub	sp, #64	; 0x40
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014fa:	232c      	movs	r3, #44	; 0x2c
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	0018      	movs	r0, r3
 8001500:	2314      	movs	r3, #20
 8001502:	001a      	movs	r2, r3
 8001504:	2100      	movs	r1, #0
 8001506:	f004 f9bb 	bl	8005880 <memset>
  RTC_DateTypeDef sDate = {0};
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001512:	003b      	movs	r3, r7
 8001514:	0018      	movs	r0, r3
 8001516:	2328      	movs	r3, #40	; 0x28
 8001518:	001a      	movs	r2, r3
 800151a:	2100      	movs	r1, #0
 800151c:	f004 f9b0 	bl	8005880 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001520:	4b41      	ldr	r3, [pc, #260]	; (8001628 <MX_RTC_Init+0x134>)
 8001522:	4a42      	ldr	r2, [pc, #264]	; (800162c <MX_RTC_Init+0x138>)
 8001524:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001526:	4b40      	ldr	r3, [pc, #256]	; (8001628 <MX_RTC_Init+0x134>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <MX_RTC_Init+0x134>)
 800152e:	221f      	movs	r2, #31
 8001530:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <MX_RTC_Init+0x134>)
 8001534:	4a3e      	ldr	r2, [pc, #248]	; (8001630 <MX_RTC_Init+0x13c>)
 8001536:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001538:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <MX_RTC_Init+0x134>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <MX_RTC_Init+0x134>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001544:	4b38      	ldr	r3, [pc, #224]	; (8001628 <MX_RTC_Init+0x134>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <MX_RTC_Init+0x134>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <MX_RTC_Init+0x134>)
 8001552:	0018      	movs	r0, r3
 8001554:	f001 fedc 	bl	8003310 <HAL_RTC_Init>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800155c:	f000 fa1e 	bl	800199c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001560:	212c      	movs	r1, #44	; 0x2c
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2200      	movs	r2, #0
 8001572:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001580:	1879      	adds	r1, r7, r1
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <MX_RTC_Init+0x134>)
 8001584:	2200      	movs	r2, #0
 8001586:	0018      	movs	r0, r3
 8001588:	f001 ff5e 	bl	8003448 <HAL_RTC_SetTime>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d001      	beq.n	8001594 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001590:	f000 fa04 	bl	800199c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001594:	2128      	movs	r1, #40	; 0x28
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2201      	movs	r2, #1
 80015a0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2201      	movs	r2, #1
 80015a6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2200      	movs	r2, #0
 80015ac:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015ae:	1879      	adds	r1, r7, r1
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <MX_RTC_Init+0x134>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	0018      	movs	r0, r3
 80015b6:	f001 fff1 	bl	800359c <HAL_RTC_SetDate>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80015be:	f000 f9ed 	bl	800199c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80015c2:	003b      	movs	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80015c8:	003b      	movs	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80015ce:	003b      	movs	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80015d4:	003b      	movs	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015da:	003b      	movs	r3, r7
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015e0:	003b      	movs	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80015e6:	003b      	movs	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80015ec:	003b      	movs	r3, r7
 80015ee:	22f0      	movs	r2, #240	; 0xf0
 80015f0:	0512      	lsls	r2, r2, #20
 80015f2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80015f4:	003b      	movs	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80015fa:	003b      	movs	r3, r7
 80015fc:	2220      	movs	r2, #32
 80015fe:	2101      	movs	r1, #1
 8001600:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001602:	003b      	movs	r3, r7
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800160a:	0039      	movs	r1, r7
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_RTC_Init+0x134>)
 800160e:	2200      	movs	r2, #0
 8001610:	0018      	movs	r0, r3
 8001612:	f002 f857 	bl	80036c4 <HAL_RTC_SetAlarm_IT>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800161a:	f000 f9bf 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b010      	add	sp, #64	; 0x40
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	20000028 	.word	0x20000028
 800162c:	40002800 	.word	0x40002800
 8001630:	000003ff 	.word	0x000003ff

08001634 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_SPI1_Init+0x68>)
 800163a:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <MX_SPI1_Init+0x6c>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_SPI1_Init+0x68>)
 8001640:	2282      	movs	r2, #130	; 0x82
 8001642:	0052      	lsls	r2, r2, #1
 8001644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_SPI1_Init+0x68>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_SPI1_Init+0x68>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_SPI1_Init+0x68>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_SPI1_Init+0x68>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_SPI1_Init+0x68>)
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <MX_SPI1_Init+0x68>)
 8001668:	2220      	movs	r2, #32
 800166a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_SPI1_Init+0x68>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_SPI1_Init+0x68>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_SPI1_Init+0x68>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_SPI1_Init+0x68>)
 8001680:	2207      	movs	r2, #7
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <MX_SPI1_Init+0x68>)
 8001686:	0018      	movs	r0, r3
 8001688:	f002 fa94 	bl	8003bb4 <HAL_SPI_Init>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001690:	f000 f984 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	2000004c 	.word	0x2000004c
 80016a0:	40013000 	.word	0x40013000

080016a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	2308      	movs	r3, #8
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	0018      	movs	r0, r3
 80016b0:	2310      	movs	r3, #16
 80016b2:	001a      	movs	r2, r3
 80016b4:	2100      	movs	r1, #0
 80016b6:	f004 f8e3 	bl	8005880 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ba:	003b      	movs	r3, r7
 80016bc:	0018      	movs	r0, r3
 80016be:	2308      	movs	r3, #8
 80016c0:	001a      	movs	r2, r3
 80016c2:	2100      	movs	r1, #0
 80016c4:	f004 f8dc 	bl	8005880 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_TIM2_Init+0xa0>)
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	05d2      	lsls	r2, r2, #23
 80016ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM2_Init+0xa0>)
 80016d2:	221f      	movs	r2, #31
 80016d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_TIM2_Init+0xa0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_TIM2_Init+0xa0>)
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <MX_TIM2_Init+0xa4>)
 80016e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM2_Init+0xa0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_TIM2_Init+0xa0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_TIM2_Init+0xa0>)
 80016f0:	0018      	movs	r0, r3
 80016f2:	f002 faf3 	bl	8003cdc <HAL_TIM_Base_Init>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016fa:	f000 f94f 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	2108      	movs	r1, #8
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	0152      	lsls	r2, r2, #5
 8001706:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001708:	187a      	adds	r2, r7, r1
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_TIM2_Init+0xa0>)
 800170c:	0011      	movs	r1, r2
 800170e:	0018      	movs	r0, r3
 8001710:	f002 fc56 	bl	8003fc0 <HAL_TIM_ConfigClockSource>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001718:	f000 f940 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	003b      	movs	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	003b      	movs	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001728:	003a      	movs	r2, r7
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_TIM2_Init+0xa0>)
 800172c:	0011      	movs	r1, r2
 800172e:	0018      	movs	r0, r3
 8001730:	f002 fe3a 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001738:	f000 f930 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b006      	add	sp, #24
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000a4 	.word	0x200000a4
 8001748:	0000ffff 	.word	0x0000ffff

0800174c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <MX_USART2_UART_Init+0x5c>)
 8001754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001758:	22e1      	movs	r2, #225	; 0xe1
 800175a:	0252      	lsls	r2, r2, #9
 800175c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001790:	0018      	movs	r0, r3
 8001792:	f002 fe67 	bl	8004464 <HAL_UART_Init>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d001      	beq.n	800179e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800179a:	f000 f8ff 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200000e4 	.word	0x200000e4
 80017a8:	40004400 	.word	0x40004400

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	2414      	movs	r4, #20
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	0018      	movs	r0, r3
 80017b8:	2314      	movs	r3, #20
 80017ba:	001a      	movs	r2, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	f004 f85f 	bl	8005880 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <MX_GPIO_Init+0x188>)
 80017c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c6:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <MX_GPIO_Init+0x188>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ce:	4b59      	ldr	r3, [pc, #356]	; (8001934 <MX_GPIO_Init+0x188>)
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b56      	ldr	r3, [pc, #344]	; (8001934 <MX_GPIO_Init+0x188>)
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	4b55      	ldr	r3, [pc, #340]	; (8001934 <MX_GPIO_Init+0x188>)
 80017e0:	2102      	movs	r1, #2
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <MX_GPIO_Init+0x188>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b50      	ldr	r3, [pc, #320]	; (8001934 <MX_GPIO_Init+0x188>)
 80017f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f6:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <MX_GPIO_Init+0x188>)
 80017f8:	2104      	movs	r1, #4
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017fe:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <MX_GPIO_Init+0x188>)
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	2204      	movs	r2, #4
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <MX_GPIO_Init+0x188>)
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <MX_GPIO_Init+0x188>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	430a      	orrs	r2, r1
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <MX_GPIO_Init+0x188>)
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	4013      	ands	r3, r2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8001822:	4945      	ldr	r1, [pc, #276]	; (8001938 <MX_GPIO_Init+0x18c>)
 8001824:	23a0      	movs	r3, #160	; 0xa0
 8001826:	05db      	lsls	r3, r3, #23
 8001828:	2200      	movs	r2, #0
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fdd9 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4841      	ldr	r0, [pc, #260]	; (800193c <MX_GPIO_Init+0x190>)
 8001836:	2200      	movs	r2, #0
 8001838:	0019      	movs	r1, r3
 800183a:	f000 fdd2 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 800183e:	4b40      	ldr	r3, [pc, #256]	; (8001940 <MX_GPIO_Init+0x194>)
 8001840:	2200      	movs	r2, #0
 8001842:	2107      	movs	r1, #7
 8001844:	0018      	movs	r0, r3
 8001846:	f000 fdcc 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 800184a:	193b      	adds	r3, r7, r4
 800184c:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <MX_GPIO_Init+0x18c>)
 800184e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2201      	movs	r2, #1
 8001854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185c:	193b      	adds	r3, r7, r4
 800185e:	2202      	movs	r2, #2
 8001860:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	193a      	adds	r2, r7, r4
 8001864:	23a0      	movs	r3, #160	; 0xa0
 8001866:	05db      	lsls	r3, r3, #23
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f000 fc1e 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001870:	0021      	movs	r1, r4
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	000c      	movs	r4, r1
 800187c:	193b      	adds	r3, r7, r4
 800187e:	2201      	movs	r2, #1
 8001880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	193b      	adds	r3, r7, r4
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	193b      	adds	r3, r7, r4
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	193b      	adds	r3, r7, r4
 8001890:	4a2a      	ldr	r2, [pc, #168]	; (800193c <MX_GPIO_Init+0x190>)
 8001892:	0019      	movs	r1, r3
 8001894:	0010      	movs	r0, r2
 8001896:	f000 fc09 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 800189a:	0021      	movs	r1, r4
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2213      	movs	r2, #19
 80018a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2288      	movs	r2, #136	; 0x88
 80018a6:	0352      	lsls	r2, r2, #13
 80018a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	000c      	movs	r4, r1
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <MX_GPIO_Init+0x190>)
 80018b6:	0019      	movs	r1, r3
 80018b8:	0010      	movs	r0, r2
 80018ba:	f000 fbf7 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 80018be:	0021      	movs	r1, r4
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0192      	lsls	r2, r2, #6
 80018c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2288      	movs	r2, #136	; 0x88
 80018cc:	0352      	lsls	r2, r2, #13
 80018ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80018d6:	000c      	movs	r4, r1
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <MX_GPIO_Init+0x194>)
 80018dc:	0019      	movs	r1, r3
 80018de:	0010      	movs	r0, r2
 80018e0:	f000 fbe4 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 80018e4:	0021      	movs	r1, r4
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2201      	movs	r2, #1
 80018f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2202      	movs	r2, #2
 80018fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <MX_GPIO_Init+0x194>)
 8001902:	0019      	movs	r1, r3
 8001904:	0010      	movs	r0, r2
 8001906:	f000 fbd1 	bl	80020ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2005      	movs	r0, #5
 8001910:	f000 fb12 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001914:	2005      	movs	r0, #5
 8001916:	f000 fb24 	bl	8001f62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2007      	movs	r0, #7
 8001920:	f000 fb0a 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001924:	2007      	movs	r0, #7
 8001926:	f000 fb1c 	bl	8001f62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b00b      	add	sp, #44	; 0x2c
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40021000 	.word	0x40021000
 8001938:	00009002 	.word	0x00009002
 800193c:	50000400 	.word	0x50000400
 8001940:	50000800 	.word	0x50000800

08001944 <uart_transmit_data>:

/* USER CODE BEGIN 4 */
// Implémenter la fonction d'envoi de données de l'UART
void uart_transmit_data(uint8_t* data, uint16_t size)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	000a      	movs	r2, r1
 800194e:	1cbb      	adds	r3, r7, #2
 8001950:	801a      	strh	r2, [r3, #0]
    // Appeler la fonction HAL_UART_Transmit avec les arguments corrects
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8001952:	2301      	movs	r3, #1
 8001954:	425c      	negs	r4, r3
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	881a      	ldrh	r2, [r3, #0]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <uart_transmit_data+0x28>)
 800195e:	0023      	movs	r3, r4
 8001960:	f002 fdd4 	bl	800450c <HAL_UART_Transmit>
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b003      	add	sp, #12
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	200000e4 	.word	0x200000e4

08001970 <uart_receive_data>:

// Implémenter la fonction de réception de données de l'UART
void uart_receive_data(uint8_t* data, uint16_t size)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	000a      	movs	r2, r1
 800197a:	1cbb      	adds	r3, r7, #2
 800197c:	801a      	strh	r2, [r3, #0]
    // Appeler la fonction HAL_UART_Receive avec les arguments corrects
    HAL_UART_Receive(&huart2, data, size, HAL_MAX_DELAY);
 800197e:	2301      	movs	r3, #1
 8001980:	425c      	negs	r4, r3
 8001982:	1cbb      	adds	r3, r7, #2
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <uart_receive_data+0x28>)
 800198a:	0023      	movs	r3, r4
 800198c:	f002 fe5e 	bl	800464c <HAL_UART_Receive>
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b003      	add	sp, #12
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	200000e4 	.word	0x200000e4

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_MspInit+0x24>)
 80019ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_MspInit+0x24>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_MspInit+0x24>)
 80019ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_MspInit+0x24>)
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	0549      	lsls	r1, r1, #21
 80019c2:	430a      	orrs	r2, r1
 80019c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_RTC_MspInit+0x38>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10e      	bne.n	8001a00 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RTC_MspInit+0x3c>)
 80019e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RTC_MspInit+0x3c>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	02c9      	lsls	r1, r1, #11
 80019ec:	430a      	orrs	r2, r1
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2002      	movs	r0, #2
 80019f6:	f000 fa9f 	bl	8001f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80019fa:	2002      	movs	r0, #2
 80019fc:	f000 fab1 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40002800 	.word	0x40002800
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b08b      	sub	sp, #44	; 0x2c
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	2414      	movs	r4, #20
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	2314      	movs	r3, #20
 8001a20:	001a      	movs	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f003 ff2c 	bl	8005880 <memset>
  if(hspi->Instance==SPI1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <HAL_SPI_MspInit+0xc0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d14a      	bne.n	8001ac8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	0149      	lsls	r1, r1, #5
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a46:	2102      	movs	r1, #2
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	2202      	movs	r2, #2
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	2208      	movs	r2, #8
 8001a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	193b      	adds	r3, r7, r4
 8001a78:	2202      	movs	r2, #2
 8001a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	193b      	adds	r3, r7, r4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	2203      	movs	r2, #3
 8001a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_SPI_MspInit+0xc8>)
 8001a92:	0019      	movs	r1, r3
 8001a94:	0010      	movs	r0, r2
 8001a96:	f000 fb09 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	22c0      	movs	r2, #192	; 0xc0
 8001aa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	187a      	adds	r2, r7, r1
 8001abc:	23a0      	movs	r3, #160	; 0xa0
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 faf2 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b00b      	add	sp, #44	; 0x2c
 8001ace:	bd90      	pop	{r4, r7, pc}
 8001ad0:	40013000 	.word	0x40013000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	50000400 	.word	0x50000400

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	05db      	lsls	r3, r3, #23
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10d      	bne.n	8001b0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_TIM_Base_MspInit+0x38>)
 8001af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_TIM_Base_MspInit+0x38>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	200f      	movs	r0, #15
 8001b02:	f000 fa19 	bl	8001f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 fa2b 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	240c      	movs	r4, #12
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	0018      	movs	r0, r3
 8001b26:	2314      	movs	r3, #20
 8001b28:	001a      	movs	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f003 fea8 	bl	8005880 <memset>
  if(huart->Instance==USART2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_UART_MspInit+0x90>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d131      	bne.n	8001b9e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_UART_MspInit+0x94>)
 8001b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_UART_MspInit+0x94>)
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	0289      	lsls	r1, r1, #10
 8001b44:	430a      	orrs	r2, r1
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_UART_MspInit+0x94>)
 8001b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_UART_MspInit+0x94>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	430a      	orrs	r2, r1
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_UART_MspInit+0x94>)
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b60:	0021      	movs	r1, r4
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	220c      	movs	r2, #12
 8001b66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	2203      	movs	r2, #3
 8001b78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	187a      	adds	r2, r7, r1
 8001b82:	23a0      	movs	r3, #160	; 0xa0
 8001b84:	05db      	lsls	r3, r3, #23
 8001b86:	0011      	movs	r1, r2
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 fa8f 	bl	80020ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	201c      	movs	r0, #28
 8001b94:	f000 f9d0 	bl	8001f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b98:	201c      	movs	r0, #28
 8001b9a:	f000 f9e2 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b009      	add	sp, #36	; 0x24
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40021000 	.word	0x40021000

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd4:	f000 f8c4 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <RTC_IRQHandler+0x14>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f001 fece 	bl	8003988 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000028 	.word	0x20000028

08001bf8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f000 fc0d 	bl	800241c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8001c02:	2002      	movs	r0, #2
 8001c04:	f000 fc0a 	bl	800241c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8001c12:	2010      	movs	r0, #16
 8001c14:	f000 fc02 	bl	800241c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	019b      	lsls	r3, r3, #6
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fbfd 	bl	800241c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <TIM2_IRQHandler+0x14>)
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f002 f8de 	bl	8003df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	200000a4 	.word	0x200000a4

08001c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <USART2_IRQHandler+0x14>)
 8001c46:	0018      	movs	r0, r3
 8001c48:	f002 fde6 	bl	8004818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	200000e4 	.word	0x200000e4

08001c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001c64:	480d      	ldr	r0, [pc, #52]	; (8001c9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001c66:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c68:	f7ff fff6 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6e:	490d      	ldr	r1, [pc, #52]	; (8001ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <LoopForever+0xe>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c84:	4c0a      	ldr	r4, [pc, #40]	; (8001cb0 <LoopForever+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c92:	f003 fdd1 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7ff fac3 	bl	8001220 <main>

08001c9a <LoopForever>:

LoopForever:
    b LoopForever
 8001c9a:	e7fe      	b.n	8001c9a <LoopForever>
   ldr   r0, =_estack
 8001c9c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ca8:	08005964 	.word	0x08005964
  ldr r2, =_sbss
 8001cac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cb0:	200001a8 	.word	0x200001a8

08001cb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC1_COMP_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_Init+0x3c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_Init+0x3c>)
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f000 f811 	bl	8001cf8 <HAL_InitTick>
 8001cd6:	1e03      	subs	r3, r0, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e001      	b.n	8001ce6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ce2:	f7ff fe61 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	781b      	ldrb	r3, [r3, #0]
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_InitTick+0x5c>)
 8001d02:	681c      	ldr	r4, [r3, #0]
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_InitTick+0x60>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	0019      	movs	r1, r3
 8001d0a:	23fa      	movs	r3, #250	; 0xfa
 8001d0c:	0098      	lsls	r0, r3, #2
 8001d0e:	f7fe f9fb 	bl	8000108 <__udivsi3>
 8001d12:	0003      	movs	r3, r0
 8001d14:	0019      	movs	r1, r3
 8001d16:	0020      	movs	r0, r4
 8001d18:	f7fe f9f6 	bl	8000108 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f92f 	bl	8001f82 <HAL_SYSTICK_Config>
 8001d24:	1e03      	subs	r3, r0, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e00f      	b.n	8001d4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d80b      	bhi.n	8001d4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2301      	movs	r3, #1
 8001d36:	425b      	negs	r3, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 f8fc 	bl	8001f38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_InitTick+0x64>)
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b003      	add	sp, #12
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_IncTick+0x1c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	001a      	movs	r2, r3
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_IncTick+0x20>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	18d2      	adds	r2, r2, r3
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_IncTick+0x20>)
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	200001a4 	.word	0x200001a4

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <HAL_GetTick+0x10>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	200001a4 	.word	0x200001a4

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3301      	adds	r3, #1
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_Delay+0x44>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	001a      	movs	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	189b      	adds	r3, r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	f7ff ffe0 	bl	8001d84 <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	20000008 	.word	0x20000008

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	0002      	movs	r2, r0
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b7f      	cmp	r3, #127	; 0x7f
 8001df2:	d809      	bhi.n	8001e08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	001a      	movs	r2, r3
 8001dfa:	231f      	movs	r3, #31
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_EnableIRQ+0x30>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	4091      	lsls	r1, r2
 8001e04:	000a      	movs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
  }
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b7f      	cmp	r3, #127	; 0x7f
 8001e28:	d828      	bhi.n	8001e7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <__NVIC_SetPriority+0xd4>)
 8001e2c:	1dfb      	adds	r3, r7, #7
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	33c0      	adds	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	589b      	ldr	r3, [r3, r2]
 8001e3a:	1dfa      	adds	r2, r7, #7
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	0011      	movs	r1, r2
 8001e40:	2203      	movs	r2, #3
 8001e42:	400a      	ands	r2, r1
 8001e44:	00d2      	lsls	r2, r2, #3
 8001e46:	21ff      	movs	r1, #255	; 0xff
 8001e48:	4091      	lsls	r1, r2
 8001e4a:	000a      	movs	r2, r1
 8001e4c:	43d2      	mvns	r2, r2
 8001e4e:	401a      	ands	r2, r3
 8001e50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	22ff      	movs	r2, #255	; 0xff
 8001e58:	401a      	ands	r2, r3
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	2303      	movs	r3, #3
 8001e62:	4003      	ands	r3, r0
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e68:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <__NVIC_SetPriority+0xd4>)
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	430a      	orrs	r2, r1
 8001e74:	33c0      	adds	r3, #192	; 0xc0
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e7a:	e031      	b.n	8001ee0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <__NVIC_SetPriority+0xd8>)
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	0019      	movs	r1, r3
 8001e84:	230f      	movs	r3, #15
 8001e86:	400b      	ands	r3, r1
 8001e88:	3b08      	subs	r3, #8
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3306      	adds	r3, #6
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	18d3      	adds	r3, r2, r3
 8001e92:	3304      	adds	r3, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	1dfa      	adds	r2, r7, #7
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	00d2      	lsls	r2, r2, #3
 8001ea2:	21ff      	movs	r1, #255	; 0xff
 8001ea4:	4091      	lsls	r1, r2
 8001ea6:	000a      	movs	r2, r1
 8001ea8:	43d2      	mvns	r2, r2
 8001eaa:	401a      	ands	r2, r3
 8001eac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	019b      	lsls	r3, r3, #6
 8001eb2:	22ff      	movs	r2, #255	; 0xff
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	1dfb      	adds	r3, r7, #7
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	4003      	ands	r3, r0
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <__NVIC_SetPriority+0xd8>)
 8001ec6:	1dfb      	adds	r3, r7, #7
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	001c      	movs	r4, r3
 8001ecc:	230f      	movs	r3, #15
 8001ece:	4023      	ands	r3, r4
 8001ed0:	3b08      	subs	r3, #8
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	3306      	adds	r3, #6
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	18c3      	adds	r3, r0, r3
 8001edc:	3304      	adds	r3, #4
 8001ede:	601a      	str	r2, [r3, #0]
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b003      	add	sp, #12
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	045b      	lsls	r3, r3, #17
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d301      	bcc.n	8001f08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f04:	2301      	movs	r3, #1
 8001f06:	e010      	b.n	8001f2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <SysTick_Config+0x44>)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f10:	2301      	movs	r3, #1
 8001f12:	425b      	negs	r3, r3
 8001f14:	2103      	movs	r1, #3
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff ff7c 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SysTick_Config+0x44>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SysTick_Config+0x44>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	210f      	movs	r1, #15
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	1c02      	adds	r2, r0, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ff5d 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b004      	add	sp, #16
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	0002      	movs	r2, r0
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff ff33 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff ffaf 	bl	8001ef0 <SysTick_Config>
 8001f92:	0003      	movs	r3, r0
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2225      	movs	r2, #37	; 0x25
 8001fb0:	5c9b      	ldrb	r3, [r3, r2]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d008      	beq.n	8001fca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2224      	movs	r2, #36	; 0x24
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e024      	b.n	8002014 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	210e      	movs	r1, #14
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	221c      	movs	r2, #28
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4091      	lsls	r1, r2
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2225      	movs	r2, #37	; 0x25
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2224      	movs	r2, #36	; 0x24
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]

    return status;
 800200e:	230f      	movs	r3, #15
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	210f      	movs	r1, #15
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2225      	movs	r2, #37	; 0x25
 8002030:	5c9b      	ldrb	r3, [r3, r2]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d006      	beq.n	8002046 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2204      	movs	r2, #4
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800203e:	187b      	adds	r3, r7, r1
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e02a      	b.n	800209c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	210e      	movs	r1, #14
 8002052:	438a      	bics	r2, r1
 8002054:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	438a      	bics	r2, r1
 8002064:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	221c      	movs	r2, #28
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2101      	movs	r1, #1
 8002074:	4091      	lsls	r1, r2
 8002076:	000a      	movs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2225      	movs	r2, #37	; 0x25
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2224      	movs	r2, #36	; 0x24
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	0010      	movs	r0, r2
 800209a:	4798      	blx	r3
    }
  }
  return status;
 800209c:	230f      	movs	r3, #15
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80020c2:	e155      	b.n	8002370 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4091      	lsls	r1, r2
 80020ce:	000a      	movs	r2, r1
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d100      	bne.n	80020dc <HAL_GPIO_Init+0x30>
 80020da:	e146      	b.n	800236a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2203      	movs	r2, #3
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d005      	beq.n	80020f4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d130      	bne.n	8002156 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	409a      	lsls	r2, r3
 8002102:	0013      	movs	r3, r2
 8002104:	43da      	mvns	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	409a      	lsls	r2, r3
 8002116:	0013      	movs	r3, r2
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212a:	2201      	movs	r2, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	43da      	mvns	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	2201      	movs	r2, #1
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
 8002148:	0013      	movs	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2203      	movs	r2, #3
 800215c:	4013      	ands	r3, r2
 800215e:	2b03      	cmp	r3, #3
 8002160:	d017      	beq.n	8002192 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	409a      	lsls	r2, r3
 8002170:	0013      	movs	r3, r2
 8002172:	43da      	mvns	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	4013      	ands	r3, r2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d123      	bne.n	80021e6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	58d3      	ldr	r3, [r2, r3]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2207      	movs	r2, #7
 80021b0:	4013      	ands	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	43da      	mvns	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2107      	movs	r1, #7
 80021ca:	400b      	ands	r3, r1
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	43da      	mvns	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	401a      	ands	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	4013      	ands	r3, r2
 8002224:	d100      	bne.n	8002228 <HAL_GPIO_Init+0x17c>
 8002226:	e0a0      	b.n	800236a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002228:	4b57      	ldr	r3, [pc, #348]	; (8002388 <HAL_GPIO_Init+0x2dc>)
 800222a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_GPIO_Init+0x2dc>)
 800222e:	2101      	movs	r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002234:	4a55      	ldr	r2, [pc, #340]	; (800238c <HAL_GPIO_Init+0x2e0>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	589b      	ldr	r3, [r3, r2]
 8002240:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2203      	movs	r2, #3
 8002246:	4013      	ands	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	409a      	lsls	r2, r3
 800224e:	0013      	movs	r3, r2
 8002250:	43da      	mvns	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	23a0      	movs	r3, #160	; 0xa0
 800225c:	05db      	lsls	r3, r3, #23
 800225e:	429a      	cmp	r2, r3
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x1f6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <HAL_GPIO_Init+0x2e4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x1f2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a49      	ldr	r2, [pc, #292]	; (8002394 <HAL_GPIO_Init+0x2e8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x1ee>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_GPIO_Init+0x2ec>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x1ea>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a47      	ldr	r2, [pc, #284]	; (800239c <HAL_GPIO_Init+0x2f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x1e6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a46      	ldr	r2, [pc, #280]	; (80023a0 <HAL_GPIO_Init+0x2f4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x1e2>
 800228a:	2305      	movs	r3, #5
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x1f8>
 800228e:	2306      	movs	r3, #6
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x1f8>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x1f8>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x1f8>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x1f8>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x1f8>
 80022a2:	2300      	movs	r3, #0
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	2103      	movs	r1, #3
 80022a8:	400a      	ands	r2, r1
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x2e0>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43da      	mvns	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	035b      	lsls	r3, r3, #13
 80022da:	4013      	ands	r3, r2
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022e6:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	039b      	lsls	r3, r3, #14
 8002304:	4013      	ands	r3, r2
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	029b      	lsls	r3, r3, #10
 800232e:	4013      	ands	r3, r2
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43da      	mvns	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	4013      	ands	r3, r2
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	40da      	lsrs	r2, r3
 8002378:	1e13      	subs	r3, r2, #0
 800237a:	d000      	beq.n	800237e <HAL_GPIO_Init+0x2d2>
 800237c:	e6a2      	b.n	80020c4 <HAL_GPIO_Init+0x18>
  }
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b006      	add	sp, #24
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	50000400 	.word	0x50000400
 8002394:	50000800 	.word	0x50000800
 8002398:	50000c00 	.word	0x50000c00
 800239c:	50001000 	.word	0x50001000
 80023a0:	50001c00 	.word	0x50001c00
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	1cba      	adds	r2, r7, #2
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	4013      	ands	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e003      	b.n	80023d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	0008      	movs	r0, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	1c02      	adds	r2, r0, #0
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	1c7b      	adds	r3, r7, #1
 80023f6:	1c0a      	adds	r2, r1, #0
 80023f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fa:	1c7b      	adds	r3, r7, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	881a      	ldrh	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800240a:	e003      	b.n	8002414 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800240c:	1cbb      	adds	r3, r7, #2
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	0002      	movs	r2, r0
 8002424:	1dbb      	adds	r3, r7, #6
 8002426:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	1dba      	adds	r2, r7, #6
 800242e:	8812      	ldrh	r2, [r2, #0]
 8002430:	4013      	ands	r3, r2
 8002432:	d008      	beq.n	8002446 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002436:	1dba      	adds	r2, r7, #6
 8002438:	8812      	ldrh	r2, [r2, #0]
 800243a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800243c:	1dbb      	adds	r3, r7, #6
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f807 	bl	8002454 <HAL_GPIO_EXTI_Callback>
  }
}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b002      	add	sp, #8
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f000 fbbf 	bl	8002bfa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247c:	4bc9      	ldr	r3, [pc, #804]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	220c      	movs	r2, #12
 8002482:	4013      	ands	r3, r2
 8002484:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002486:	4bc7      	ldr	r3, [pc, #796]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2201      	movs	r2, #1
 8002498:	4013      	ands	r3, r2
 800249a:	d100      	bne.n	800249e <HAL_RCC_OscConfig+0x36>
 800249c:	e07e      	b.n	800259c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d007      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x68>
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	025b      	lsls	r3, r3, #9
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4bbb      	ldr	r3, [pc, #748]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	029b      	lsls	r3, r3, #10
 80024bc:	4013      	ands	r3, r2
 80024be:	d100      	bne.n	80024c2 <HAL_RCC_OscConfig+0x5a>
 80024c0:	e06b      	b.n	800259a <HAL_RCC_OscConfig+0x132>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d167      	bne.n	800259a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f000 fb95 	bl	8002bfa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x84>
 80024dc:	4bb1      	ldr	r3, [pc, #708]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4bb0      	ldr	r3, [pc, #704]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	0249      	lsls	r1, r1, #9
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e027      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	23a0      	movs	r3, #160	; 0xa0
 80024f2:	02db      	lsls	r3, r3, #11
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d10e      	bne.n	8002516 <HAL_RCC_OscConfig+0xae>
 80024f8:	4baa      	ldr	r3, [pc, #680]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4ba9      	ldr	r3, [pc, #676]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	02c9      	lsls	r1, r1, #11
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	4ba7      	ldr	r3, [pc, #668]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4ba6      	ldr	r3, [pc, #664]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	0249      	lsls	r1, r1, #9
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e012      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 8002516:	4ba3      	ldr	r3, [pc, #652]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4ba2      	ldr	r3, [pc, #648]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800251c:	49a2      	ldr	r1, [pc, #648]	; (80027a8 <HAL_RCC_OscConfig+0x340>)
 800251e:	400a      	ands	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	4ba0      	ldr	r3, [pc, #640]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	4013      	ands	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4b9c      	ldr	r3, [pc, #624]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b9b      	ldr	r3, [pc, #620]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002536:	499d      	ldr	r1, [pc, #628]	; (80027ac <HAL_RCC_OscConfig+0x344>)
 8002538:	400a      	ands	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fc1e 	bl	8001d84 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800254c:	e009      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254e:	f7ff fc19 	bl	8001d84 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d902      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	f000 fb4c 	bl	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002562:	4b90      	ldr	r3, [pc, #576]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	029b      	lsls	r3, r3, #10
 800256a:	4013      	ands	r3, r2
 800256c:	d0ef      	beq.n	800254e <HAL_RCC_OscConfig+0xe6>
 800256e:	e015      	b.n	800259c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fc08 	bl	8001d84 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257a:	f7ff fc03 	bl	8001d84 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e336      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800258c:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	4013      	ands	r3, r2
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x112>
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d100      	bne.n	80025a8 <HAL_RCC_OscConfig+0x140>
 80025a6:	e099      	b.n	80026dc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	2220      	movs	r2, #32
 80025b2:	4013      	ands	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80025b6:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b7a      	ldr	r3, [pc, #488]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80025bc:	2120      	movs	r1, #32
 80025be:	430a      	orrs	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2220      	movs	r2, #32
 80025c6:	4393      	bics	r3, r2
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d13e      	bne.n	8002654 <HAL_RCC_OscConfig+0x1ec>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d13b      	bne.n	8002654 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80025dc:	4b71      	ldr	r3, [pc, #452]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2204      	movs	r2, #4
 80025e2:	4013      	ands	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_RCC_OscConfig+0x188>
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e304      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a6e      	ldr	r2, [pc, #440]	; (80027b0 <HAL_RCC_OscConfig+0x348>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	021a      	lsls	r2, r3, #8
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2209      	movs	r2, #9
 800260c:	4393      	bics	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002618:	f000 fc42 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800261c:	0001      	movs	r1, r0
 800261e:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	220f      	movs	r2, #15
 8002626:	4013      	ands	r3, r2
 8002628:	4a62      	ldr	r2, [pc, #392]	; (80027b4 <HAL_RCC_OscConfig+0x34c>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	000a      	movs	r2, r1
 800262e:	40da      	lsrs	r2, r3
 8002630:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <HAL_RCC_OscConfig+0x350>)
 8002632:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCC_OscConfig+0x354>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2513      	movs	r5, #19
 800263a:	197c      	adds	r4, r7, r5
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff fb5b 	bl	8001cf8 <HAL_InitTick>
 8002642:	0003      	movs	r3, r0
 8002644:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002646:	197b      	adds	r3, r7, r5
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d046      	beq.n	80026dc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800264e:	197b      	adds	r3, r7, r5
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	e2d2      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d027      	beq.n	80026aa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800265a:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2209      	movs	r2, #9
 8002660:	4393      	bics	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	4b4f      	ldr	r3, [pc, #316]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff fb8a 	bl	8001d84 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002676:	f7ff fb85 	bl	8001d84 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e2b8      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002688:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2204      	movs	r2, #4
 800268e:	4013      	ands	r3, r2
 8002690:	d0f1      	beq.n	8002676 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a46      	ldr	r2, [pc, #280]	; (80027b0 <HAL_RCC_OscConfig+0x348>)
 8002698:	4013      	ands	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	021a      	lsls	r2, r3, #8
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	e018      	b.n	80026dc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	438a      	bics	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fb65 	bl	8001d84 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff fb60 	bl	8001d84 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e293      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026d2:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2204      	movs	r2, #4
 80026d8:	4013      	ands	r3, r2
 80026da:	d1f1      	bne.n	80026c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2210      	movs	r2, #16
 80026e2:	4013      	ands	r3, r2
 80026e4:	d100      	bne.n	80026e8 <HAL_RCC_OscConfig+0x280>
 80026e6:	e0a2      	b.n	800282e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d140      	bne.n	8002770 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x29e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e279      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_RCC_OscConfig+0x358>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	0a19      	lsrs	r1, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	061a      	lsls	r2, r3, #24
 8002728:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	3301      	adds	r3, #1
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	0212      	lsls	r2, r2, #8
 800273a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	210f      	movs	r1, #15
 8002744:	400b      	ands	r3, r1
 8002746:	491b      	ldr	r1, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x34c>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_RCC_OscConfig+0x350>)
 800274e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_OscConfig+0x354>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2513      	movs	r5, #19
 8002756:	197c      	adds	r4, r7, r5
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff facd 	bl	8001cf8 <HAL_InitTick>
 800275e:	0003      	movs	r3, r0
 8002760:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002762:	197b      	adds	r3, r7, r5
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d061      	beq.n	800282e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800276a:	197b      	adds	r3, r7, r5
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	e244      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d040      	beq.n	80027fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_OscConfig+0x33c>)
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	0049      	lsls	r1, r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7ff fafd 	bl	8001d84 <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800278e:	e019      	b.n	80027c4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002790:	f7ff faf8 	bl	8001d84 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d912      	bls.n	80027c4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e22b      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	40021000 	.word	0x40021000
 80027a8:	fffeffff 	.word	0xfffeffff
 80027ac:	fffbffff 	.word	0xfffbffff
 80027b0:	ffffe0ff 	.word	0xffffe0ff
 80027b4:	080058e8 	.word	0x080058e8
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000004 	.word	0x20000004
 80027c0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027c4:	4bca      	ldr	r3, [pc, #808]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d0df      	beq.n	8002790 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d0:	4bc7      	ldr	r3, [pc, #796]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4ac7      	ldr	r2, [pc, #796]	; (8002af4 <HAL_RCC_OscConfig+0x68c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027de:	4bc4      	ldr	r3, [pc, #784]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e4:	4bc2      	ldr	r3, [pc, #776]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	0a19      	lsrs	r1, r3, #8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	061a      	lsls	r2, r3, #24
 80027f2:	4bbf      	ldr	r3, [pc, #764]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	e019      	b.n	800282e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027fa:	4bbd      	ldr	r3, [pc, #756]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4bbc      	ldr	r3, [pc, #752]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002800:	49bd      	ldr	r1, [pc, #756]	; (8002af8 <HAL_RCC_OscConfig+0x690>)
 8002802:	400a      	ands	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff fabd 	bl	8001d84 <HAL_GetTick>
 800280a:	0003      	movs	r3, r0
 800280c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002810:	f7ff fab8 	bl	8001d84 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1eb      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002822:	4bb3      	ldr	r3, [pc, #716]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4013      	ands	r3, r2
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2208      	movs	r2, #8
 8002834:	4013      	ands	r3, r2
 8002836:	d036      	beq.n	80028a6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d019      	beq.n	8002874 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002840:	4bab      	ldr	r3, [pc, #684]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002844:	4baa      	ldr	r3, [pc, #680]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002846:	2101      	movs	r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284c:	f7ff fa9a 	bl	8001d84 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002856:	f7ff fa95 	bl	8001d84 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1c8      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002868:	4ba1      	ldr	r3, [pc, #644]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800286a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d0f1      	beq.n	8002856 <HAL_RCC_OscConfig+0x3ee>
 8002872:	e018      	b.n	80028a6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002874:	4b9e      	ldr	r3, [pc, #632]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002878:	4b9d      	ldr	r3, [pc, #628]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800287a:	2101      	movs	r1, #1
 800287c:	438a      	bics	r2, r1
 800287e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002880:	f7ff fa80 	bl	8001d84 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288a:	f7ff fa7b 	bl	8001d84 <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1ae      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800289c:	4b94      	ldr	r3, [pc, #592]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d1f1      	bne.n	800288a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d100      	bne.n	80028b2 <HAL_RCC_OscConfig+0x44a>
 80028b0:	e0ae      	b.n	8002a10 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2023      	movs	r0, #35	; 0x23
 80028b4:	183b      	adds	r3, r7, r0
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80028bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	055b      	lsls	r3, r3, #21
 80028c2:	4013      	ands	r3, r2
 80028c4:	d109      	bne.n	80028da <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b8a      	ldr	r3, [pc, #552]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80028c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0549      	lsls	r1, r1, #21
 80028d0:	430a      	orrs	r2, r1
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80028d4:	183b      	adds	r3, r7, r0
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x694>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4013      	ands	r3, r2
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e6:	4b85      	ldr	r3, [pc, #532]	; (8002afc <HAL_RCC_OscConfig+0x694>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b84      	ldr	r3, [pc, #528]	; (8002afc <HAL_RCC_OscConfig+0x694>)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	0049      	lsls	r1, r1, #1
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f4:	f7ff fa46 	bl	8001d84 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7ff fa41 	bl	8001d84 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e174      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x694>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4013      	ands	r3, r2
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	429a      	cmp	r2, r3
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x4d0>
 8002928:	4b71      	ldr	r3, [pc, #452]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800292a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800292c:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	0049      	lsls	r1, r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	651a      	str	r2, [r3, #80]	; 0x50
 8002936:	e031      	b.n	800299c <HAL_RCC_OscConfig+0x534>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x4f2>
 8002940:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002946:	496c      	ldr	r1, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x690>)
 8002948:	400a      	ands	r2, r1
 800294a:	651a      	str	r2, [r3, #80]	; 0x50
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800294e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002952:	496b      	ldr	r1, [pc, #428]	; (8002b00 <HAL_RCC_OscConfig+0x698>)
 8002954:	400a      	ands	r2, r1
 8002956:	651a      	str	r2, [r3, #80]	; 0x50
 8002958:	e020      	b.n	800299c <HAL_RCC_OscConfig+0x534>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	23a0      	movs	r3, #160	; 0xa0
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	429a      	cmp	r2, r3
 8002964:	d10e      	bne.n	8002984 <HAL_RCC_OscConfig+0x51c>
 8002966:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800296a:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	00c9      	lsls	r1, r1, #3
 8002970:	430a      	orrs	r2, r1
 8002972:	651a      	str	r2, [r3, #80]	; 0x50
 8002974:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002978:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	0049      	lsls	r1, r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x534>
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 800298a:	495b      	ldr	r1, [pc, #364]	; (8002af8 <HAL_RCC_OscConfig+0x690>)
 800298c:	400a      	ands	r2, r1
 800298e:	651a      	str	r2, [r3, #80]	; 0x50
 8002990:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002994:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002996:	495a      	ldr	r1, [pc, #360]	; (8002b00 <HAL_RCC_OscConfig+0x698>)
 8002998:	400a      	ands	r2, r1
 800299a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a4:	f7ff f9ee 	bl	8001d84 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7ff f9e9 	bl	8001d84 <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_RCC_OscConfig+0x69c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e11b      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c2:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80029c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d0ef      	beq.n	80029ae <HAL_RCC_OscConfig+0x546>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7ff f9d8 	bl	8001d84 <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d8:	e009      	b.n	80029ee <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff f9d3 	bl	8001d84 <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	4a47      	ldr	r2, [pc, #284]	; (8002b04 <HAL_RCC_OscConfig+0x69c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e105      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ee:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 80029f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	d1ef      	bne.n	80029da <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029fa:	2323      	movs	r3, #35	; 0x23
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a0a:	493f      	ldr	r1, [pc, #252]	; (8002b08 <HAL_RCC_OscConfig+0x6a0>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2220      	movs	r2, #32
 8002a16:	4013      	ands	r3, r2
 8002a18:	d049      	beq.n	8002aae <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d026      	beq.n	8002a70 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002a22:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	430a      	orrs	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3a:	4b34      	ldr	r3, [pc, #208]	; (8002b0c <HAL_RCC_OscConfig+0x6a4>)
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_RCC_OscConfig+0x6a4>)
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	0189      	lsls	r1, r1, #6
 8002a44:	430a      	orrs	r2, r1
 8002a46:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff f99c 	bl	8001d84 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a52:	f7ff f997 	bl	8001d84 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0ca      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d0f1      	beq.n	8002a52 <HAL_RCC_OscConfig+0x5ea>
 8002a6e:	e01e      	b.n	8002aae <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	438a      	bics	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_RCC_OscConfig+0x6a4>)
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_RCC_OscConfig+0x6a4>)
 8002a82:	4923      	ldr	r1, [pc, #140]	; (8002b10 <HAL_RCC_OscConfig+0x6a8>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff f97c 	bl	8001d84 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7ff f977 	bl	8001d84 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0aa      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d1f1      	bne.n	8002a92 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d100      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x650>
 8002ab6:	e09f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d100      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x658>
 8002abe:	e078      	b.n	8002bb2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d159      	bne.n	8002b7c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x688>)
 8002ace:	4911      	ldr	r1, [pc, #68]	; (8002b14 <HAL_RCC_OscConfig+0x6ac>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f956 	bl	8001d84 <HAL_GetTick>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7ff f951 	bl	8001d84 <HAL_GetTick>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d915      	bls.n	8002b18 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e084      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
 8002af0:	40021000 	.word	0x40021000
 8002af4:	ffff1fff 	.word	0xffff1fff
 8002af8:	fffffeff 	.word	0xfffffeff
 8002afc:	40007000 	.word	0x40007000
 8002b00:	fffffbff 	.word	0xfffffbff
 8002b04:	00001388 	.word	0x00001388
 8002b08:	efffffff 	.word	0xefffffff
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	ffffdfff 	.word	0xffffdfff
 8002b14:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	049b      	lsls	r3, r3, #18
 8002b20:	4013      	ands	r3, r2
 8002b22:	d1dc      	bne.n	8002ade <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a37      	ldr	r2, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x7a0>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0449      	lsls	r1, r1, #17
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7ff f917 	bl	8001d84 <HAL_GetTick>
 8002b56:	0003      	movs	r3, r0
 8002b58:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7ff f912 	bl	8001d84 <HAL_GetTick>
 8002b60:	0002      	movs	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e045      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	049b      	lsls	r3, r3, #18
 8002b76:	4013      	ands	r3, r2
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x6f4>
 8002b7a:	e03d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002b82:	4922      	ldr	r1, [pc, #136]	; (8002c0c <HAL_RCC_OscConfig+0x7a4>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f8fc 	bl	8001d84 <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7ff f8f7 	bl	8001d84 <HAL_GetTick>
 8002b96:	0002      	movs	r2, r0
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e02a      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ba4:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	049b      	lsls	r3, r3, #18
 8002bac:	4013      	ands	r3, r2
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x72a>
 8002bb0:	e022      	b.n	8002bf8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e01d      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_OscConfig+0x79c>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	025b      	lsls	r3, r3, #9
 8002bca:	401a      	ands	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	23f0      	movs	r3, #240	; 0xf0
 8002bd8:	039b      	lsls	r3, r3, #14
 8002bda:	401a      	ands	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	23c0      	movs	r3, #192	; 0xc0
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	401a      	ands	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b00a      	add	sp, #40	; 0x28
 8002c00:	bdb0      	pop	{r4, r5, r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	ff02ffff 	.word	0xff02ffff
 8002c0c:	feffffff 	.word	0xfeffffff

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e128      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b96      	ldr	r3, [pc, #600]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d91e      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b93      	ldr	r3, [pc, #588]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	4393      	bics	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	4b90      	ldr	r3, [pc, #576]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c44:	f7ff f89e 	bl	8001d84 <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	e009      	b.n	8002c62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4e:	f7ff f899 	bl	8001d84 <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	4a8a      	ldr	r2, [pc, #552]	; (8002e84 <HAL_RCC_ClockConfig+0x274>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e109      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2201      	movs	r2, #1
 8002c68:	4013      	ands	r3, r2
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1ee      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7a:	4b83      	ldr	r3, [pc, #524]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	22f0      	movs	r2, #240	; 0xf0
 8002c80:	4393      	bics	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b7f      	ldr	r3, [pc, #508]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2201      	movs	r2, #1
 8002c94:	4013      	ands	r3, r2
 8002c96:	d100      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x8a>
 8002c98:	e089      	b.n	8002dae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ca2:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	029b      	lsls	r3, r3, #10
 8002caa:	4013      	ands	r3, r2
 8002cac:	d120      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0e1      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cba:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	049b      	lsls	r3, r3, #18
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d114      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0d5      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd2:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0ca      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ce0:	4b69      	ldr	r3, [pc, #420]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0c2      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf0:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7ff f83e 	bl	8001d84 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d14:	e009      	b.n	8002d2a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d16:	f7ff f835 	bl	8001d84 <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_RCC_ClockConfig+0x274>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0a5      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d2a:	4b57      	ldr	r3, [pc, #348]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	220c      	movs	r2, #12
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d1ef      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x106>
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d111      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d40:	e009      	b.n	8002d56 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d42:	f7ff f81f 	bl	8001d84 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	4a4d      	ldr	r2, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x274>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e08f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d56:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d1ef      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x132>
 8002d62:	e024      	b.n	8002dae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d11b      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6e:	f7ff f809 	bl	8001d84 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	4a42      	ldr	r2, [pc, #264]	; (8002e84 <HAL_RCC_ClockConfig+0x274>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e079      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	220c      	movs	r2, #12
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d1ef      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x15e>
 8002d8e:	e00e      	b.n	8002dae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fff8 	bl	8001d84 <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_RCC_ClockConfig+0x274>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e068      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	220c      	movs	r2, #12
 8002daa:	4013      	ands	r3, r2
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d21e      	bcs.n	8002dfa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4393      	bics	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dce:	f7fe ffd9 	bl	8001d84 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	e009      	b.n	8002dec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe ffd4 	bl	8001d84 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_RCC_ClockConfig+0x274>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e044      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	4013      	ands	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <HAL_RCC_ClockConfig+0x27c>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_RCC_ClockConfig+0x280>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	00da      	lsls	r2, r3, #3
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e38:	f000 f832 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e3c:	0001      	movs	r1, r0
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x278>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	220f      	movs	r2, #15
 8002e46:	4013      	ands	r3, r2
 8002e48:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <HAL_RCC_ClockConfig+0x284>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	40da      	lsrs	r2, r3
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_RCC_ClockConfig+0x288>)
 8002e52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_RCC_ClockConfig+0x28c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	250b      	movs	r5, #11
 8002e5a:	197c      	adds	r4, r7, r5
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f7fe ff4b 	bl	8001cf8 <HAL_InitTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e66:	197b      	adds	r3, r7, r5
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002e6e:	197b      	adds	r3, r7, r5
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	40022000 	.word	0x40022000
 8002e84:	00001388 	.word	0x00001388
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	fffff8ff 	.word	0xfffff8ff
 8002e90:	ffffc7ff 	.word	0xffffc7ff
 8002e94:	080058e8 	.word	0x080058e8
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b08e      	sub	sp, #56	; 0x38
 8002ea4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ea6:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eae:	230c      	movs	r3, #12
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d014      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb6:	d900      	bls.n	8002eba <HAL_RCC_GetSysClockFreq+0x1a>
 8002eb8:	e07b      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x112>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x24>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec2:	e076      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ec4:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2210      	movs	r2, #16
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ece:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ed2:	e07c      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ed4:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ed6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ed8:	e079      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eda:	4b42      	ldr	r3, [pc, #264]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ede:	e076      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	0c9a      	lsrs	r2, r3, #18
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002eea:	5c9b      	ldrb	r3, [r3, r2]
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	0d9a      	lsrs	r2, r3, #22
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	025b      	lsls	r3, r3, #9
 8002f02:	4013      	ands	r3, r2
 8002f04:	d01a      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f10:	2300      	movs	r3, #0
 8002f12:	69b8      	ldr	r0, [r7, #24]
 8002f14:	69f9      	ldr	r1, [r7, #28]
 8002f16:	f7fd f9a3 	bl	8000260 <__aeabi_lmul>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	000b      	movs	r3, r1
 8002f1e:	0010      	movs	r0, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f7fd f977 	bl	8000220 <__aeabi_uldivmod>
 8002f32:	0002      	movs	r2, r0
 8002f34:	000b      	movs	r3, r1
 8002f36:	0013      	movs	r3, r2
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3a:	e037      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f3c:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2210      	movs	r2, #16
 8002f42:	4013      	ands	r3, r2
 8002f44:	d01a      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f50:	2300      	movs	r3, #0
 8002f52:	68b8      	ldr	r0, [r7, #8]
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	f7fd f983 	bl	8000260 <__aeabi_lmul>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	000b      	movs	r3, r1
 8002f5e:	0010      	movs	r0, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f7fd f957 	bl	8000220 <__aeabi_uldivmod>
 8002f72:	0002      	movs	r2, r0
 8002f74:	000b      	movs	r3, r1
 8002f76:	0013      	movs	r3, r2
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7a:	e017      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	0018      	movs	r0, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	0019      	movs	r1, r3
 8002f84:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f86:	2300      	movs	r3, #0
 8002f88:	f7fd f96a 	bl	8000260 <__aeabi_lmul>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	000b      	movs	r3, r1
 8002f90:	0010      	movs	r0, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	001c      	movs	r4, r3
 8002f98:	2300      	movs	r3, #0
 8002f9a:	001d      	movs	r5, r3
 8002f9c:	0022      	movs	r2, r4
 8002f9e:	002b      	movs	r3, r5
 8002fa0:	f7fd f93e 	bl	8000220 <__aeabi_uldivmod>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	0013      	movs	r3, r2
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb0:	e00d      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	0b5b      	lsrs	r3, r3, #13
 8002fb8:	2207      	movs	r2, #7
 8002fba:	4013      	ands	r3, r2
 8002fbc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	0212      	lsls	r2, r2, #8
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	0013      	movs	r3, r2
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fcc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b00e      	add	sp, #56	; 0x38
 8002fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	003d0900 	.word	0x003d0900
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	007a1200 	.word	0x007a1200
 8002fe8:	08005900 	.word	0x08005900

08002fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	20000000 	.word	0x20000000

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003004:	f7ff fff2 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003008:	0001      	movs	r1, r0
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	2207      	movs	r2, #7
 8003012:	4013      	ands	r3, r2
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	40d9      	lsrs	r1, r3
 800301a:	000b      	movs	r3, r1
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40021000 	.word	0x40021000
 8003028:	080058f8 	.word	0x080058f8

0800302c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003030:	f7ff ffdc 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003034:	0001      	movs	r1, r0
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	0adb      	lsrs	r3, r3, #11
 800303c:	2207      	movs	r2, #7
 800303e:	4013      	ands	r3, r2
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	40d9      	lsrs	r1, r3
 8003046:	000b      	movs	r3, r1
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	40021000 	.word	0x40021000
 8003054:	080058f8 	.word	0x080058f8

08003058 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003060:	2017      	movs	r0, #23
 8003062:	183b      	adds	r3, r7, r0
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2220      	movs	r2, #32
 800306e:	4013      	ands	r3, r2
 8003070:	d100      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003072:	e0c7      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003074:	4b9b      	ldr	r3, [pc, #620]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	055b      	lsls	r3, r3, #21
 800307c:	4013      	ands	r3, r2
 800307e:	d109      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b98      	ldr	r3, [pc, #608]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003084:	4b97      	ldr	r3, [pc, #604]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	0549      	lsls	r1, r1, #21
 800308a:	430a      	orrs	r2, r1
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800308e:	183b      	adds	r3, r7, r0
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b94      	ldr	r3, [pc, #592]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d11a      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a0:	4b91      	ldr	r3, [pc, #580]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b90      	ldr	r3, [pc, #576]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0049      	lsls	r1, r1, #1
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ae:	f7fe fe69 	bl	8001d84 <HAL_GetTick>
 80030b2:	0003      	movs	r3, r0
 80030b4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	e008      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe fe64 	bl	8001d84 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e107      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b87      	ldr	r3, [pc, #540]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80030d6:	4b83      	ldr	r3, [pc, #524]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	23c0      	movs	r3, #192	; 0xc0
 80030dc:	039b      	lsls	r3, r3, #14
 80030de:	4013      	ands	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	23c0      	movs	r3, #192	; 0xc0
 80030e8:	039b      	lsls	r3, r3, #14
 80030ea:	4013      	ands	r3, r2
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d013      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	23c0      	movs	r3, #192	; 0xc0
 80030f8:	029b      	lsls	r3, r3, #10
 80030fa:	401a      	ands	r2, r3
 80030fc:	23c0      	movs	r3, #192	; 0xc0
 80030fe:	029b      	lsls	r3, r3, #10
 8003100:	429a      	cmp	r2, r3
 8003102:	d10a      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003104:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	029b      	lsls	r3, r3, #10
 800310c:	401a      	ands	r2, r3
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	429a      	cmp	r2, r3
 8003114:	d101      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0df      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800311a:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800311c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800311e:	23c0      	movs	r3, #192	; 0xc0
 8003120:	029b      	lsls	r3, r3, #10
 8003122:	4013      	ands	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03b      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	23c0      	movs	r3, #192	; 0xc0
 8003132:	029b      	lsls	r3, r3, #10
 8003134:	4013      	ands	r3, r2
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	429a      	cmp	r2, r3
 800313a:	d033      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	4013      	ands	r3, r2
 8003144:	d02e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003146:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	4a68      	ldr	r2, [pc, #416]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003150:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003154:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	0309      	lsls	r1, r1, #12
 800315a:	430a      	orrs	r2, r1
 800315c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800315e:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003162:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003164:	4962      	ldr	r1, [pc, #392]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003166:	400a      	ands	r2, r1
 8003168:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800316a:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4013      	ands	r3, r2
 8003178:	d014      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fe03 	bl	8001d84 <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fdfe 	bl	8001d84 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a59      	ldr	r2, [pc, #356]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0a0      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003198:	4b52      	ldr	r3, [pc, #328]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800319a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	d0ef      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2220      	movs	r2, #32
 80031aa:	4013      	ands	r3, r2
 80031ac:	d01f      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	23c0      	movs	r3, #192	; 0xc0
 80031b4:	029b      	lsls	r3, r3, #10
 80031b6:	401a      	ands	r2, r3
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	429a      	cmp	r2, r3
 80031be:	d10c      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x182>
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a4c      	ldr	r2, [pc, #304]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	23c0      	movs	r3, #192	; 0xc0
 80031d0:	039b      	lsls	r3, r3, #14
 80031d2:	401a      	ands	r2, r3
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80031dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	029b      	lsls	r3, r3, #10
 80031e6:	401a      	ands	r2, r3
 80031e8:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ee:	2317      	movs	r3, #23
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80031fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80031fe:	493f      	ldr	r1, [pc, #252]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003200:	400a      	ands	r2, r1
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2201      	movs	r2, #1
 800320a:	4013      	ands	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320e:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	2203      	movs	r2, #3
 8003214:	4393      	bics	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800321e:	430a      	orrs	r2, r1
 8003220:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2202      	movs	r2, #2
 8003228:	4013      	ands	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	220c      	movs	r2, #12
 8003232:	4393      	bics	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800323c:	430a      	orrs	r2, r1
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2204      	movs	r2, #4
 8003246:	4013      	ands	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4a2c      	ldr	r2, [pc, #176]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800325a:	430a      	orrs	r2, r1
 800325c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2208      	movs	r2, #8
 8003264:	4013      	ands	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	4a25      	ldr	r2, [pc, #148]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003278:	430a      	orrs	r2, r1
 800327a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4013      	ands	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800328a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800328e:	4013      	ands	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003298:	430a      	orrs	r2, r1
 800329a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2240      	movs	r2, #64	; 0x40
 80032a2:	4013      	ands	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	4013      	ands	r3, r2
 80032c2:	d009      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80032c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c8:	4a10      	ldr	r2, [pc, #64]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	0019      	movs	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80032d4:	430a      	orrs	r2, r1
 80032d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	fffcffff 	.word	0xfffcffff
 80032f0:	fff7ffff 	.word	0xfff7ffff
 80032f4:	00001388 	.word	0x00001388
 80032f8:	ffcfffff 	.word	0xffcfffff
 80032fc:	efffffff 	.word	0xefffffff
 8003300:	fffff3ff 	.word	0xfffff3ff
 8003304:	ffffcfff 	.word	0xffffcfff
 8003308:	fbffffff 	.word	0xfbffffff
 800330c:	fff3ffff 	.word	0xfff3ffff

08003310 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003310:	b5b0      	push	{r4, r5, r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003318:	230f      	movs	r3, #15
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e088      	b.n	800343c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2221      	movs	r2, #33	; 0x21
 800332e:	5c9b      	ldrb	r3, [r3, r2]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0018      	movs	r0, r3
 8003342:	f7fe fb45 	bl	80019d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	2102      	movs	r1, #2
 800334c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2210      	movs	r2, #16
 8003356:	4013      	ands	r3, r2
 8003358:	2b10      	cmp	r3, #16
 800335a:	d05f      	beq.n	800341c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	22ca      	movs	r2, #202	; 0xca
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2253      	movs	r2, #83	; 0x53
 800336a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800336c:	250f      	movs	r5, #15
 800336e:	197c      	adds	r4, r7, r5
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fb86 	bl	8003a84 <RTC_EnterInitMode>
 8003378:	0003      	movs	r3, r0
 800337a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800337c:	0028      	movs	r0, r5
 800337e:	183b      	adds	r3, r7, r0
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d12c      	bne.n	80033e0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	492c      	ldr	r1, [pc, #176]	; (8003444 <HAL_RTC_Init+0x134>)
 8003392:	400a      	ands	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68d2      	ldr	r2, [r2, #12]
 80033bc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6919      	ldr	r1, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033d2:	183c      	adds	r4, r7, r0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fb98 	bl	8003b0c <RTC_ExitInitMode>
 80033dc:	0003      	movs	r3, r0
 80033de:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80033e0:	230f      	movs	r3, #15
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d113      	bne.n	8003412 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2103      	movs	r1, #3
 80033f6:	438a      	bics	r2, r1
 80033f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	22ff      	movs	r2, #255	; 0xff
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
 800341a:	e003      	b.n	8003424 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800341c:	230f      	movs	r3, #15
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003424:	230f      	movs	r3, #15
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003436:	230f      	movs	r3, #15
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	781b      	ldrb	r3, [r3, #0]
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b004      	add	sp, #16
 8003442:	bdb0      	pop	{r4, r5, r7, pc}
 8003444:	ff8fffbf 	.word	0xff8fffbf

08003448 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003448:	b5b0      	push	{r4, r5, r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	5c9b      	ldrb	r3, [r3, r2]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_RTC_SetTime+0x1e>
 8003462:	2302      	movs	r3, #2
 8003464:	e092      	b.n	800358c <HAL_RTC_SetTime+0x144>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	2102      	movs	r1, #2
 8003474:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d125      	bne.n	80034c8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2240      	movs	r2, #64	; 0x40
 8003484:	4013      	ands	r3, r2
 8003486:	d102      	bne.n	800348e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fb64 	bl	8003b60 <RTC_ByteToBcd2>
 8003498:	0003      	movs	r3, r0
 800349a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fb5d 	bl	8003b60 <RTC_ByteToBcd2>
 80034a6:	0003      	movs	r3, r0
 80034a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034aa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f000 fb55 	bl	8003b60 <RTC_ByteToBcd2>
 80034b6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034b8:	0022      	movs	r2, r4
 80034ba:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e017      	b.n	80034f8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	4013      	ands	r3, r2
 80034d2:	d102      	bne.n	80034da <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2200      	movs	r2, #0
 80034d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034e6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	78db      	ldrb	r3, [r3, #3]
 80034f2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	22ca      	movs	r2, #202	; 0xca
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2253      	movs	r2, #83	; 0x53
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003508:	2513      	movs	r5, #19
 800350a:	197c      	adds	r4, r7, r5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	0018      	movs	r0, r3
 8003510:	f000 fab8 	bl	8003a84 <RTC_EnterInitMode>
 8003514:	0003      	movs	r3, r0
 8003516:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003518:	0028      	movs	r0, r5
 800351a:	183b      	adds	r3, r7, r0
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d120      	bne.n	8003564 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	491a      	ldr	r1, [pc, #104]	; (8003594 <HAL_RTC_SetTime+0x14c>)
 800352a:	400a      	ands	r2, r1
 800352c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4917      	ldr	r1, [pc, #92]	; (8003598 <HAL_RTC_SetTime+0x150>)
 800353a:	400a      	ands	r2, r1
 800353c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003556:	183c      	adds	r4, r7, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	0018      	movs	r0, r3
 800355c:	f000 fad6 	bl	8003b0c <RTC_ExitInitMode>
 8003560:	0003      	movs	r3, r0
 8003562:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003564:	2313      	movs	r3, #19
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	; 0x21
 8003572:	2101      	movs	r1, #1
 8003574:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	22ff      	movs	r2, #255	; 0xff
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

  return status;
 8003586:	2313      	movs	r3, #19
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	781b      	ldrb	r3, [r3, #0]
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b006      	add	sp, #24
 8003592:	bdb0      	pop	{r4, r5, r7, pc}
 8003594:	007f7f7f 	.word	0x007f7f7f
 8003598:	fffbffff 	.word	0xfffbffff

0800359c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	5c9b      	ldrb	r3, [r3, r2]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_RTC_SetDate+0x1e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e07e      	b.n	80036b8 <HAL_RTC_SetDate+0x11c>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	2101      	movs	r1, #1
 80035c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	2102      	movs	r1, #2
 80035c8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10e      	bne.n	80035ee <HAL_RTC_SetDate+0x52>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	001a      	movs	r2, r3
 80035d6:	2310      	movs	r3, #16
 80035d8:	4013      	ands	r3, r2
 80035da:	d008      	beq.n	80035ee <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	785b      	ldrb	r3, [r3, #1]
 80035e0:	2210      	movs	r2, #16
 80035e2:	4393      	bics	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	330a      	adds	r3, #10
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11c      	bne.n	800362e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	78db      	ldrb	r3, [r3, #3]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 fab1 	bl	8003b60 <RTC_ByteToBcd2>
 80035fe:	0003      	movs	r3, r0
 8003600:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 faaa 	bl	8003b60 <RTC_ByteToBcd2>
 800360c:	0003      	movs	r3, r0
 800360e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003610:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	789b      	ldrb	r3, [r3, #2]
 8003616:	0018      	movs	r0, r3
 8003618:	f000 faa2 	bl	8003b60 <RTC_ByteToBcd2>
 800361c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800361e:	0022      	movs	r2, r4
 8003620:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e00e      	b.n	800364c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	78db      	ldrb	r3, [r3, #3]
 8003632:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800363a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003640:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	22ca      	movs	r2, #202	; 0xca
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2253      	movs	r2, #83	; 0x53
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800365c:	2513      	movs	r5, #19
 800365e:	197c      	adds	r4, r7, r5
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	0018      	movs	r0, r3
 8003664:	f000 fa0e 	bl	8003a84 <RTC_EnterInitMode>
 8003668:	0003      	movs	r3, r0
 800366a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800366c:	0028      	movs	r0, r5
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4910      	ldr	r1, [pc, #64]	; (80036c0 <HAL_RTC_SetDate+0x124>)
 800367e:	400a      	ands	r2, r1
 8003680:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003682:	183c      	adds	r4, r7, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	0018      	movs	r0, r3
 8003688:	f000 fa40 	bl	8003b0c <RTC_ExitInitMode>
 800368c:	0003      	movs	r3, r0
 800368e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003690:	2313      	movs	r3, #19
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2221      	movs	r2, #33	; 0x21
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]

  return status;
 80036b2:	2313      	movs	r3, #19
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	781b      	ldrb	r3, [r3, #0]
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b006      	add	sp, #24
 80036be:	bdb0      	pop	{r4, r5, r7, pc}
 80036c0:	00ffff3f 	.word	0x00ffff3f

080036c4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80036d0:	4ba7      	ldr	r3, [pc, #668]	; (8003970 <HAL_RTC_SetAlarm_IT+0x2ac>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	22fa      	movs	r2, #250	; 0xfa
 80036d6:	01d1      	lsls	r1, r2, #7
 80036d8:	0018      	movs	r0, r3
 80036da:	f7fc fd15 	bl	8000108 <__udivsi3>
 80036de:	0003      	movs	r3, r0
 80036e0:	001a      	movs	r2, r3
 80036e2:	0013      	movs	r3, r2
 80036e4:	015b      	lsls	r3, r3, #5
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	5c9b      	ldrb	r3, [r3, r2]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_RTC_SetAlarm_IT+0x42>
 8003702:	2302      	movs	r3, #2
 8003704:	e130      	b.n	8003968 <HAL_RTC_SetAlarm_IT+0x2a4>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2221      	movs	r2, #33	; 0x21
 8003712:	2102      	movs	r1, #2
 8003714:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d136      	bne.n	800378a <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	4013      	ands	r3, r2
 8003726:	d102      	bne.n	800372e <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 fa14 	bl	8003b60 <RTC_ByteToBcd2>
 8003738:	0003      	movs	r3, r0
 800373a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	0018      	movs	r0, r3
 8003742:	f000 fa0d 	bl	8003b60 <RTC_ByteToBcd2>
 8003746:	0003      	movs	r3, r0
 8003748:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800374a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	789b      	ldrb	r3, [r3, #2]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 fa05 	bl	8003b60 <RTC_ByteToBcd2>
 8003756:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003758:	0022      	movs	r2, r4
 800375a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	78db      	ldrb	r3, [r3, #3]
 8003760:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003762:	431a      	orrs	r2, r3
 8003764:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2220      	movs	r2, #32
 800376a:	5c9b      	ldrb	r3, [r3, r2]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 f9f7 	bl	8003b60 <RTC_ByteToBcd2>
 8003772:	0003      	movs	r3, r0
 8003774:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003776:	0022      	movs	r2, r4
 8003778:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800377e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003784:	4313      	orrs	r3, r2
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e022      	b.n	80037d0 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	4013      	ands	r3, r2
 8003794:	d102      	bne.n	800379c <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2200      	movs	r2, #0
 800379a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80037a8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80037ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80037b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2120      	movs	r1, #32
 80037bc:	5c5b      	ldrb	r3, [r3, r1]
 80037be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80037c0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80037c6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	22ca      	movs	r2, #202	; 0xca
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2253      	movs	r2, #83	; 0x53
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d146      	bne.n	8003886 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	495c      	ldr	r1, [pc, #368]	; (8003974 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8003804:	400a      	ands	r2, r1
 8003806:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	22ff      	movs	r2, #255	; 0xff
 8003810:	401a      	ands	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4958      	ldr	r1, [pc, #352]	; (8003978 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8003818:	430a      	orrs	r2, r1
 800381a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3b01      	subs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	22ff      	movs	r2, #255	; 0xff
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2221      	movs	r2, #33	; 0x21
 8003834:	2103      	movs	r1, #3
 8003836:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e091      	b.n	8003968 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	4013      	ands	r3, r2
 800384e:	d0e5      	beq.n	800381c <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	0049      	lsls	r1, r1, #1
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	0149      	lsls	r1, r1, #5
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	e055      	b.n	8003932 <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	493a      	ldr	r1, [pc, #232]	; (800397c <HAL_RTC_SetAlarm_IT+0x2b8>)
 8003892:	400a      	ands	r2, r1
 8003894:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	401a      	ands	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4936      	ldr	r1, [pc, #216]	; (8003980 <HAL_RTC_SetAlarm_IT+0x2bc>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RTC_SetAlarm_IT+0x2ac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	22fa      	movs	r2, #250	; 0xfa
 80038b0:	01d1      	lsls	r1, r2, #7
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7fc fc28 	bl	8000108 <__udivsi3>
 80038b8:	0003      	movs	r3, r0
 80038ba:	001a      	movs	r2, r3
 80038bc:	0013      	movs	r3, r2
 80038be:	015b      	lsls	r3, r3, #5
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	189b      	adds	r3, r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	22ff      	movs	r2, #255	; 0xff
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	2103      	movs	r1, #3
 80038e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	2100      	movs	r1, #0
 80038ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e03a      	b.n	8003968 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2202      	movs	r2, #2
 80038fa:	4013      	ands	r3, r2
 80038fc:	d0e5      	beq.n	80038ca <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	0089      	lsls	r1, r1, #2
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	0189      	lsls	r1, r1, #6
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	0289      	lsls	r1, r1, #10
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	0289      	lsls	r1, r1, #10
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	22ff      	movs	r2, #255	; 0xff
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2221      	movs	r2, #33	; 0x21
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b009      	add	sp, #36	; 0x24
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	20000000 	.word	0x20000000
 8003974:	fffffeff 	.word	0xfffffeff
 8003978:	fffffe7f 	.word	0xfffffe7f
 800397c:	fffffdff 	.word	0xfffffdff
 8003980:	fffffd7f 	.word	0xfffffd7f
 8003984:	40010400 	.word	0x40010400

08003988 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003990:	4b21      	ldr	r3, [pc, #132]	; (8003a18 <HAL_RTC_AlarmIRQHandler+0x90>)
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	0292      	lsls	r2, r2, #10
 8003996:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	015b      	lsls	r3, r3, #5
 80039a2:	4013      	ands	r3, r2
 80039a4:	d014      	beq.n	80039d0 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4013      	ands	r3, r2
 80039b2:	d00d      	beq.n	80039d0 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	22ff      	movs	r2, #255	; 0xff
 80039bc:	401a      	ands	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RTC_AlarmIRQHandler+0x94>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 f82a 	bl	8003a24 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	4013      	ands	r3, r2
 80039dc:	d014      	beq.n	8003a08 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4013      	ands	r3, r2
 80039ea:	d00d      	beq.n	8003a08 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	401a      	ands	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4909      	ldr	r1, [pc, #36]	; (8003a20 <HAL_RTC_AlarmIRQHandler+0x98>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 f8cd 	bl	8003ba2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2221      	movs	r2, #33	; 0x21
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40010400 	.word	0x40010400
 8003a1c:	fffffe7f 	.word	0xfffffe7f
 8003a20:	fffffd7f 	.word	0xfffffd7f

08003a24 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <HAL_RTC_WaitForSynchro+0x4c>)
 8003a46:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a48:	f7fe f99c 	bl	8001d84 <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a50:	e00a      	b.n	8003a68 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a52:	f7fe f997 	bl	8001d84 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	23fa      	movs	r3, #250	; 0xfa
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d901      	bls.n	8003a68 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e006      	b.n	8003a76 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	4013      	ands	r3, r2
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	0001ff5f 	.word	0x0001ff5f

08003a84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	230f      	movs	r3, #15
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2240      	movs	r2, #64	; 0x40
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d12c      	bne.n	8003afe <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ab4:	f7fe f966 	bl	8001d84 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003abc:	e014      	b.n	8003ae8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003abe:	f7fe f961 	bl	8001d84 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	1ad2      	subs	r2, r2, r3
 8003ac8:	200f      	movs	r0, #15
 8003aca:	183b      	adds	r3, r7, r0
 8003acc:	1839      	adds	r1, r7, r0
 8003ace:	7809      	ldrb	r1, [r1, #0]
 8003ad0:	7019      	strb	r1, [r3, #0]
 8003ad2:	23fa      	movs	r3, #250	; 0xfa
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d906      	bls.n	8003ae8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2221      	movs	r2, #33	; 0x21
 8003ade:	2104      	movs	r1, #4
 8003ae0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003ae2:	183b      	adds	r3, r7, r0
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	4013      	ands	r3, r2
 8003af2:	d104      	bne.n	8003afe <RTC_EnterInitMode+0x7a>
 8003af4:	230f      	movs	r3, #15
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d1df      	bne.n	8003abe <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003afe:	230f      	movs	r3, #15
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	781b      	ldrb	r3, [r3, #0]
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	240f      	movs	r4, #15
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	438a      	bics	r2, r1
 8003b2a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2220      	movs	r2, #32
 8003b34:	4013      	ands	r3, r2
 8003b36:	d10c      	bne.n	8003b52 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff ff7a 	bl	8003a34 <HAL_RTC_WaitForSynchro>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d006      	beq.n	8003b52 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2221      	movs	r2, #33	; 0x21
 8003b48:	2104      	movs	r1, #4
 8003b4a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003b52:	230f      	movs	r3, #15
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781b      	ldrb	r3, [r3, #0]
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b005      	add	sp, #20
 8003b5e:	bd90      	pop	{r4, r7, pc}

08003b60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	0002      	movs	r2, r0
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003b70:	e007      	b.n	8003b82 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3301      	adds	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	1dfa      	adds	r2, r7, #7
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	3a0a      	subs	r2, #10
 8003b80:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003b82:	1dfb      	adds	r3, r7, #7
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d8f3      	bhi.n	8003b72 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b2db      	uxtb	r3, r3
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e083      	b.n	8003cce <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	2382      	movs	r3, #130	; 0x82
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d009      	beq.n	8003bee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	61da      	str	r2, [r3, #28]
 8003be0:	e005      	b.n	8003bee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2251      	movs	r2, #81	; 0x51
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2250      	movs	r2, #80	; 0x50
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f7fd ff00 	bl	8001a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2251      	movs	r2, #81	; 0x51
 8003c14:	2102      	movs	r1, #2
 8003c16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	438a      	bics	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	2382      	movs	r3, #130	; 0x82
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	401a      	ands	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	2384      	movs	r3, #132	; 0x84
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	400b      	ands	r3, r1
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68d9      	ldr	r1, [r3, #12]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	400b      	ands	r3, r1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2102      	movs	r1, #2
 8003c50:	400b      	ands	r3, r1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	400b      	ands	r3, r1
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2138      	movs	r1, #56	; 0x38
 8003c70:	400b      	ands	r3, r1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	400b      	ands	r3, r1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	0011      	movs	r1, r2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	019b      	lsls	r3, r3, #6
 8003c88:	401a      	ands	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	2204      	movs	r2, #4
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4907      	ldr	r1, [pc, #28]	; (8003cd8 <HAL_SPI_Init+0x124>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2251      	movs	r2, #81	; 0x51
 8003cc8:	2101      	movs	r1, #1
 8003cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	fffff7ff 	.word	0xfffff7ff

08003cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e032      	b.n	8003d54 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2239      	movs	r2, #57	; 0x39
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2238      	movs	r2, #56	; 0x38
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7fd fee9 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2239      	movs	r2, #57	; 0x39
 8003d0e:	2102      	movs	r1, #2
 8003d10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	0010      	movs	r0, r2
 8003d1e:	f000 fa4b 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223e      	movs	r2, #62	; 0x3e
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	223a      	movs	r2, #58	; 0x3a
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	223b      	movs	r2, #59	; 0x3b
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223c      	movs	r2, #60	; 0x3c
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223d      	movs	r2, #61	; 0x3d
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2239      	movs	r2, #57	; 0x39
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2239      	movs	r2, #57	; 0x39
 8003d68:	5c9b      	ldrb	r3, [r3, r2]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d001      	beq.n	8003d74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e033      	b.n	8003ddc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2239      	movs	r2, #57	; 0x39
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	05db      	lsls	r3, r3, #23
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIM_Base_Start+0x4a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <HAL_TIM_Base_Start+0x88>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_Base_Start+0x4a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_TIM_Base_Start+0x8c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_Base_Start+0x4a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a12      	ldr	r2, [pc, #72]	; (8003dec <HAL_TIM_Base_Start+0x90>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d111      	bne.n	8003dca <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2207      	movs	r2, #7
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d010      	beq.n	8003dda <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	e007      	b.n	8003dda <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40010800 	.word	0x40010800
 8003dec:	40011400 	.word	0x40011400

08003df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d124      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d11d      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4252      	negs	r2, r2
 8003e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 f9a8 	bl	8004188 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e007      	b.n	8003e4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f000 f99b 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 f9a7 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2204      	movs	r2, #4
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d125      	bne.n	8003eaa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2204      	movs	r2, #4
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11e      	bne.n	8003eaa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2205      	movs	r2, #5
 8003e72:	4252      	negs	r2, r2
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	23c0      	movs	r3, #192	; 0xc0
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4013      	ands	r3, r2
 8003e88:	d004      	beq.n	8003e94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 f97b 	bl	8004188 <HAL_TIM_IC_CaptureCallback>
 8003e92:	e007      	b.n	8003ea4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f000 f96e 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 f97a 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d124      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d11d      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2209      	movs	r2, #9
 8003ecc:	4252      	negs	r2, r2
 8003ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2203      	movs	r2, #3
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 f94f 	bl	8004188 <HAL_TIM_IC_CaptureCallback>
 8003eea:	e007      	b.n	8003efc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 f942 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f000 f94e 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2210      	movs	r2, #16
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d125      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2210      	movs	r2, #16
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d11e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2211      	movs	r2, #17
 8003f24:	4252      	negs	r2, r2
 8003f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	23c0      	movs	r3, #192	; 0xc0
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 f922 	bl	8004188 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e007      	b.n	8003f56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 f915 	bl	8004178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f921 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2201      	movs	r2, #1
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10f      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d108      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	4252      	negs	r2, r2
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 f8ef 	bl	8004168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2240      	movs	r2, #64	; 0x40
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d10f      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d108      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2241      	movs	r2, #65	; 0x41
 8003fac:	4252      	negs	r2, r2
 8003fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 f8f8 	bl	80041a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	230f      	movs	r3, #15
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2238      	movs	r2, #56	; 0x38
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIM_ConfigClockSource+0x20>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0bc      	b.n	800415a <HAL_TIM_ConfigClockSource+0x19a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2238      	movs	r2, #56	; 0x38
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2239      	movs	r2, #57	; 0x39
 8003fec:	2102      	movs	r1, #2
 8003fee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2277      	movs	r2, #119	; 0x77
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a58      	ldr	r2, [pc, #352]	; (8004164 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	0192      	lsls	r2, r2, #6
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <HAL_TIM_ConfigClockSource+0xde>
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	0192      	lsls	r2, r2, #6
 8004020:	4293      	cmp	r3, r2
 8004022:	d900      	bls.n	8004026 <HAL_TIM_ConfigClockSource+0x66>
 8004024:	e088      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	0152      	lsls	r2, r2, #5
 800402a:	4293      	cmp	r3, r2
 800402c:	d100      	bne.n	8004030 <HAL_TIM_ConfigClockSource+0x70>
 800402e:	e088      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x182>
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	0152      	lsls	r2, r2, #5
 8004034:	4293      	cmp	r3, r2
 8004036:	d900      	bls.n	800403a <HAL_TIM_ConfigClockSource+0x7a>
 8004038:	e07e      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 800403a:	2b70      	cmp	r3, #112	; 0x70
 800403c:	d018      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0xb0>
 800403e:	d900      	bls.n	8004042 <HAL_TIM_ConfigClockSource+0x82>
 8004040:	e07a      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 8004042:	2b60      	cmp	r3, #96	; 0x60
 8004044:	d04f      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0x126>
 8004046:	d900      	bls.n	800404a <HAL_TIM_ConfigClockSource+0x8a>
 8004048:	e076      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 800404a:	2b50      	cmp	r3, #80	; 0x50
 800404c:	d03b      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x106>
 800404e:	d900      	bls.n	8004052 <HAL_TIM_ConfigClockSource+0x92>
 8004050:	e072      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d057      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x146>
 8004056:	d900      	bls.n	800405a <HAL_TIM_ConfigClockSource+0x9a>
 8004058:	e06e      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d063      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x166>
 800405e:	d86b      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 8004060:	2b20      	cmp	r3, #32
 8004062:	d060      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x166>
 8004064:	d868      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d05d      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x166>
 800406a:	2b10      	cmp	r3, #16
 800406c:	d05b      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x166>
 800406e:	e063      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f000 f972 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2277      	movs	r2, #119	; 0x77
 8004090:	4313      	orrs	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
      break;
 800409c:	e052      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6899      	ldr	r1, [r3, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f000 f95b 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	01c9      	lsls	r1, r1, #7
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
      break;
 80040c4:	e03e      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6859      	ldr	r1, [r3, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	001a      	movs	r2, r3
 80040d4:	f000 f8ce 	bl	8004274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2150      	movs	r1, #80	; 0x50
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 f928 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 80040e4:	e02e      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6859      	ldr	r1, [r3, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	001a      	movs	r2, r3
 80040f4:	f000 f8ec 	bl	80042d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2160      	movs	r1, #96	; 0x60
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f918 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 8004104:	e01e      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6859      	ldr	r1, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	001a      	movs	r2, r3
 8004114:	f000 f8ae 	bl	8004274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	0018      	movs	r0, r3
 8004120:	f000 f908 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 8004124:	e00e      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	0019      	movs	r1, r3
 8004130:	0010      	movs	r0, r2
 8004132:	f000 f8ff 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 8004136:	e005      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004138:	230f      	movs	r3, #15
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
      break;
 8004140:	e000      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004142:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2239      	movs	r2, #57	; 0x39
 8004148:	2101      	movs	r1, #1
 800414a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2238      	movs	r2, #56	; 0x38
 8004150:	2100      	movs	r1, #0
 8004152:	5499      	strb	r1, [r3, r2]

  return status;
 8004154:	230f      	movs	r3, #15
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	781b      	ldrb	r3, [r3, #0]
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b004      	add	sp, #16
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	ffff00ff 	.word	0xffff00ff

08004168 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b002      	add	sp, #8
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b002      	add	sp, #8
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	05db      	lsls	r3, r3, #23
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d00b      	beq.n	80041ea <TIM_Base_SetConfig+0x32>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a23      	ldr	r2, [pc, #140]	; (8004264 <TIM_Base_SetConfig+0xac>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <TIM_Base_SetConfig+0x32>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a22      	ldr	r2, [pc, #136]	; (8004268 <TIM_Base_SetConfig+0xb0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_Base_SetConfig+0x32>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a21      	ldr	r2, [pc, #132]	; (800426c <TIM_Base_SetConfig+0xb4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d108      	bne.n	80041fc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2270      	movs	r2, #112	; 0x70
 80041ee:	4393      	bics	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	05db      	lsls	r3, r3, #23
 8004202:	429a      	cmp	r2, r3
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <TIM_Base_SetConfig+0xac>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0x66>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a15      	ldr	r2, [pc, #84]	; (8004268 <TIM_Base_SetConfig+0xb0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x66>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a14      	ldr	r2, [pc, #80]	; (800426c <TIM_Base_SetConfig+0xb4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a13      	ldr	r2, [pc, #76]	; (8004270 <TIM_Base_SetConfig+0xb8>)
 8004222:	4013      	ands	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	4393      	bics	r3, r2
 8004236:	001a      	movs	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	615a      	str	r2, [r3, #20]
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b004      	add	sp, #16
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40000400 	.word	0x40000400
 8004268:	40010800 	.word	0x40010800
 800426c:	40011400 	.word	0x40011400
 8004270:	fffffcff 	.word	0xfffffcff

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	2201      	movs	r2, #1
 800428c:	4393      	bics	r3, r2
 800428e:	001a      	movs	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	22f0      	movs	r2, #240	; 0xf0
 800429e:	4393      	bics	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	220a      	movs	r2, #10
 80042b0:	4393      	bics	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	621a      	str	r2, [r3, #32]
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b006      	add	sp, #24
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	2210      	movs	r2, #16
 80042e2:	4393      	bics	r3, r2
 80042e4:	001a      	movs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <TIM_TI2_ConfigInputStage+0x60>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	22a0      	movs	r2, #160	; 0xa0
 800430c:	4393      	bics	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b006      	add	sp, #24
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	ffff0fff 	.word	0xffff0fff

08004334 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2270      	movs	r2, #112	; 0x70
 8004348:	4393      	bics	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	2207      	movs	r2, #7
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	609a      	str	r2, [r3, #8]
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b004      	add	sp, #16
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <TIM_ETR_SetConfig+0x3c>)
 8004380:	4013      	ands	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	b006      	add	sp, #24
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	ffff00ff 	.word	0xffff00ff

080043a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2238      	movs	r2, #56	; 0x38
 80043b6:	5c9b      	ldrb	r3, [r3, r2]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043bc:	2302      	movs	r3, #2
 80043be:	e047      	b.n	8004450 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2238      	movs	r2, #56	; 0x38
 80043c4:	2101      	movs	r1, #1
 80043c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2239      	movs	r2, #57	; 0x39
 80043cc:	2102      	movs	r1, #2
 80043ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2270      	movs	r2, #112	; 0x70
 80043e4:	4393      	bics	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	05db      	lsls	r3, r3, #23
 8004402:	429a      	cmp	r2, r3
 8004404:	d00e      	beq.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a10      	ldr	r2, [pc, #64]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10c      	bne.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2280      	movs	r2, #128	; 0x80
 8004428:	4393      	bics	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2239      	movs	r2, #57	; 0x39
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2238      	movs	r2, #56	; 0x38
 800444a:	2100      	movs	r1, #0
 800444c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b004      	add	sp, #16
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40000400 	.word	0x40000400
 800445c:	40010800 	.word	0x40010800
 8004460:	40011400 	.word	0x40011400

08004464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e044      	b.n	8004500 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2278      	movs	r2, #120	; 0x78
 8004482:	2100      	movs	r1, #0
 8004484:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7fd fb45 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2224      	movs	r2, #36	; 0x24
 8004492:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2101      	movs	r1, #1
 80044a0:	438a      	bics	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0018      	movs	r0, r3
 80044a8:	f000 fcb4 	bl	8004e14 <UART_SetConfig>
 80044ac:	0003      	movs	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e024      	b.n	8004500 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f000 ff45 	bl	8005350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	490d      	ldr	r1, [pc, #52]	; (8004508 <HAL_UART_Init+0xa4>)
 80044d2:	400a      	ands	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	212a      	movs	r1, #42	; 0x2a
 80044e2:	438a      	bics	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f000 ffdd 	bl	80054b8 <UART_CheckIdleState>
 80044fe:	0003      	movs	r3, r0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}
 8004508:	ffffb7ff 	.word	0xffffb7ff

0800450c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	1dbb      	adds	r3, r7, #6
 800451a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004520:	2b20      	cmp	r3, #32
 8004522:	d000      	beq.n	8004526 <HAL_UART_Transmit+0x1a>
 8004524:	e08c      	b.n	8004640 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_UART_Transmit+0x28>
 800452c:	1dbb      	adds	r3, r7, #6
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e084      	b.n	8004642 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	015b      	lsls	r3, r3, #5
 8004540:	429a      	cmp	r2, r3
 8004542:	d109      	bne.n	8004558 <HAL_UART_Transmit+0x4c>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2201      	movs	r2, #1
 8004550:	4013      	ands	r3, r2
 8004552:	d001      	beq.n	8004558 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e074      	b.n	8004642 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2284      	movs	r2, #132	; 0x84
 800455c:	2100      	movs	r1, #0
 800455e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2221      	movs	r2, #33	; 0x21
 8004564:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004566:	f7fd fc0d 	bl	8001d84 <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1dba      	adds	r2, r7, #6
 8004572:	2150      	movs	r1, #80	; 0x50
 8004574:	8812      	ldrh	r2, [r2, #0]
 8004576:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1dba      	adds	r2, r7, #6
 800457c:	2152      	movs	r1, #82	; 0x52
 800457e:	8812      	ldrh	r2, [r2, #0]
 8004580:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	015b      	lsls	r3, r3, #5
 800458a:	429a      	cmp	r2, r3
 800458c:	d108      	bne.n	80045a0 <HAL_UART_Transmit+0x94>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e003      	b.n	80045a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a8:	e02f      	b.n	800460a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	0013      	movs	r3, r2
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	f001 f826 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 80045bc:	1e03      	subs	r3, r0, #0
 80045be:	d004      	beq.n	80045ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e03b      	b.n	8004642 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	001a      	movs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	05d2      	lsls	r2, r2, #23
 80045dc:	0dd2      	lsrs	r2, r2, #23
 80045de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	3302      	adds	r3, #2
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e007      	b.n	80045f8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2252      	movs	r2, #82	; 0x52
 80045fc:	5a9b      	ldrh	r3, [r3, r2]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b299      	uxth	r1, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2252      	movs	r2, #82	; 0x52
 8004608:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2252      	movs	r2, #82	; 0x52
 800460e:	5a9b      	ldrh	r3, [r3, r2]
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1c9      	bne.n	80045aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	0013      	movs	r3, r2
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	; 0x40
 8004624:	f000 fff0 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 8004628:	1e03      	subs	r3, r0, #0
 800462a:	d004      	beq.n	8004636 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e005      	b.n	8004642 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b008      	add	sp, #32
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	1dbb      	adds	r3, r7, #6
 800465a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	589b      	ldr	r3, [r3, r2]
 8004662:	2b20      	cmp	r3, #32
 8004664:	d000      	beq.n	8004668 <HAL_UART_Receive+0x1c>
 8004666:	e0d0      	b.n	800480a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_UART_Receive+0x2a>
 800466e:	1dbb      	adds	r3, r7, #6
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0c8      	b.n	800480c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	015b      	lsls	r3, r3, #5
 8004682:	429a      	cmp	r2, r3
 8004684:	d109      	bne.n	800469a <HAL_UART_Receive+0x4e>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d105      	bne.n	800469a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2201      	movs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	d001      	beq.n	800469a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0b8      	b.n	800480c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2284      	movs	r2, #132	; 0x84
 800469e:	2100      	movs	r1, #0
 80046a0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	2122      	movs	r1, #34	; 0x22
 80046a8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fb68 	bl	8001d84 <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1dba      	adds	r2, r7, #6
 80046bc:	2158      	movs	r1, #88	; 0x58
 80046be:	8812      	ldrh	r2, [r2, #0]
 80046c0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1dba      	adds	r2, r7, #6
 80046c6:	215a      	movs	r1, #90	; 0x5a
 80046c8:	8812      	ldrh	r2, [r2, #0]
 80046ca:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	015b      	lsls	r3, r3, #5
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d10d      	bne.n	80046f4 <HAL_UART_Receive+0xa8>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_UART_Receive+0x9e>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	225c      	movs	r2, #92	; 0x5c
 80046e4:	494b      	ldr	r1, [pc, #300]	; (8004814 <HAL_UART_Receive+0x1c8>)
 80046e6:	5299      	strh	r1, [r3, r2]
 80046e8:	e02e      	b.n	8004748 <HAL_UART_Receive+0xfc>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	225c      	movs	r2, #92	; 0x5c
 80046ee:	21ff      	movs	r1, #255	; 0xff
 80046f0:	5299      	strh	r1, [r3, r2]
 80046f2:	e029      	b.n	8004748 <HAL_UART_Receive+0xfc>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10d      	bne.n	8004718 <HAL_UART_Receive+0xcc>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_UART_Receive+0xc2>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	225c      	movs	r2, #92	; 0x5c
 8004708:	21ff      	movs	r1, #255	; 0xff
 800470a:	5299      	strh	r1, [r3, r2]
 800470c:	e01c      	b.n	8004748 <HAL_UART_Receive+0xfc>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	225c      	movs	r2, #92	; 0x5c
 8004712:	217f      	movs	r1, #127	; 0x7f
 8004714:	5299      	strh	r1, [r3, r2]
 8004716:	e017      	b.n	8004748 <HAL_UART_Receive+0xfc>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	055b      	lsls	r3, r3, #21
 8004720:	429a      	cmp	r2, r3
 8004722:	d10d      	bne.n	8004740 <HAL_UART_Receive+0xf4>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <HAL_UART_Receive+0xea>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	225c      	movs	r2, #92	; 0x5c
 8004730:	217f      	movs	r1, #127	; 0x7f
 8004732:	5299      	strh	r1, [r3, r2]
 8004734:	e008      	b.n	8004748 <HAL_UART_Receive+0xfc>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	225c      	movs	r2, #92	; 0x5c
 800473a:	213f      	movs	r1, #63	; 0x3f
 800473c:	5299      	strh	r1, [r3, r2]
 800473e:	e003      	b.n	8004748 <HAL_UART_Receive+0xfc>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	225c      	movs	r2, #92	; 0x5c
 8004744:	2100      	movs	r1, #0
 8004746:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004748:	2312      	movs	r3, #18
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	215c      	movs	r1, #92	; 0x5c
 8004750:	5a52      	ldrh	r2, [r2, r1]
 8004752:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	015b      	lsls	r3, r3, #5
 800475c:	429a      	cmp	r2, r3
 800475e:	d108      	bne.n	8004772 <HAL_UART_Receive+0x126>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e003      	b.n	800477a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800477a:	e03a      	b.n	80047f2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	0013      	movs	r3, r2
 8004786:	2200      	movs	r2, #0
 8004788:	2120      	movs	r1, #32
 800478a:	f000 ff3d 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 800478e:	1e03      	subs	r3, r0, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	2120      	movs	r1, #32
 8004798:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e036      	b.n	800480c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10e      	bne.n	80047c2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2212      	movs	r2, #18
 80047ae:	18ba      	adds	r2, r7, r2
 80047b0:	8812      	ldrh	r2, [r2, #0]
 80047b2:	4013      	ands	r3, r2
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3302      	adds	r3, #2
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e00e      	b.n	80047e0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2212      	movs	r2, #18
 80047cc:	18ba      	adds	r2, r7, r2
 80047ce:	8812      	ldrh	r2, [r2, #0]
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	4013      	ands	r3, r2
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3301      	adds	r3, #1
 80047de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	225a      	movs	r2, #90	; 0x5a
 80047e4:	5a9b      	ldrh	r3, [r3, r2]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b299      	uxth	r1, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	225a      	movs	r2, #90	; 0x5a
 80047f0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	225a      	movs	r2, #90	; 0x5a
 80047f6:	5a9b      	ldrh	r3, [r3, r2]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1be      	bne.n	800477c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	2120      	movs	r1, #32
 8004804:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
  }
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b008      	add	sp, #32
 8004812:	bd80      	pop	{r7, pc}
 8004814:	000001ff 	.word	0x000001ff

08004818 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b0ab      	sub	sp, #172	; 0xac
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	22a4      	movs	r2, #164	; 0xa4
 8004828:	18b9      	adds	r1, r7, r2
 800482a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	20a0      	movs	r0, #160	; 0xa0
 8004834:	1839      	adds	r1, r7, r0
 8004836:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	219c      	movs	r1, #156	; 0x9c
 8004840:	1879      	adds	r1, r7, r1
 8004842:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004844:	0011      	movs	r1, r2
 8004846:	18bb      	adds	r3, r7, r2
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a99      	ldr	r2, [pc, #612]	; (8004ab0 <HAL_UART_IRQHandler+0x298>)
 800484c:	4013      	ands	r3, r2
 800484e:	2298      	movs	r2, #152	; 0x98
 8004850:	18bc      	adds	r4, r7, r2
 8004852:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004854:	18bb      	adds	r3, r7, r2
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d114      	bne.n	8004886 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800485c:	187b      	adds	r3, r7, r1
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2220      	movs	r2, #32
 8004862:	4013      	ands	r3, r2
 8004864:	d00f      	beq.n	8004886 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004866:	183b      	adds	r3, r7, r0
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2220      	movs	r2, #32
 800486c:	4013      	ands	r3, r2
 800486e:	d00a      	beq.n	8004886 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004874:	2b00      	cmp	r3, #0
 8004876:	d100      	bne.n	800487a <HAL_UART_IRQHandler+0x62>
 8004878:	e2a0      	b.n	8004dbc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	0010      	movs	r0, r2
 8004882:	4798      	blx	r3
      }
      return;
 8004884:	e29a      	b.n	8004dbc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004886:	2398      	movs	r3, #152	; 0x98
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d100      	bne.n	8004892 <HAL_UART_IRQHandler+0x7a>
 8004890:	e114      	b.n	8004abc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004892:	239c      	movs	r3, #156	; 0x9c
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	4013      	ands	r3, r2
 800489c:	d106      	bne.n	80048ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800489e:	23a0      	movs	r3, #160	; 0xa0
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a83      	ldr	r2, [pc, #524]	; (8004ab4 <HAL_UART_IRQHandler+0x29c>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	d100      	bne.n	80048ac <HAL_UART_IRQHandler+0x94>
 80048aa:	e107      	b.n	8004abc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048ac:	23a4      	movs	r3, #164	; 0xa4
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2201      	movs	r2, #1
 80048b4:	4013      	ands	r3, r2
 80048b6:	d012      	beq.n	80048de <HAL_UART_IRQHandler+0xc6>
 80048b8:	23a0      	movs	r3, #160	; 0xa0
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	d00b      	beq.n	80048de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2284      	movs	r2, #132	; 0x84
 80048d2:	589b      	ldr	r3, [r3, r2]
 80048d4:	2201      	movs	r2, #1
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2184      	movs	r1, #132	; 0x84
 80048dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048de:	23a4      	movs	r3, #164	; 0xa4
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2202      	movs	r2, #2
 80048e6:	4013      	ands	r3, r2
 80048e8:	d011      	beq.n	800490e <HAL_UART_IRQHandler+0xf6>
 80048ea:	239c      	movs	r3, #156	; 0x9c
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2201      	movs	r2, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	d00b      	beq.n	800490e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2202      	movs	r2, #2
 80048fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2284      	movs	r2, #132	; 0x84
 8004902:	589b      	ldr	r3, [r3, r2]
 8004904:	2204      	movs	r2, #4
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2184      	movs	r1, #132	; 0x84
 800490c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800490e:	23a4      	movs	r3, #164	; 0xa4
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2204      	movs	r2, #4
 8004916:	4013      	ands	r3, r2
 8004918:	d011      	beq.n	800493e <HAL_UART_IRQHandler+0x126>
 800491a:	239c      	movs	r3, #156	; 0x9c
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2201      	movs	r2, #1
 8004922:	4013      	ands	r3, r2
 8004924:	d00b      	beq.n	800493e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2204      	movs	r2, #4
 800492c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2284      	movs	r2, #132	; 0x84
 8004932:	589b      	ldr	r3, [r3, r2]
 8004934:	2202      	movs	r2, #2
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2184      	movs	r1, #132	; 0x84
 800493c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800493e:	23a4      	movs	r3, #164	; 0xa4
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2208      	movs	r2, #8
 8004946:	4013      	ands	r3, r2
 8004948:	d017      	beq.n	800497a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800494a:	23a0      	movs	r3, #160	; 0xa0
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2220      	movs	r2, #32
 8004952:	4013      	ands	r3, r2
 8004954:	d105      	bne.n	8004962 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004956:	239c      	movs	r3, #156	; 0x9c
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2201      	movs	r2, #1
 800495e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004960:	d00b      	beq.n	800497a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2208      	movs	r2, #8
 8004968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2284      	movs	r2, #132	; 0x84
 800496e:	589b      	ldr	r3, [r3, r2]
 8004970:	2208      	movs	r2, #8
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2184      	movs	r1, #132	; 0x84
 8004978:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800497a:	23a4      	movs	r3, #164	; 0xa4
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4013      	ands	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_UART_IRQHandler+0x198>
 8004988:	23a0      	movs	r3, #160	; 0xa0
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	04db      	lsls	r3, r3, #19
 8004992:	4013      	ands	r3, r2
 8004994:	d00c      	beq.n	80049b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2280      	movs	r2, #128	; 0x80
 800499c:	0112      	lsls	r2, r2, #4
 800499e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2284      	movs	r2, #132	; 0x84
 80049a4:	589b      	ldr	r3, [r3, r2]
 80049a6:	2220      	movs	r2, #32
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2184      	movs	r1, #132	; 0x84
 80049ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2284      	movs	r2, #132	; 0x84
 80049b4:	589b      	ldr	r3, [r3, r2]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d100      	bne.n	80049bc <HAL_UART_IRQHandler+0x1a4>
 80049ba:	e201      	b.n	8004dc0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049bc:	23a4      	movs	r3, #164	; 0xa4
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2220      	movs	r2, #32
 80049c4:	4013      	ands	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049c8:	23a0      	movs	r3, #160	; 0xa0
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2220      	movs	r2, #32
 80049d0:	4013      	ands	r3, r2
 80049d2:	d008      	beq.n	80049e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	0010      	movs	r0, r2
 80049e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2284      	movs	r2, #132	; 0x84
 80049ea:	589b      	ldr	r3, [r3, r2]
 80049ec:	2194      	movs	r1, #148	; 0x94
 80049ee:	187a      	adds	r2, r7, r1
 80049f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d004      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2228      	movs	r2, #40	; 0x28
 8004a06:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a08:	d047      	beq.n	8004a9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 fe65 	bl	80056dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d137      	bne.n	8004a90 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a20:	f3ef 8310 	mrs	r3, PRIMASK
 8004a24:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a28:	2090      	movs	r0, #144	; 0x90
 8004a2a:	183a      	adds	r2, r7, r0
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2140      	movs	r1, #64	; 0x40
 8004a46:	438a      	bics	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
 8004a4a:	183b      	adds	r3, r7, r0
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <HAL_UART_IRQHandler+0x2a0>)
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fd fad5 	bl	800201c <HAL_DMA_Abort_IT>
 8004a72:	1e03      	subs	r3, r0, #0
 8004a74:	d01a      	beq.n	8004aac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a80:	0018      	movs	r0, r3
 8004a82:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	e012      	b.n	8004aac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 f9af 	bl	8004dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8e:	e00d      	b.n	8004aac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f000 f9aa 	bl	8004dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	e008      	b.n	8004aac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f000 f9a5 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2284      	movs	r2, #132	; 0x84
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004aaa:	e189      	b.n	8004dc0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	46c0      	nop			; (mov r8, r8)
    return;
 8004aae:	e187      	b.n	8004dc0 <HAL_UART_IRQHandler+0x5a8>
 8004ab0:	0000080f 	.word	0x0000080f
 8004ab4:	04000120 	.word	0x04000120
 8004ab8:	080057a5 	.word	0x080057a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d000      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x2ae>
 8004ac4:	e13b      	b.n	8004d3e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ac6:	23a4      	movs	r3, #164	; 0xa4
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2210      	movs	r2, #16
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d100      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x2bc>
 8004ad2:	e134      	b.n	8004d3e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ad4:	23a0      	movs	r3, #160	; 0xa0
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2210      	movs	r2, #16
 8004adc:	4013      	ands	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x2ca>
 8004ae0:	e12d      	b.n	8004d3e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2240      	movs	r2, #64	; 0x40
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d000      	beq.n	8004afa <HAL_UART_IRQHandler+0x2e2>
 8004af8:	e0a1      	b.n	8004c3e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	217e      	movs	r1, #126	; 0x7e
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b08:	187b      	adds	r3, r7, r1
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d100      	bne.n	8004b12 <HAL_UART_IRQHandler+0x2fa>
 8004b10:	e158      	b.n	8004dc4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2258      	movs	r2, #88	; 0x58
 8004b16:	5a9b      	ldrh	r3, [r3, r2]
 8004b18:	187a      	adds	r2, r7, r1
 8004b1a:	8812      	ldrh	r2, [r2, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d300      	bcc.n	8004b22 <HAL_UART_IRQHandler+0x30a>
 8004b20:	e150      	b.n	8004dc4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	187a      	adds	r2, r7, r1
 8004b26:	215a      	movs	r1, #90	; 0x5a
 8004b28:	8812      	ldrh	r2, [r2, #0]
 8004b2a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2220      	movs	r2, #32
 8004b36:	4013      	ands	r3, r2
 8004b38:	d16f      	bne.n	8004c1a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b42:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b44:	2301      	movs	r3, #1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	499e      	ldr	r1, [pc, #632]	; (8004dd4 <HAL_UART_IRQHandler+0x5bc>)
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	f383 8810 	msr	PRIMASK, r3
}
 8004b6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	677b      	str	r3, [r7, #116]	; 0x74
 8004b76:	2301      	movs	r3, #1
 8004b78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7c:	f383 8810 	msr	PRIMASK, r3
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	438a      	bics	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
 8004b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba8:	2301      	movs	r3, #1
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	f383 8810 	msr	PRIMASK, r3
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2140      	movs	r1, #64	; 0x40
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	f383 8810 	msr	PRIMASK, r3
}
 8004bce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	2120      	movs	r1, #32
 8004bd6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8310 	mrs	r3, PRIMASK
 8004be2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be8:	2301      	movs	r3, #1
 8004bea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bee:	f383 8810 	msr	PRIMASK, r3
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2110      	movs	r1, #16
 8004c00:	438a      	bics	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fd f9c1 	bl	8001f9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2258      	movs	r2, #88	; 0x58
 8004c24:	5a9a      	ldrh	r2, [r3, r2]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	215a      	movs	r1, #90	; 0x5a
 8004c2a:	5a5b      	ldrh	r3, [r3, r1]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0011      	movs	r1, r2
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 f8e0 	bl	8004dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c3c:	e0c2      	b.n	8004dc4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2258      	movs	r2, #88	; 0x58
 8004c42:	5a99      	ldrh	r1, [r3, r2]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	225a      	movs	r2, #90	; 0x5a
 8004c48:	5a9b      	ldrh	r3, [r3, r2]
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	208e      	movs	r0, #142	; 0x8e
 8004c4e:	183b      	adds	r3, r7, r0
 8004c50:	1a8a      	subs	r2, r1, r2
 8004c52:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	225a      	movs	r2, #90	; 0x5a
 8004c58:	5a9b      	ldrh	r3, [r3, r2]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d100      	bne.n	8004c62 <HAL_UART_IRQHandler+0x44a>
 8004c60:	e0b2      	b.n	8004dc8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004c62:	183b      	adds	r3, r7, r0
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d100      	bne.n	8004c6c <HAL_UART_IRQHandler+0x454>
 8004c6a:	e0ad      	b.n	8004dc8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c72:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c74:	2488      	movs	r4, #136	; 0x88
 8004c76:	193a      	adds	r2, r7, r4
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4951      	ldr	r1, [pc, #324]	; (8004dd8 <HAL_UART_IRQHandler+0x5c0>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	193b      	adds	r3, r7, r4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004caa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	2484      	movs	r4, #132	; 0x84
 8004cae:	193a      	adds	r2, r7, r4
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2101      	movs	r1, #1
 8004cca:	438a      	bics	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	193b      	adds	r3, r7, r4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f383 8810 	msr	PRIMASK, r3
}
 8004cda:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	2480      	movs	r4, #128	; 0x80
 8004cfa:	193a      	adds	r2, r7, r4
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	2301      	movs	r3, #1
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			; (mov r8, r8)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2110      	movs	r1, #16
 8004d16:	438a      	bics	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d2e:	183b      	adds	r3, r7, r0
 8004d30:	881a      	ldrh	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0011      	movs	r1, r2
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 f860 	bl	8004dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d3c:	e044      	b.n	8004dc8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d3e:	23a4      	movs	r3, #164	; 0xa4
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	035b      	lsls	r3, r3, #13
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d010      	beq.n	8004d6e <HAL_UART_IRQHandler+0x556>
 8004d4c:	239c      	movs	r3, #156	; 0x9c
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	03db      	lsls	r3, r3, #15
 8004d56:	4013      	ands	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2280      	movs	r2, #128	; 0x80
 8004d60:	0352      	lsls	r2, r2, #13
 8004d62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 fd5e 	bl	8005828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d6c:	e02f      	b.n	8004dce <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d6e:	23a4      	movs	r3, #164	; 0xa4
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	4013      	ands	r3, r2
 8004d78:	d00f      	beq.n	8004d9a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d7a:	23a0      	movs	r3, #160	; 0xa0
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	4013      	ands	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01e      	beq.n	8004dcc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	0010      	movs	r0, r2
 8004d96:	4798      	blx	r3
    }
    return;
 8004d98:	e018      	b.n	8004dcc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d9a:	23a4      	movs	r3, #164	; 0xa4
 8004d9c:	18fb      	adds	r3, r7, r3
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2240      	movs	r2, #64	; 0x40
 8004da2:	4013      	ands	r3, r2
 8004da4:	d013      	beq.n	8004dce <HAL_UART_IRQHandler+0x5b6>
 8004da6:	23a0      	movs	r3, #160	; 0xa0
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2240      	movs	r2, #64	; 0x40
 8004dae:	4013      	ands	r3, r2
 8004db0:	d00d      	beq.n	8004dce <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 fd0c 	bl	80057d2 <UART_EndTransmit_IT>
    return;
 8004dba:	e008      	b.n	8004dce <HAL_UART_IRQHandler+0x5b6>
      return;
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	e006      	b.n	8004dce <HAL_UART_IRQHandler+0x5b6>
    return;
 8004dc0:	46c0      	nop			; (mov r8, r8)
 8004dc2:	e004      	b.n	8004dce <HAL_UART_IRQHandler+0x5b6>
      return;
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	e002      	b.n	8004dce <HAL_UART_IRQHandler+0x5b6>
      return;
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	e000      	b.n	8004dce <HAL_UART_IRQHandler+0x5b6>
    return;
 8004dcc:	46c0      	nop			; (mov r8, r8)
  }

}
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b02b      	add	sp, #172	; 0xac
 8004dd2:	bd90      	pop	{r4, r7, pc}
 8004dd4:	fffffeff 	.word	0xfffffeff
 8004dd8:	fffffedf 	.word	0xfffffedf

08004ddc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b002      	add	sp, #8
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	000a      	movs	r2, r1
 8004e06:	1cbb      	adds	r3, r7, #2
 8004e08:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b002      	add	sp, #8
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b5b0      	push	{r4, r5, r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1c:	231a      	movs	r3, #26
 8004e1e:	2218      	movs	r2, #24
 8004e20:	189b      	adds	r3, r3, r2
 8004e22:	19db      	adds	r3, r3, r7
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4ac3      	ldr	r2, [pc, #780]	; (8005154 <UART_SetConfig+0x340>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e52:	430a      	orrs	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4abe      	ldr	r2, [pc, #760]	; (8005158 <UART_SetConfig+0x344>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4ab8      	ldr	r2, [pc, #736]	; (800515c <UART_SetConfig+0x348>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e84:	4313      	orrs	r3, r2
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4ab4      	ldr	r2, [pc, #720]	; (8005160 <UART_SetConfig+0x34c>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4ab0      	ldr	r2, [pc, #704]	; (8005164 <UART_SetConfig+0x350>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d131      	bne.n	8004f0c <UART_SetConfig+0xf8>
 8004ea8:	4baf      	ldr	r3, [pc, #700]	; (8005168 <UART_SetConfig+0x354>)
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	2203      	movs	r2, #3
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d01d      	beq.n	8004ef0 <UART_SetConfig+0xdc>
 8004eb4:	d823      	bhi.n	8004efe <UART_SetConfig+0xea>
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d00c      	beq.n	8004ed4 <UART_SetConfig+0xc0>
 8004eba:	d820      	bhi.n	8004efe <UART_SetConfig+0xea>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <UART_SetConfig+0xb2>
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d00e      	beq.n	8004ee2 <UART_SetConfig+0xce>
 8004ec4:	e01b      	b.n	8004efe <UART_SetConfig+0xea>
 8004ec6:	231b      	movs	r3, #27
 8004ec8:	2218      	movs	r2, #24
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	19db      	adds	r3, r3, r7
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e0b4      	b.n	800503e <UART_SetConfig+0x22a>
 8004ed4:	231b      	movs	r3, #27
 8004ed6:	2218      	movs	r2, #24
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	19db      	adds	r3, r3, r7
 8004edc:	2202      	movs	r2, #2
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	e0ad      	b.n	800503e <UART_SetConfig+0x22a>
 8004ee2:	231b      	movs	r3, #27
 8004ee4:	2218      	movs	r2, #24
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	19db      	adds	r3, r3, r7
 8004eea:	2204      	movs	r2, #4
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e0a6      	b.n	800503e <UART_SetConfig+0x22a>
 8004ef0:	231b      	movs	r3, #27
 8004ef2:	2218      	movs	r2, #24
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	19db      	adds	r3, r3, r7
 8004ef8:	2208      	movs	r2, #8
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e09f      	b.n	800503e <UART_SetConfig+0x22a>
 8004efe:	231b      	movs	r3, #27
 8004f00:	2218      	movs	r2, #24
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	19db      	adds	r3, r3, r7
 8004f06:	2210      	movs	r2, #16
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e098      	b.n	800503e <UART_SetConfig+0x22a>
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a96      	ldr	r2, [pc, #600]	; (800516c <UART_SetConfig+0x358>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d131      	bne.n	8004f7a <UART_SetConfig+0x166>
 8004f16:	4b94      	ldr	r3, [pc, #592]	; (8005168 <UART_SetConfig+0x354>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d01d      	beq.n	8004f5e <UART_SetConfig+0x14a>
 8004f22:	d823      	bhi.n	8004f6c <UART_SetConfig+0x158>
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d00c      	beq.n	8004f42 <UART_SetConfig+0x12e>
 8004f28:	d820      	bhi.n	8004f6c <UART_SetConfig+0x158>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <UART_SetConfig+0x120>
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d00e      	beq.n	8004f50 <UART_SetConfig+0x13c>
 8004f32:	e01b      	b.n	8004f6c <UART_SetConfig+0x158>
 8004f34:	231b      	movs	r3, #27
 8004f36:	2218      	movs	r2, #24
 8004f38:	189b      	adds	r3, r3, r2
 8004f3a:	19db      	adds	r3, r3, r7
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e07d      	b.n	800503e <UART_SetConfig+0x22a>
 8004f42:	231b      	movs	r3, #27
 8004f44:	2218      	movs	r2, #24
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	19db      	adds	r3, r3, r7
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	e076      	b.n	800503e <UART_SetConfig+0x22a>
 8004f50:	231b      	movs	r3, #27
 8004f52:	2218      	movs	r2, #24
 8004f54:	189b      	adds	r3, r3, r2
 8004f56:	19db      	adds	r3, r3, r7
 8004f58:	2204      	movs	r2, #4
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e06f      	b.n	800503e <UART_SetConfig+0x22a>
 8004f5e:	231b      	movs	r3, #27
 8004f60:	2218      	movs	r2, #24
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	19db      	adds	r3, r3, r7
 8004f66:	2208      	movs	r2, #8
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e068      	b.n	800503e <UART_SetConfig+0x22a>
 8004f6c:	231b      	movs	r3, #27
 8004f6e:	2218      	movs	r2, #24
 8004f70:	189b      	adds	r3, r3, r2
 8004f72:	19db      	adds	r3, r3, r7
 8004f74:	2210      	movs	r2, #16
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e061      	b.n	800503e <UART_SetConfig+0x22a>
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a7c      	ldr	r2, [pc, #496]	; (8005170 <UART_SetConfig+0x35c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d106      	bne.n	8004f92 <UART_SetConfig+0x17e>
 8004f84:	231b      	movs	r3, #27
 8004f86:	2218      	movs	r2, #24
 8004f88:	189b      	adds	r3, r3, r2
 8004f8a:	19db      	adds	r3, r3, r7
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e055      	b.n	800503e <UART_SetConfig+0x22a>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a77      	ldr	r2, [pc, #476]	; (8005174 <UART_SetConfig+0x360>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d106      	bne.n	8004faa <UART_SetConfig+0x196>
 8004f9c:	231b      	movs	r3, #27
 8004f9e:	2218      	movs	r2, #24
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	19db      	adds	r3, r3, r7
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e049      	b.n	800503e <UART_SetConfig+0x22a>
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6b      	ldr	r2, [pc, #428]	; (800515c <UART_SetConfig+0x348>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d13e      	bne.n	8005032 <UART_SetConfig+0x21e>
 8004fb4:	4b6c      	ldr	r3, [pc, #432]	; (8005168 <UART_SetConfig+0x354>)
 8004fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fb8:	23c0      	movs	r3, #192	; 0xc0
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	22c0      	movs	r2, #192	; 0xc0
 8004fc0:	0112      	lsls	r2, r2, #4
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d027      	beq.n	8005016 <UART_SetConfig+0x202>
 8004fc6:	22c0      	movs	r2, #192	; 0xc0
 8004fc8:	0112      	lsls	r2, r2, #4
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d82a      	bhi.n	8005024 <UART_SetConfig+0x210>
 8004fce:	2280      	movs	r2, #128	; 0x80
 8004fd0:	0112      	lsls	r2, r2, #4
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d011      	beq.n	8004ffa <UART_SetConfig+0x1e6>
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	0112      	lsls	r2, r2, #4
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d822      	bhi.n	8005024 <UART_SetConfig+0x210>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <UART_SetConfig+0x1d8>
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	00d2      	lsls	r2, r2, #3
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <UART_SetConfig+0x1f4>
 8004fea:	e01b      	b.n	8005024 <UART_SetConfig+0x210>
 8004fec:	231b      	movs	r3, #27
 8004fee:	2218      	movs	r2, #24
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	19db      	adds	r3, r3, r7
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e021      	b.n	800503e <UART_SetConfig+0x22a>
 8004ffa:	231b      	movs	r3, #27
 8004ffc:	2218      	movs	r2, #24
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	19db      	adds	r3, r3, r7
 8005002:	2202      	movs	r2, #2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	e01a      	b.n	800503e <UART_SetConfig+0x22a>
 8005008:	231b      	movs	r3, #27
 800500a:	2218      	movs	r2, #24
 800500c:	189b      	adds	r3, r3, r2
 800500e:	19db      	adds	r3, r3, r7
 8005010:	2204      	movs	r2, #4
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	e013      	b.n	800503e <UART_SetConfig+0x22a>
 8005016:	231b      	movs	r3, #27
 8005018:	2218      	movs	r2, #24
 800501a:	189b      	adds	r3, r3, r2
 800501c:	19db      	adds	r3, r3, r7
 800501e:	2208      	movs	r2, #8
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e00c      	b.n	800503e <UART_SetConfig+0x22a>
 8005024:	231b      	movs	r3, #27
 8005026:	2218      	movs	r2, #24
 8005028:	189b      	adds	r3, r3, r2
 800502a:	19db      	adds	r3, r3, r7
 800502c:	2210      	movs	r2, #16
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e005      	b.n	800503e <UART_SetConfig+0x22a>
 8005032:	231b      	movs	r3, #27
 8005034:	2218      	movs	r2, #24
 8005036:	189b      	adds	r3, r3, r2
 8005038:	19db      	adds	r3, r3, r7
 800503a:	2210      	movs	r2, #16
 800503c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a46      	ldr	r2, [pc, #280]	; (800515c <UART_SetConfig+0x348>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d000      	beq.n	800504a <UART_SetConfig+0x236>
 8005048:	e09a      	b.n	8005180 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800504a:	231b      	movs	r3, #27
 800504c:	2218      	movs	r2, #24
 800504e:	189b      	adds	r3, r3, r2
 8005050:	19db      	adds	r3, r3, r7
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d01d      	beq.n	8005094 <UART_SetConfig+0x280>
 8005058:	dc20      	bgt.n	800509c <UART_SetConfig+0x288>
 800505a:	2b04      	cmp	r3, #4
 800505c:	d015      	beq.n	800508a <UART_SetConfig+0x276>
 800505e:	dc1d      	bgt.n	800509c <UART_SetConfig+0x288>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <UART_SetConfig+0x256>
 8005064:	2b02      	cmp	r3, #2
 8005066:	d005      	beq.n	8005074 <UART_SetConfig+0x260>
 8005068:	e018      	b.n	800509c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800506a:	f7fd ffc9 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 800506e:	0003      	movs	r3, r0
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005072:	e01c      	b.n	80050ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005074:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <UART_SetConfig+0x354>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2210      	movs	r2, #16
 800507a:	4013      	ands	r3, r2
 800507c:	d002      	beq.n	8005084 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800507e:	4b3e      	ldr	r3, [pc, #248]	; (8005178 <UART_SetConfig+0x364>)
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005082:	e014      	b.n	80050ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005084:	4b3d      	ldr	r3, [pc, #244]	; (800517c <UART_SetConfig+0x368>)
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005088:	e011      	b.n	80050ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508a:	f7fd ff09 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800508e:	0003      	movs	r3, r0
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005092:	e00c      	b.n	80050ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800509a:	e008      	b.n	80050ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050a0:	231a      	movs	r3, #26
 80050a2:	2218      	movs	r2, #24
 80050a4:	189b      	adds	r3, r3, r2
 80050a6:	19db      	adds	r3, r3, r7
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
        break;
 80050ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d100      	bne.n	80050b6 <UART_SetConfig+0x2a2>
 80050b4:	e133      	b.n	800531e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	0013      	movs	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d305      	bcc.n	80050d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d906      	bls.n	80050e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80050d2:	231a      	movs	r3, #26
 80050d4:	2218      	movs	r2, #24
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	19db      	adds	r3, r3, r7
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e11e      	b.n	800531e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	000b      	movs	r3, r1
 80050ee:	0e1b      	lsrs	r3, r3, #24
 80050f0:	0010      	movs	r0, r2
 80050f2:	0205      	lsls	r5, r0, #8
 80050f4:	431d      	orrs	r5, r3
 80050f6:	000b      	movs	r3, r1
 80050f8:	021c      	lsls	r4, r3, #8
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	1900      	adds	r0, r0, r4
 800510c:	4169      	adcs	r1, r5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f7fb f880 	bl	8000220 <__aeabi_uldivmod>
 8005120:	0002      	movs	r2, r0
 8005122:	000b      	movs	r3, r1
 8005124:	0013      	movs	r3, r2
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512a:	23c0      	movs	r3, #192	; 0xc0
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	429a      	cmp	r2, r3
 8005130:	d309      	bcc.n	8005146 <UART_SetConfig+0x332>
 8005132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	035b      	lsls	r3, r3, #13
 8005138:	429a      	cmp	r2, r3
 800513a:	d204      	bcs.n	8005146 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005142:	60da      	str	r2, [r3, #12]
 8005144:	e0eb      	b.n	800531e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005146:	231a      	movs	r3, #26
 8005148:	2218      	movs	r2, #24
 800514a:	189b      	adds	r3, r3, r2
 800514c:	19db      	adds	r3, r3, r7
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e0e4      	b.n	800531e <UART_SetConfig+0x50a>
 8005154:	efff69f3 	.word	0xefff69f3
 8005158:	ffffcfff 	.word	0xffffcfff
 800515c:	40004800 	.word	0x40004800
 8005160:	fffff4ff 	.word	0xfffff4ff
 8005164:	40013800 	.word	0x40013800
 8005168:	40021000 	.word	0x40021000
 800516c:	40004400 	.word	0x40004400
 8005170:	40004c00 	.word	0x40004c00
 8005174:	40005000 	.word	0x40005000
 8005178:	003d0900 	.word	0x003d0900
 800517c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	429a      	cmp	r2, r3
 800518a:	d000      	beq.n	800518e <UART_SetConfig+0x37a>
 800518c:	e070      	b.n	8005270 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800518e:	231b      	movs	r3, #27
 8005190:	2218      	movs	r2, #24
 8005192:	189b      	adds	r3, r3, r2
 8005194:	19db      	adds	r3, r3, r7
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d822      	bhi.n	80051e2 <UART_SetConfig+0x3ce>
 800519c:	009a      	lsls	r2, r3, #2
 800519e:	4b67      	ldr	r3, [pc, #412]	; (800533c <UART_SetConfig+0x528>)
 80051a0:	18d3      	adds	r3, r2, r3
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a6:	f7fd ff2b 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 80051aa:	0003      	movs	r3, r0
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ae:	e021      	b.n	80051f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7fd ff3c 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 80051b4:	0003      	movs	r3, r0
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051b8:	e01c      	b.n	80051f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ba:	4b61      	ldr	r3, [pc, #388]	; (8005340 <UART_SetConfig+0x52c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2210      	movs	r2, #16
 80051c0:	4013      	ands	r3, r2
 80051c2:	d002      	beq.n	80051ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051c4:	4b5f      	ldr	r3, [pc, #380]	; (8005344 <UART_SetConfig+0x530>)
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051c8:	e014      	b.n	80051f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <UART_SetConfig+0x534>)
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051ce:	e011      	b.n	80051f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d0:	f7fd fe66 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 80051d4:	0003      	movs	r3, r0
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d8:	e00c      	b.n	80051f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051e0:	e008      	b.n	80051f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051e6:	231a      	movs	r3, #26
 80051e8:	2218      	movs	r2, #24
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	19db      	adds	r3, r3, r7
 80051ee:	2201      	movs	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
        break;
 80051f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d100      	bne.n	80051fc <UART_SetConfig+0x3e8>
 80051fa:	e090      	b.n	800531e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	005a      	lsls	r2, r3, #1
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	18d2      	adds	r2, r2, r3
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	0019      	movs	r1, r3
 800520e:	0010      	movs	r0, r2
 8005210:	f7fa ff7a 	bl	8000108 <__udivsi3>
 8005214:	0003      	movs	r3, r0
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2b0f      	cmp	r3, #15
 800521c:	d921      	bls.n	8005262 <UART_SetConfig+0x44e>
 800521e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	025b      	lsls	r3, r3, #9
 8005224:	429a      	cmp	r2, r3
 8005226:	d21c      	bcs.n	8005262 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	b29a      	uxth	r2, r3
 800522c:	200e      	movs	r0, #14
 800522e:	2418      	movs	r4, #24
 8005230:	1903      	adds	r3, r0, r4
 8005232:	19db      	adds	r3, r3, r7
 8005234:	210f      	movs	r1, #15
 8005236:	438a      	bics	r2, r1
 8005238:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	b29b      	uxth	r3, r3
 8005240:	2207      	movs	r2, #7
 8005242:	4013      	ands	r3, r2
 8005244:	b299      	uxth	r1, r3
 8005246:	1903      	adds	r3, r0, r4
 8005248:	19db      	adds	r3, r3, r7
 800524a:	1902      	adds	r2, r0, r4
 800524c:	19d2      	adds	r2, r2, r7
 800524e:	8812      	ldrh	r2, [r2, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1902      	adds	r2, r0, r4
 800525a:	19d2      	adds	r2, r2, r7
 800525c:	8812      	ldrh	r2, [r2, #0]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	e05d      	b.n	800531e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005262:	231a      	movs	r3, #26
 8005264:	2218      	movs	r2, #24
 8005266:	189b      	adds	r3, r3, r2
 8005268:	19db      	adds	r3, r3, r7
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e056      	b.n	800531e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005270:	231b      	movs	r3, #27
 8005272:	2218      	movs	r2, #24
 8005274:	189b      	adds	r3, r3, r2
 8005276:	19db      	adds	r3, r3, r7
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d822      	bhi.n	80052c4 <UART_SetConfig+0x4b0>
 800527e:	009a      	lsls	r2, r3, #2
 8005280:	4b32      	ldr	r3, [pc, #200]	; (800534c <UART_SetConfig+0x538>)
 8005282:	18d3      	adds	r3, r2, r3
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fd feba 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 800528c:	0003      	movs	r3, r0
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005290:	e021      	b.n	80052d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005292:	f7fd fecb 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8005296:	0003      	movs	r3, r0
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800529a:	e01c      	b.n	80052d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529c:	4b28      	ldr	r3, [pc, #160]	; (8005340 <UART_SetConfig+0x52c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2210      	movs	r2, #16
 80052a2:	4013      	ands	r3, r2
 80052a4:	d002      	beq.n	80052ac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052a6:	4b27      	ldr	r3, [pc, #156]	; (8005344 <UART_SetConfig+0x530>)
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052aa:	e014      	b.n	80052d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <UART_SetConfig+0x534>)
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b0:	e011      	b.n	80052d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7fd fdf5 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 80052b6:	0003      	movs	r3, r0
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ba:	e00c      	b.n	80052d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052c2:	e008      	b.n	80052d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052c8:	231a      	movs	r3, #26
 80052ca:	2218      	movs	r2, #24
 80052cc:	189b      	adds	r3, r3, r2
 80052ce:	19db      	adds	r3, r3, r7
 80052d0:	2201      	movs	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
        break;
 80052d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d020      	beq.n	800531e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	085a      	lsrs	r2, r3, #1
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	18d2      	adds	r2, r2, r3
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	0019      	movs	r1, r3
 80052ec:	0010      	movs	r0, r2
 80052ee:	f7fa ff0b 	bl	8000108 <__udivsi3>
 80052f2:	0003      	movs	r3, r0
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d90a      	bls.n	8005312 <UART_SetConfig+0x4fe>
 80052fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	025b      	lsls	r3, r3, #9
 8005302:	429a      	cmp	r2, r3
 8005304:	d205      	bcs.n	8005312 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	b29a      	uxth	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
 8005310:	e005      	b.n	800531e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005312:	231a      	movs	r3, #26
 8005314:	2218      	movs	r2, #24
 8005316:	189b      	adds	r3, r3, r2
 8005318:	19db      	adds	r3, r3, r7
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2200      	movs	r2, #0
 8005322:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2200      	movs	r2, #0
 8005328:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800532a:	231a      	movs	r3, #26
 800532c:	2218      	movs	r2, #24
 800532e:	189b      	adds	r3, r3, r2
 8005330:	19db      	adds	r3, r3, r7
 8005332:	781b      	ldrb	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b00e      	add	sp, #56	; 0x38
 800533a:	bdb0      	pop	{r4, r5, r7, pc}
 800533c:	0800590c 	.word	0x0800590c
 8005340:	40021000 	.word	0x40021000
 8005344:	003d0900 	.word	0x003d0900
 8005348:	00f42400 	.word	0x00f42400
 800534c:	08005930 	.word	0x08005930

08005350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	2201      	movs	r2, #1
 800535e:	4013      	ands	r3, r2
 8005360:	d00b      	beq.n	800537a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <UART_AdvFeatureConfig+0x144>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2202      	movs	r2, #2
 8005380:	4013      	ands	r3, r2
 8005382:	d00b      	beq.n	800539c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4a43      	ldr	r2, [pc, #268]	; (8005498 <UART_AdvFeatureConfig+0x148>)
 800538c:	4013      	ands	r3, r2
 800538e:	0019      	movs	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2204      	movs	r2, #4
 80053a2:	4013      	ands	r3, r2
 80053a4:	d00b      	beq.n	80053be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a3b      	ldr	r2, [pc, #236]	; (800549c <UART_AdvFeatureConfig+0x14c>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	0019      	movs	r1, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2208      	movs	r2, #8
 80053c4:	4013      	ands	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4a34      	ldr	r2, [pc, #208]	; (80054a0 <UART_AdvFeatureConfig+0x150>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2210      	movs	r2, #16
 80053e6:	4013      	ands	r3, r2
 80053e8:	d00b      	beq.n	8005402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a2c      	ldr	r2, [pc, #176]	; (80054a4 <UART_AdvFeatureConfig+0x154>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	0019      	movs	r1, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	2220      	movs	r2, #32
 8005408:	4013      	ands	r3, r2
 800540a:	d00b      	beq.n	8005424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <UART_AdvFeatureConfig+0x158>)
 8005414:	4013      	ands	r3, r2
 8005416:	0019      	movs	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	4013      	ands	r3, r2
 800542c:	d01d      	beq.n	800546a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <UART_AdvFeatureConfig+0x15c>)
 8005436:	4013      	ands	r3, r2
 8005438:	0019      	movs	r1, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	035b      	lsls	r3, r3, #13
 800544e:	429a      	cmp	r2, r3
 8005450:	d10b      	bne.n	800546a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <UART_AdvFeatureConfig+0x160>)
 800545a:	4013      	ands	r3, r2
 800545c:	0019      	movs	r1, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2280      	movs	r2, #128	; 0x80
 8005470:	4013      	ands	r3, r2
 8005472:	d00b      	beq.n	800548c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4a0e      	ldr	r2, [pc, #56]	; (80054b4 <UART_AdvFeatureConfig+0x164>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}
 8005494:	fffdffff 	.word	0xfffdffff
 8005498:	fffeffff 	.word	0xfffeffff
 800549c:	fffbffff 	.word	0xfffbffff
 80054a0:	ffff7fff 	.word	0xffff7fff
 80054a4:	ffffefff 	.word	0xffffefff
 80054a8:	ffffdfff 	.word	0xffffdfff
 80054ac:	ffefffff 	.word	0xffefffff
 80054b0:	ff9fffff 	.word	0xff9fffff
 80054b4:	fff7ffff 	.word	0xfff7ffff

080054b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b092      	sub	sp, #72	; 0x48
 80054bc:	af02      	add	r7, sp, #8
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2284      	movs	r2, #132	; 0x84
 80054c4:	2100      	movs	r1, #0
 80054c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054c8:	f7fc fc5c 	bl	8001d84 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2208      	movs	r2, #8
 80054d8:	4013      	ands	r3, r2
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d12c      	bne.n	8005538 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e0:	2280      	movs	r2, #128	; 0x80
 80054e2:	0391      	lsls	r1, r2, #14
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	4a46      	ldr	r2, [pc, #280]	; (8005600 <UART_CheckIdleState+0x148>)
 80054e8:	9200      	str	r2, [sp, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f000 f88c 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 80054f0:	1e03      	subs	r3, r0, #0
 80054f2:	d021      	beq.n	8005538 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f4:	f3ef 8310 	mrs	r3, PRIMASK
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fe:	2301      	movs	r3, #1
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	f383 8810 	msr	PRIMASK, r3
}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2180      	movs	r1, #128	; 0x80
 8005516:	438a      	bics	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	f383 8810 	msr	PRIMASK, r3
}
 8005524:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2278      	movs	r2, #120	; 0x78
 8005530:	2100      	movs	r1, #0
 8005532:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e05f      	b.n	80055f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2204      	movs	r2, #4
 8005540:	4013      	ands	r3, r2
 8005542:	2b04      	cmp	r3, #4
 8005544:	d146      	bne.n	80055d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	03d1      	lsls	r1, r2, #15
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4a2c      	ldr	r2, [pc, #176]	; (8005600 <UART_CheckIdleState+0x148>)
 8005550:	9200      	str	r2, [sp, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	f000 f858 	bl	8005608 <UART_WaitOnFlagUntilTimeout>
 8005558:	1e03      	subs	r3, r0, #0
 800555a:	d03b      	beq.n	80055d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800555c:	f3ef 8310 	mrs	r3, PRIMASK
 8005560:	60fb      	str	r3, [r7, #12]
  return(result);
 8005562:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
 8005566:	2301      	movs	r3, #1
 8005568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4921      	ldr	r1, [pc, #132]	; (8005604 <UART_CheckIdleState+0x14c>)
 800557e:	400a      	ands	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f383 8810 	msr	PRIMASK, r3
}
 800558c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558e:	f3ef 8310 	mrs	r3, PRIMASK
 8005592:	61bb      	str	r3, [r7, #24]
  return(result);
 8005594:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
 8005598:	2301      	movs	r3, #1
 800559a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2101      	movs	r1, #1
 80055b0:	438a      	bics	r2, r1
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f383 8810 	msr	PRIMASK, r3
}
 80055be:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2280      	movs	r2, #128	; 0x80
 80055c4:	2120      	movs	r1, #32
 80055c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2278      	movs	r2, #120	; 0x78
 80055cc:	2100      	movs	r1, #0
 80055ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e011      	b.n	80055f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2280      	movs	r2, #128	; 0x80
 80055de:	2120      	movs	r1, #32
 80055e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2278      	movs	r2, #120	; 0x78
 80055f2:	2100      	movs	r1, #0
 80055f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b010      	add	sp, #64	; 0x40
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	01ffffff 	.word	0x01ffffff
 8005604:	fffffedf 	.word	0xfffffedf

08005608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	1dfb      	adds	r3, r7, #7
 8005616:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005618:	e04b      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	3301      	adds	r3, #1
 800561e:	d048      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fc fbb0 	bl	8001d84 <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e04b      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2204      	movs	r2, #4
 8005642:	4013      	ands	r3, r2
 8005644:	d035      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	2208      	movs	r2, #8
 800564e:	4013      	ands	r3, r2
 8005650:	2b08      	cmp	r3, #8
 8005652:	d111      	bne.n	8005678 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2208      	movs	r2, #8
 800565a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	0018      	movs	r0, r3
 8005660:	f000 f83c 	bl	80056dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2284      	movs	r2, #132	; 0x84
 8005668:	2108      	movs	r1, #8
 800566a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2278      	movs	r2, #120	; 0x78
 8005670:	2100      	movs	r1, #0
 8005672:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e02c      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	401a      	ands	r2, r3
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	429a      	cmp	r2, r3
 800568a:	d112      	bne.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2280      	movs	r2, #128	; 0x80
 8005692:	0112      	lsls	r2, r2, #4
 8005694:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	0018      	movs	r0, r3
 800569a:	f000 f81f 	bl	80056dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2284      	movs	r2, #132	; 0x84
 80056a2:	2120      	movs	r1, #32
 80056a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2278      	movs	r2, #120	; 0x78
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e00f      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	4013      	ands	r3, r2
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	425a      	negs	r2, r3
 80056c2:	4153      	adcs	r3, r2
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	001a      	movs	r2, r3
 80056c8:	1dfb      	adds	r3, r7, #7
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d0a4      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b004      	add	sp, #16
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	; 0x38
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e4:	f3ef 8310 	mrs	r3, PRIMASK
 80056e8:	617b      	str	r3, [r7, #20]
  return(result);
 80056ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	2301      	movs	r3, #1
 80056f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4926      	ldr	r1, [pc, #152]	; (80057a0 <UART_EndRxTransfer+0xc4>)
 8005706:	400a      	ands	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005716:	f3ef 8310 	mrs	r3, PRIMASK
 800571a:	623b      	str	r3, [r7, #32]
  return(result);
 800571c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
 8005720:	2301      	movs	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	f383 8810 	msr	PRIMASK, r3
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2101      	movs	r1, #1
 8005738:	438a      	bics	r2, r1
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	f383 8810 	msr	PRIMASK, r3
}
 8005746:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	2b01      	cmp	r3, #1
 800574e:	d118      	bne.n	8005782 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005750:	f3ef 8310 	mrs	r3, PRIMASK
 8005754:	60bb      	str	r3, [r7, #8]
  return(result);
 8005756:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575a:	2301      	movs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2110      	movs	r1, #16
 8005772:	438a      	bics	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f383 8810 	msr	PRIMASK, r3
}
 8005780:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	2120      	movs	r1, #32
 8005788:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b00e      	add	sp, #56	; 0x38
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	fffffedf 	.word	0xfffffedf

080057a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	225a      	movs	r2, #90	; 0x5a
 80057b6:	2100      	movs	r1, #0
 80057b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2252      	movs	r2, #82	; 0x52
 80057be:	2100      	movs	r1, #0
 80057c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7ff fb11 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b004      	add	sp, #16
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057da:	f3ef 8310 	mrs	r3, PRIMASK
 80057de:	60bb      	str	r3, [r7, #8]
  return(result);
 80057e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	2301      	movs	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2140      	movs	r1, #64	; 0x40
 80057fc:	438a      	bics	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff fade 	bl	8004ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b006      	add	sp, #24
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005830:	46c0      	nop			; (mov r8, r8)
 8005832:	46bd      	mov	sp, r7
 8005834:	b002      	add	sp, #8
 8005836:	bd80      	pop	{r7, pc}

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	2600      	movs	r6, #0
 800583c:	4d0c      	ldr	r5, [pc, #48]	; (8005870 <__libc_init_array+0x38>)
 800583e:	4c0d      	ldr	r4, [pc, #52]	; (8005874 <__libc_init_array+0x3c>)
 8005840:	1b64      	subs	r4, r4, r5
 8005842:	10a4      	asrs	r4, r4, #2
 8005844:	42a6      	cmp	r6, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	2600      	movs	r6, #0
 800584a:	f000 f821 	bl	8005890 <_init>
 800584e:	4d0a      	ldr	r5, [pc, #40]	; (8005878 <__libc_init_array+0x40>)
 8005850:	4c0a      	ldr	r4, [pc, #40]	; (800587c <__libc_init_array+0x44>)
 8005852:	1b64      	subs	r4, r4, r5
 8005854:	10a4      	asrs	r4, r4, #2
 8005856:	42a6      	cmp	r6, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	00b3      	lsls	r3, r6, #2
 800585e:	58eb      	ldr	r3, [r5, r3]
 8005860:	4798      	blx	r3
 8005862:	3601      	adds	r6, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	00b3      	lsls	r3, r6, #2
 8005868:	58eb      	ldr	r3, [r5, r3]
 800586a:	4798      	blx	r3
 800586c:	3601      	adds	r6, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	0800595c 	.word	0x0800595c
 8005874:	0800595c 	.word	0x0800595c
 8005878:	0800595c 	.word	0x0800595c
 800587c:	08005960 	.word	0x08005960

08005880 <memset>:
 8005880:	0003      	movs	r3, r0
 8005882:	1882      	adds	r2, r0, r2
 8005884:	4293      	cmp	r3, r2
 8005886:	d100      	bne.n	800588a <memset+0xa>
 8005888:	4770      	bx	lr
 800588a:	7019      	strb	r1, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	e7f9      	b.n	8005884 <memset+0x4>

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
